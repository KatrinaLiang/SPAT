import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.*;

import com.csvreader.CsvReader;
import com.csvreader.CsvWriter;

public class Task{
    /**
    同现标签数据：src/step1/tag_cooccurrence.csv
    开发者标签数据：src/step1/user_tag.csv
    推荐结果文件：src/step1/user_recommand.csv
    **/
    public static void main(String[] args) throws IOException {
        //读取文件内容至list集合中
        List<User> userlist = getUserTagsFromCsv("src/step1/user_tag.csv");

        List<String> data = new ArrayList<>();
        for (User user : userlist) {
            data.add(user.getTagStr());
        }

        Map<Integer, String> map = getTagFromCsv("src/step1/tag_cooccurrence.csv");

        //使用map+set存储同现标签
        Map<Integer, Set<String>> mapset = new HashMap<>();
        for (Integer key : map.keySet()) {
            String[] strings = map.get(key).split(",");
            Set<String> set = new HashSet<>();
            for (String str : strings) {
                set.add(str);
            }
            mapset.put(key, set);
        }

        List<String> relist = new ArrayList<String>();

        //start推荐算法,遍历每一个user
        for (int i = 0; i < userlist.size(); i++) {
            User user = userlist.get(i);
            Set<String> tempset = new HashSet<>();

            //user的tags
            List<Tag> list = user.getTags();
            Set<String> userset = new HashSet<>();

            //用户taglist转map
            for (Tag tag : list) {
                userset.add(tag.getName());
            }


            //遍历规则
            for (Integer index : mapset.keySet()) {


                //下面是一条规则的情况
                int counter = 0;
                Set<String> tagset = mapset.get(index);

                //遍历用户的兴趣
                for (Object o : userset.toArray()) {
                    String usertag = o.toString();

                    for (Object ot : tagset.toArray()) {
                        String tag = ot.toString();

                        if (counter > 0) {
                            if (!userset.contains(tag)) {
                                tempset.add(tag);
                            }
                        }

                        if (usertag.equals(tag)) {
                            counter++;
                        } else {
                            //等着看下一个
                        }

                    }
                }
            }

            String temp = "";
            //temp += i;
            for (Object o : tempset.toArray()) {
                String str = o.toString();
                temp += str + ",";
            }
            //System.out.println(temp);
            relist.add(temp);
            temp = temp.substring(0, temp.length() - 1);
        }

        //将数据写到user_recommand.csv中
        writeCsvFile("src/step1/user_recommand.csv", relist);

    }

    /**
     * 读取user_tag文件信息至list集合中
     *
     * @param path 文件路径
     * @return 用户的集合
     * @throws IOException
     */
    public static List<User> getUserTagsFromCsv(String path) throws IOException {
        // 创建创建用户集合并读取文件数据
        List<User> userList = new ArrayList<>();
        try {
            // 创建CSV读对象   需要设置编码格式为UTF-8
            CsvReader csvReader = new CsvReader(new FileInputStream(new File(path)), Charset.forName("UTF-8"));
            // 读表头
            boolean readHeaders = csvReader.readHeaders();
            while (csvReader.readRecord()) {
                // 读一整行
                // 读这行的第一列
                String id = csvReader.get(0);
               // System.out.println(id);
                String tagName = csvReader.get(1);
               // System.out.println(tagName);
                String weight = csvReader.get(2);
               // System.out.println(weight);
                String[] tagItems = tagName.split(",");
                String[] weightItems = weight.split(",");
                List<Tag> tags = new ArrayList<>();
                User user = new User();
                user.setTagStr(tagName);
                user.setUserId(Integer.valueOf(id));
                for (int j = 0; j < tagItems.length; j++) {
                    Tag tag = new Tag();
                    tag.setName(tagItems[j]);
                    tag.setWeight(Double.valueOf(weightItems[j].replace("[", "").replace("]", "")));
                    tags.add(tag);
                }
                user.setTags(tags);
                userList.add(user);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return userList;
    }

    /**
     * 读取tag_coocurrence.csv
     *
     * @param path 路径
     * @return 读取后生成map集合
     * @throws IOException
     */
    public static Map<Integer, String> getTagFromCsv(String path) throws IOException {
        Map<Integer, String> map = new HashMap<>();
        //创建csv读对象
        CsvReader csvReader = new CsvReader(new FileInputStream(new File(path)), Charset.forName("UTF-8"));
        //读表头
        boolean readHeaders = csvReader.readHeaders();
        while (csvReader.readRecord()) {
            //读一整行
            //读取行的第一列
            String id = csvReader.get(0);
            //System.out.println(id);
            String tags = csvReader.get(1);
            //System.out.println(tags);
            map.put(Integer.parseInt(id), tags);
        }

        return map;
    }

    /**
     * 写结果文件
     *
     * @param filePath 文件路径
     * @param data     要写入的数据
     * @throws IOException
     */
    public static void writeCsvFile(String filePath, List<String> data) throws IOException {
        // 创建CSV写对象
        CsvWriter csvWriter = new CsvWriter(filePath, ',', Charset.forName("UTF-8"));
        // CsvWriter csvWriter = new CsvWriter(filePath);
        // 写表头
        String[] headers = {"id", "recommand_tags"};
        csvWriter.writeRecord(headers);
        //循环写数据
        int id = 1;
        for (String tag : data) {
            String[] content = {id++ + "", tag};
            csvWriter.writeRecord(content);
        }
        csvWriter.close();
    }
}

// 标签
class Tag {
    private String name; // 标签名
    private double weight; // 权重值

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getWeight() {
        return weight;
    }

    public void setWeight(double weight) {
        this.weight = weight;
    }
}

// 用户
class User {
    private int userId;
    private List<Tag> tags;
    private String tagStr;

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public List<Tag> getTags() {
        return tags;
    }

    public void setTags(List<Tag> tags) {
        this.tags = tags;
    }

    public String getTagStr() {
        return tagStr;
    }

    public void setTagStr(String tagStr) {
        this.tagStr = tagStr;
    }
}