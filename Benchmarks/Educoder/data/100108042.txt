package step3;

/**
 * Created by zengpeng on 2017/12/25.
 */
public class MyLinkedList {

    private Node first;//头结点，不存数据
    private Node last;//指向链表的最后一个节点
    private int size;

    public MyLinkedList() {
        size = 0;
        first = new Node(0, null);
        last = null;
    }

    /**
     * 添加到链表尾部
     *
     * @param item
     */
    public void add(int item) {
        /********** Begin *********/
    	Node newcode = new Node(item,null);
    	if(first.next == null){
    		first.next=newcode;
    		last=newcode;
    	}
    	else{
    		last.next=newcode;
    		last=newcode;
    	}
    	size++;
        /********** End *********/
    }

    /**
     * 添加数据item到指定位置index
     * index从0开始
     * @param index
     * @param item
     */
    public void add(int index, int item) {
        checkPosIndex(index);

        /********** Begin *********/
        Node current=first;
        Node previous=null;
        Node newcode = new Node(item, null);
        if(index==0){
        	newcode.next=first.next;
        	first.next = newcode;
        	if(index==size){
        		last=newcode;
        	}
        	size++;
        }
        else{
        	int j=0;
        	while(current !=null&&j<=index){
        		previous = current;
        		current = current.next;
        		j++;
        	}
        	
        		previous.next = newcode;
        		newcode.next = current;
        		
        	size++;
        }



        /********** End *********/
    }

    /**
     * 删除指定位置index处的元素并返回, index从0开始
     * @param index
     * @return
     */
    public int remove(int index) {     	
        checkPosIndex(index);

        /********** Begin *********/
        int oldValue;
        Node cur=first;
        if(index == 0){
        	oldValue =(cur.next).item;
        	first.next = (cur.next).next;
        	size--;
        	return oldValue;
        }
        else{      	
        	 Node current = first;
             Node previous =null;
        	int j = 0;
        	while(current.next !=null&&j<=index){
        		previous = current;
        		current = current.next;
        		j++;
        	}
        	oldValue = current.item;
        	if(index==size-1){
        		previous.next=null;
        		last=previous;
        	}
        	else{
        		previous.next = current.next;
        	}
        	
        	previous =null;
        	current = null;
        	size--;
        	return oldValue;
        }
        



        /********** End *********/
    }

    public int size() {
        return size;
    }

    private void checkPosIndex(int index) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
    }

    //结点内部类
    private static class Node {
        int item;
        Node next;

        Node(int item, Node next) {
            this.item = item;
            this.next = next;
        }
    }
}
