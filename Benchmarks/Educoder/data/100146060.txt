package step4;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
public class Task {
	public volatile int inc = 0;

	public void increase() {
		inc++;
	}

	public static void main(String[] args) {
		 
				
		final Task test = new Task();
		Lock lock = new ReentrantLock(); 
			lock.lock();
			try{
		for (int i = 0; i < 10; i++) {
			new Thread() {
				public void run() {
					for (int j = 0; j < 1000; j++){
						test.increase();						
					}
				};
			}.start();
		while (Thread.activeCount() > 1) // 保证前面的线程都执行完
			Thread.yield();
		}
		}
		catch (Exception e) {
                // TODO: handle exception
            }
			finally{
				lock.unlock();
			}
		
		System.out.println(test.inc);
			
	}
}