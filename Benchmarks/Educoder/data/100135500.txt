package case5;

public class abstractTest {
	public static void main(String[] args) {
		/********* begin *********/
		// 分别实例化Student类与Worker类的对象，并调用各自构造方法初始化类属性。
		Student s = new Student();
        Worker w = new Worker();
		// 分别调用各自类中被复写的talk()方法 打印信息。
		s.talk(s.name,s.age,s.occupation);
        w.talk(w.name,w.age,w.occupation);
		/********* end *********/
		
	}
}

// 声明一个名为Person的抽象类，在Person中声明了三个属性name age occupation和一个抽象方法——talk()。
abstract class Person {
	/********* begin *********/
	String name;
    int age;
    String occupation;
    abstract void talk(String name,int age,String occupation);
	/********* end *********/
}

// Student类继承自Person类，添加带三个参数的构造方法，复写talk()方法 返回姓名、年龄和职业信息
class Student extends Person {
	/********* begin *********/
	Student(){
        this.name="张三";
        this.age=20;
        this.occupation="学生";
    }
    void talk(String name,int age,String occupation){
        System.out.println(occupation+"——>姓名："+name+"，年龄："+age+"，职业："+occupation+"！");
    }
	/********* end *********/
}

// Worker类继承自Person类，添加带三个参数的构造方法，复写talk()方法 返回姓名、年龄和职业信息
class Worker extends Person {
	/********* begin *********/
	Worker(){
        this.name="李四";
        this.age=30;
        this.occupation="工人";
    }
    void talk(String name,int age,String occupation){
        System.out.println(occupation+"——>姓名："+name+"，年龄："+age+"，职业："+occupation+"！");
    }
	/********* end *********/

}