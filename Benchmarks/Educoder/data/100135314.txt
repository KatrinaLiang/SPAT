package case5;

public class abstractTest {
	public static void main(String[] args) {
		/********* begin *********/
		// 分别实例化Student类与Worker类的对象，并调用各自构造方法初始化类属性。
		Student s = new Student();
		s.setName("张三");
		s.setAge(20);
		s.setOccupation("学生");
		Worker w = new Worker();
		w.setName("李四");
		w.setAge(30);
		w.setOccupation("工人");
		// 分别调用各自类中被复写的talk()方法 打印信息。
		s.talk(s.getName(), s.getAge(), s.getOccupation());
		w.talk(w.getName(), w.getAge(), w.getOccupation());
		/********* end *********/
		
	}
}

// 声明一个名为Person的抽象类，在Person中声明了三个属性name age occupation和一个抽象方法——talk()。
abstract class Person {
	/********* begin *********/
	private String name;
	private int age;
	private String occupation;
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getOccupation() {
		return occupation;
	}

	public void setOccupation(String occupation) {
		this.occupation = occupation;
	}

	public abstract void talk();
	/********* end *********/
}

// Student类继承自Person类，添加带三个参数的构造方法，复写talk()方法 返回姓名、年龄和职业信息
class Student extends Person {
	/********* begin *********/
	public void talk(String name,int age,String occupation) {
		System.out.println("学生——>" + "姓名：" + name + "，年龄：" + age + "，职业：" + occupation + "！");
	}
	@Override
	public void talk() {
		// TODO Auto-generated method stub
		
	}
	/********* end *********/

	
}

// Worker类继承自Person类，添加带三个参数的构造方法，复写talk()方法 返回姓名、年龄和职业信息
class Worker extends Person {

	
	/********* begin *********/
	@Override
	public void talk() {
		// TODO Auto-generated method stub
	}
	public void talk(String name,int age,String occupation) {
		System.out.println("工人——>" + "姓名：" + name + "，年龄：" + age + "，职业：" + occupation + "！");
	}
	/********* end *********/

}