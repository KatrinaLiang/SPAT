package step4;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Task {

    public volatile int inc = 0;
    private static Lock lock = new ReentrantLock();

    public void increase() {
        inc++;
    }

    public static void main(String[] args) {
        final Task Task = new Task();
        for (int i = 0; i < 10; i++) {
            new Thread(() -> {
                try {
                    if (lock.tryLock(7000, TimeUnit.MILLISECONDS)) {
                        try {
                            for(int j=0;j<1000;j++) {
                                Task.increase();
                            }
                        } catch (Exception e) {
                        } finally {
                            lock.unlock();
                        }
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }).start();
        }
        //保证前面的线程都执行完
        while (Thread.activeCount() > 1) {
            Thread.yield();
        }
        System.out.println(Task.inc);
    }
}
