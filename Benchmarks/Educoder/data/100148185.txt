
package step1;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Task {
	public static void main(String[] args) throws Exception {
		/********* Begin *********/
		//在这里创建线程， 开启线程
		new MyThread.ThreadA().start();
		new MyThread.ThreadB().start();
		new MyThread.ThreadC().start();


		
		/********* End *********/
	}
}

class MyThread extends Thread {
	/********* Begin *********/
	
	static int count = 5;
	static Lock lock = new ReentrantLock();
	static int state = 0;
	
	public  static class ThreadA extends Thread {
		 
		@Override
		public void run() {
			for (int i = 0; i < count;) {
 				lock.lock();
				if (state % 3 == 0) {
					System.out.println("Java ThreadAA");
					state++;
					i++;
				}
 				lock.unlock();
			}
		}
	}

	public static class ThreadB extends Thread {
		
		@Override
		public void run() {
			for (int i = 0; i < count;) {
 				lock.lock();
				if (state % 3 ==1) {
					System.out.println("Java ThreadBB");
					state++;
					i++;
				}
 				lock.unlock();
			}
		}
	}

	public static class ThreadC extends Thread {
		
		@Override
		public void run() {
			for (int i = 0; i < count;) {
 				lock.lock();
				if (state % 3 == 2) {
					System.out.println("Java ThreadCC");
					state++;
					i++;
				}
 				lock.unlock();
			}
		}
	}

	/********* End *********/
}
