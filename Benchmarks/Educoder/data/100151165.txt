
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;

import java.util.List;

import com.csvreader.CsvReader;
import com.csvreader.CsvWriter;

/*********************数据说明***********************
* 训练数据：src/step1/input/train.csv
* 测试数据：src/step1/input/test.csv
* 结果文件：src/step1/ground_truth/test_prediction.csv
****************************************************/
public class Task {
    
    public static void main(String[] args) throws IOException {
        /********* Begin *********/
        List<String> trainList=getListFromCsv("src/step1/input/train.csv");
        List<String> testList=getListFromCsv("src/step1/input/test.csv");
        //List<String> trainList=getListFromCsv("E:\\workspace\\green\\src\\level3\\step1\\train.csv");
        //List<String> testList=getListFromCsv("E:\\workspace\\green\\src\\level3\\step1\\test.csv");
        List<String> Pid=new ArrayList<String>();
        List<String> Pdata = new ArrayList<String>();
        int n=trainList.size();
        int m=trainList.get(0).split(",").length-2;
        double train_x[][]=new double[n][m];
        double train_y[]=new double[n];
        for(int i=0;i<n;++i) {
            String strs[]=trainList.get(i).split(",");
            for(int j=0;j<m;++j) {
                train_x[i][j]=Double.parseDouble(strs[j+1]);
            }
            train_y[i]=Double.parseDouble(strs[strs.length-1]);
        }
        
        int t_n=testList.size();
        int t_m=testList.get(0).split(",").length-1;
        double test_x[][]=new double[t_n][t_m];
        for(int i=0;i<t_n;++i) {
            String strs[]=testList.get(i).split(",");
            Pid.add(strs[0]);
            for(int j=0;j<t_m;++j) {
                test_x[i][j]=Double.parseDouble(strs[j+1]);
            }
        }
        
        
        
        
        for(int j=0;j<m;++j) {
            double max=train_x[0][j];
            double min=train_x[0][j];
            for(int i=0;i<n;++i) {
                if(max<train_x[i][j]) {
                    max=train_x[i][j];
                }
                if(min>train_x[i][j]) {
                    min=train_x[i][j];
                }
            }
            for(int i=0;i<n;++i) {
                train_x[i][j]=(train_x[i][j]-min)/(max-min+1);
            }
        }
        
        for(int j=0;j<t_m;++j) {
            double max=test_x[0][j];
            double min=test_x[0][j];
            for(int i=0;i<t_n;++i) {
                if(max<test_x[i][j]) {
                    max=test_x[i][j];
                }
                if(min>test_x[i][j]) {
                    min=test_x[i][j];
                }
            }
            for(int i=0;i<t_n;++i) {
                test_x[i][j]=(test_x[i][j]-min)/(max-min+1);
            }
        }
        
        double []theta=linerByBGD(train_x,train_y);
        
        /*
        for(int j=0;j<theta.length;++j) {
            System.out.print(theta[j]+" ");
        }
        System.out.println();*/
        for(int i=0;i<test_x.length;++i) {
            double r=theta[test_x[i].length];
            for(int j=0;j<test_x[i].length;++j) {
                r+=test_x[i][j]*theta[j];
            }
            if(r<0.001) {
                r=0;
            }else if(r>0.999) {
                r=1;
            }
            //System.out.println(r);
            Pdata.add(r+"");
        }

        
        writeCsvFile("src/output/test_prediction.csv", Pid,Pdata);
        //writeCsvFile("E:\\workspace\\green\\src\\level3\\step1\\test_prediction.csv", Pid,Pdata);
        /********* End *********/
        
    }
    
    public static double []linerByBGD(double [][] x,double ys[]){
        int n=x.length;
        int m=x[0].length;
        double alpha=0.01;
        double [][]xs=new double[n][m+1];
        for(int i=0;i<n;++i) {
            for(int j=0;j<m;++j) {
                xs[i][j]=x[i][j];
            }
            xs[i][m]=1;
        }
        double theta[]=new double[m+1];
        int cnt=0;
        while(cnt<20000) {
            //System.out.print(cnt+" times:");
            for(int j=0;j<=m;++j) {
                double s=0;
                for(int i=0;i<n;++i) {
                    double t=0;
                    double h=0;
                    for(int k=0;k<=m;++k) {
                        h+=theta[k]*xs[i][k];
                    }
                    t=(ys[i]-h)*xs[i][j];
                    s+=t;
                }
                s=s/m;
                theta[j]=theta[j]+alpha*s;
                //System.out.print(s+" ");
            }
            //System.out.println();
            cnt++;
        }
        return theta;
    }
    /**
     * 读取csv文件
     * 
     * @param path 文件路径
     * @return 用户的集合
     * @throws IOException
     */
    public static List<String> getListFromCsv(String path) throws IOException {
        List<String> info = new ArrayList<>();
        try {
            // 创建CSV读对象   需要设置编码格式为UTF-8
            CsvReader csvReader = new CsvReader(new FileInputStream(new File(path)),Charset.forName("UTF-8"));
            // 读表头
            boolean readHeaders = csvReader.readHeaders();
            while (csvReader.readRecord()) {
                // 读一整行
                // 读取第一列的数据   csvReader.get(0);
                // 读取一行的数据
                String row = csvReader.getRawRecord();
                info.add(row);
            }
            csvReader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return info;
    }
    
    /**
     * 写结果文件
     * 
     * @param filePath 文件路径
     * @param data 要写入的数据
     * @throws IOException
     */
    public static void writeCsvFile(String filePath, List<String> ids,List<String> data) throws IOException {
        // 创建CSV写对象
        CsvWriter csvWriter = new CsvWriter(filePath, ',', Charset.forName("UTF-8"));
        // CsvWriter csvWriter = new CsvWriter(filePath);
        // 写表头
        String[] headers = {"ID","TARGET"};
        csvWriter.writeRecord(headers);
        //循环写数据
        for(int i = 0 ;i < ids.size();i++){
            String[] content = {ids.get(i), data.get(i)};
            csvWriter.writeRecord(content);
        }
        csvWriter.close();
    }

}


