package step1;

/**
 * Created by zengpeng on 2018/3/3.
 */
public class BSTree {

    private TreeNode root;//根结点

    public BSTree() {
        root = null;
    }

    /**
     * 向树root中插入key
     *
     * @param key 要插入的值
     */
    public void insert(int key) {
        /********** Begin *********/
    	if (root == null) {
            root = new TreeNode(null,null,key);
    	     return;
    	}
    	TreeNode currentNode = root;
    	TreeNode parentNode = root;
        boolean isLeftChild = true;
        while (currentNode != null) {
        parentNode = currentNode;
        if (key < currentNode.item) {
    	currentNode = currentNode.leftChild;
    	isLeftChild = true;
    	} else {
    		     currentNode = currentNode.rightChild;
    		     isLeftChild = false;
    		    }
    	}
    	TreeNode newNode = new TreeNode(null,null,key);
    	if (isLeftChild) {
    		parentNode.leftChild = newNode;
    	} else {
    		parentNode.rightChild = newNode;
    	}
        
        /********** End *********/
    }

    public void preOrder() {
        preOrder(root);
    }

    public void inOrder() {
        inOrder(root);
    }

    public void postOrder(){
        postOrder(root);
    }

    private void preOrder(TreeNode node) {
        if (node != null) {
            System.out.print(node.item + " ");
            preOrder(node.leftChild);
            preOrder(node.rightChild);
        }
    }

    private void inOrder(TreeNode node) {
        if (node != null) {
            inOrder(node.leftChild);
            System.out.print(node.item + " ");
            inOrder(node.rightChild);
        }
    }

    private void postOrder(TreeNode node) {
        if (node != null) {
            postOrder(node.leftChild);
            postOrder(node.rightChild);
            System.out.print(node.item + " ");
        }
    }


    public static class TreeNode {
        private TreeNode leftChild;
        private TreeNode rightChild;
        private int item;

        public TreeNode(int item) {
            this(null, null, item);
        }

        public TreeNode(TreeNode leftChild, TreeNode rightChild, int item) {
            this.leftChild = leftChild;
            this.rightChild = rightChild;
            this.item = item;
        }
    }
}
