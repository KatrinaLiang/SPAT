package step3;

/**
 * Created by zengpeng on 2017/12/25.
 */
public class MyLinkedList {

    private Node first;//头结点，不存数据
    private Node last;//指向链表的最后一个节点
    private int size;

    public MyLinkedList() {
        size = 0;
        first = new Node(0, null);
        last = null;
    }

    /**
     * 添加到链表尾部
     *
     * @param item
     */
    public void add(int item) {
        /********** Begin *********/
        if(first == null){
	            first = new Node(item,null);
	        }
	        else{
	            Node current = first;
	            while(current.next!=null){
	                current = current.next;
	            }
	            current.next = new Node(item,null);
	        }
	        size ++;



        /********** End *********/
    }

    /**
     * 添加数据item到指定位置index
     * index从0开始
     * @param index
     * @param item
     */
    public void add(int index, int item) {
        checkPosIndex(index);

        /********** Begin *********/
         int n = index;
	        Node newnode = first;
	        while ((n--) > 0) {
	        	newnode = newnode.next;
	        }

	        final Node node = new Node(item, null);
	        if (null == first.next) {
	            last = node;
	        }
	        node.next = newnode.next;
	        newnode.next = node;
	        ++size;


        /********** End *********/
    }

    /**
     * 删除指定位置index处的元素并返回, index从0开始
     * @param index
     * @return
     */
    public int remove(int index) {
        checkPosIndex(index);

        /********** Begin *********/
        Node newnode = first;
	        while ((index--) > 0) {
	        	newnode = newnode.next;
	        }
	        Node del = newnode.next;
	        if (del == last) {
	            last = newnode;
	        }
	        newnode.next = del.next;
	        del.next = null;

	        int oldVal = del.item;

	        del = null;
	        --size;
	        return oldVal;


        /********** End *********/
    }

    public int size() {
        return size;
    }

    private void checkPosIndex(int index) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
    }

    //结点内部类
    private static class Node {
        int item;
        Node next;

        Node(int item, Node next) {
            this.item = item;
            this.next = next;
        }
    }
}

