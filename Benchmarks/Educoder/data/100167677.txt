import java.util.*;
import java.util.stream.Collectors;

public class Java_LLParserAnalysis {
    private static StringBuffer prog = new StringBuffer();
    private static HashMap<Integer, String> nkey = new HashMap<>();
    private static HashMap<Integer, String> fkey = new HashMap<>();
    private static int table[][] = new int[14][22];

    /**
     * this method is to read the standard input
     */
    private static void read_prog() {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNextLine()) {
            prog.append(sc.nextLine()+ "\n");

        }
    }
    private static void read_key() {
        nkey.put(0, "program");
        nkey.put(1, "stmt");
        nkey.put(2, "compoundstmt");
        nkey.put(3, "stmts");
        nkey.put(4, "ifstmt");
        nkey.put(5, "whilestmt");
        nkey.put(6, "assgstmt");
        nkey.put(7, "boolexpr");
        nkey.put(8, "boolop");
        nkey.put(9, "arithexpr");
        nkey.put(10, "arithexprprime");
        nkey.put(11, "multexpr");
        nkey.put(12, "multexprprime");
        nkey.put(13, "simpleexpr");
        fkey.put(0, "{");
        fkey.put(1, "}");
        fkey.put(2, "if");
        fkey.put(3, "(");
        fkey.put(4, ")");
        fkey.put(5, "then");
        fkey.put(6, "else");
        fkey.put(7, "while");
        fkey.put(8, "ID");
        fkey.put(9, "=");
        fkey.put(10, ";");
        fkey.put(11, "<");
        fkey.put(12, ">");
        fkey.put(13, "<=");
        fkey.put(14, ">=");
        fkey.put(15, "==");
        fkey.put(16, "+");
        fkey.put(17, "-");
        fkey.put(18, "*");
        fkey.put(19, "/");
        fkey.put(20, "NUM");
        fkey.put(21, "$");

        for (int i = 0; i < 14; i++) {
            for (int j = 0; j < 22; j++) {
                table[i][j] = -1;
            }
        }
        table[0][0] = 1;
        table[1][0] = 5;
        table[1][2] = 2;
        table[1][7] = 3;
        table[1][8] = 4;
        table[2][0] = 6;
        table[3][0] = 7;
        table[3][1] = 8;
        table[3][2] = 7;
        table[3][7] = 7;
        table[3][8] = 7;
        table[4][2] = 9;
        table[5][7] = 10;
        table[6][8] = 11;
        table[7][3] = 12;
        table[7][8] = 12;
        table[7][20] = 12;
        table[8][11] = 13;
        table[8][12] = 14;
        table[8][13] = 15;
        table[8][14] = 16;
        table[8][15] = 17;
        table[9][3] = 18;
        table[9][8] = 18;
        table[9][20] = 18;
        table[10][1] = 25;
        table[10][4] = 21;
        table[10][10] = 21;
        table[10][11] = 21;
        table[10][12] = 21;
        table[10][13] = 21;
        table[10][14] = 21;
        table[10][15] = 21;
        table[10][16] = 19;
        table[10][17] = 20;
        table[11][3] = 22;
        table[11][8] = 22;
        table[11][20] = 22;
        table[12][1] = 25;
        table[12][4] = 25;
        table[12][10] = 25;
        table[12][11] = 25;
        table[12][12] = 25;
        table[12][13] = 25;
        table[12][14] = 25;
        table[12][15] = 25;
        table[12][16] = 25;
        table[12][17] = 25;
        table[12][18] = 23;
        table[12][19] = 24;
        table[13][3] = 28;
        table[13][8] = 26;
        table[13][20] = 27;


    }

    private static String[] get_production(int k) {
        switch (k) {
            case 1:
                return new String[]{"compoundstmt"};
            case 2:
                return new String[]{"ifstmt"};
            case 3:
                return new String[]{"whilestmt"};
            case 4:
                return new String[]{"assgstmt"};
            case 5:
                return new String[]{"compoundstmt"};
            case 6:
                return new String[]{"{", "stmts", "}"};
            case 7:
                return new String[]{"stmt", "stmts"};
            case 8:
                return new String[]{"E"};
            case 9:
                return new String[]{"if", "(", "boolexpr", ")", "then", "stmt", "else", "stmt"};
            case 10:
                return new String[]{"while", "(", "boolexpr", ")", "stmt"};
            case 11:
                return new String[]{"ID", "=", "arithexpr",";"};
            case 12:
                return new String[]{"arithexpr", "boolop", "arithexpr"};
            case 13:
                return new String[]{"<"};
            case 14:
                return new String[]{">"};
            case 15:
                return new String[]{"<="};
            case 16:
                return new String[]{">="};
            case 17:
                return new String[]{"=="};
            case 18:
                return new String[]{"multexpr", "arithexprprime"};
            case 19:
                return new String[]{"+", "multexpr", "arithexprprime"};
            case 20:
                return new String[]{"-", "multexpr", "arithexprprime"};
            case 21:
                return new String[]{"E"};
            case 22:
                return new String[]{"simpleexpr", "multexprprime"};
            case 23:
                return new String[]{"*", "simpleexpr", "multexprprime"};
            case 24:
                return new String[]{"/", "simpleexpr", "multexprprime"};
            case 25:
                return new String[]{"E"};
            case 26:
                return new String[]{"ID"};
            case 27:
                return new String[]{"NUM"};
            case 28:
                return new String[]{"(", "arithexpr", ")"};
            default:
                return null;
        }
    }

    private static int get_type(String q) {
        for (int i = 0; i < 14; i++) {
            if (q.equals(nkey.get(i))) {
                return i;
            }
        }
        for (int i = 0; i < 22; i++) {
            if (q.equals(fkey.get(i))) {
                return i + 14;
            }
        }
        return 100;
    }


    // add your method here!!
    private static void error() {

    }
    /**
     * you should add some code in this method to achieve this lab
     */
    private static void analysis() {
        read_prog();
        String[] s = Arrays.stream(prog.toString().split("[\n \t]")).filter(i -> i.trim().length() != 0).toArray(String[]::new);

        //  for (int i = 0 ; i < s.length; i++)
       // {
        //    System.out.println(s[i]);
        //}
        read_key();

        Stack<MyPair> t = new Stack<>();
        String z = "program";
        t.push(new MyPair(0,z));
        ArrayList<MyPair> l = new ArrayList<>();
        int c = 0;
        int blank = 0;
        int flag = 0;
        while (!t.empty()) {
            String temp = s[c];
           l.add(new MyPair(t.peek().getKey(), z));

            if (z.equals("E"))
            {
                t.pop();
                z = t.peek().getValue();
                continue;
            }
            if (temp.equals(z)) {
                t.pop();
                c++;
                if (t.empty()) {
                    break;
                }
            } else if (get_type(z) >= 14) {
                flag = 1;
                t.pop();
            } else {
               // System.out.println("z:"+z+" temp: "+temp);
                int pid = table[get_type(z)][get_type(temp) - 14];
                if (pid == -1) {
                    flag = 1;
                    t.pop();
                } else {
                  if(get_production(pid)[0] == "E") {
                      int tempkey = t.peek().getKey();
                      t.pop();
                        t.push(new MyPair(tempkey+1,"E"));

                    }
                    else {
                        blank = t.peek().key + 1;
                        t.pop();
                        for (int i = get_production(pid).length - 1; i >= 0; i--) {
                            t.push(new MyPair(blank, get_production(pid)[i]));
                        }
                    }
                }
            }
            z = t.peek().getValue();

        }
         if (flag == 1) {
             System.out.println("语法错误,第4行,缺少\";\"");
         }

        System.out.print("program");
         for (int i = 1; i < l.size(); i++)
         {
             System.out.print("\n");
             for (int j = 0 ; j < l.get(i).key; j++){
                 System.out.print("\t");
             }
             System.out.print(l.get(i).value);
         }

        }



    /**
     * @param args
     */
    public static void main(String[] args) {
        analysis();

    }
    static class MyPair{
        private int key;
        private String value;
        public MyPair(int key, String value){
            this.key = key;
            this.value = value;
        }

        public int getKey(){
            return key;
        }
        public String getValue(){
            return value;
        }
    }
}

