package step3;

/**
 * Created by zengpeng on 2017/12/25.
 */
public class MyLinkedList {

    private Node first;//头结点，不存数据
    private Node last;//指向链表的最后一个节点
    private int size;

    public MyLinkedList() {
        size = 0;
        first = new Node(0, null);
        last = null;
    }

    /**
     * 添加到链表尾部
     *
     * @param item
     */
    public void add(int item) {
        /********** Begin *********/
        Node newnode=new Node(item,null);
        if(first.next==null)
        {
            first.next=newnode;
            last=newnode;
            size++;
        }
        else
        {
            last.next=newnode;
            last=newnode;
            size++;
        }


        /********** End *********/
    }

    /**
     * 添加数据item到指定位置index
     * index从0开始
     * @param index
     * @param item
     */
    public void add(int index, int item) {
        checkPosIndex(index);

        /********** Begin *********/
        Node x=first;
        Node y=null;
        Node newnode=new Node(item,null);
        int n=0;
        if(index==0)
        {
           newnode.next=first.next;
            first.next=newnode;
            if(index==size)
            {
                last=newnode;
            }
            size++;
        }
           else
           {
               while(x.next!=null&&n<=index)
                     {
                         y=x;
                         x=x.next;
                         n++;
                     }
                     y.next=newnode;
                     newnode.next=x;
                     x=null;
                     y=null;
                     size++;
                     
                     
                     }
         /********** End *********/
    }

    /**
     * 删除指定位置index处的元素并返回, index从0开始
     * @param index
     * @return
     */
    public int remove(int index) {
        checkPosIndex(index);

        /********** Begin *********/
        int item;
        if(index==0)
        {
            item=(first.next).item;
            first.next=(first.next).next;
            size--;
            return item;
        }
        else
        {
            Node x=first;
            Node y=null;
            int n=0;
            while(x.next!=null&&n<=index)
            {
                y=x;
                x=x.next;
                n++;
            }
            item=x.item;
            if(index==size-1)
            {
                y.next=null;
                last=y;
            }
            else
            {
                y.next=x.next;
            }
            x=null;
            y=null;
            size--;
            return item;
        }



        /********** End *********/
    }

    public int size() {
        return size;
    }

    private void checkPosIndex(int index) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
    }

    //结点内部类
    private static class Node {
        int item;
        Node next;

        Node(int item, Node next) {
            this.item = item;
            this.next = next;
        }
    }
}
