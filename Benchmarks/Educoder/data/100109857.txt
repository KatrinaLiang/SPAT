package step2;

/**
 * Created by zengpeng on 2018/3/14.
 */
public class BSTree {
    private TreeNode root;//根结点

    public BSTree() {
        root = null;
    }

    /**
     * 向树root中插入a
     *
     * @param key 要插入的值
     */
    public void insert(int key) {
        TreeNode x = root;
        TreeNode p = null;//始终指向x的父结点
        while (x != null) {
            p = x;
            if (key < x.item) {
                x = x.leftChild;
            } else {
                x = x.rightChild;
            }
        }
        if (null == p) {//空树
            root = new TreeNode(key);
        } else if (key < p.item) {
            p.leftChild = new TreeNode(key);
        } else {
            p.rightChild = new TreeNode(key);
        }
    }

    /**
     * 在树root中删除结点key
     *
     * @param key
     * @return
     */
    public void delete(int key) {
        root = delete(root, key);
    }

    private TreeNode delete(TreeNode x, int key) {
        /********** Begin *********/
        //System.out.println(key);
		TreeNode cur=x;
        TreeNode pre=null;
        while(cur.item!=key){
            if(key>cur.item){
                pre=cur;
                cur=cur.rightChild;
            }
            else{
                pre=cur;
            	cur=cur.leftChild;
            }
        }
        if(cur.leftChild==null&&cur.rightChild==null){
            if(cur==x&&cur.item==key&&pre==null){
            	return null;
            }
        	else if(pre.rightChild==cur){
            	pre.rightChild=null;
            }else{
            	pre.leftChild=null;
            }
        }else if((cur.leftChild==null&&cur.rightChild!=null)||(cur.leftChild!=null&&cur.rightChild==null)){
        	if(pre==null&&cur==x){
            	if(cur.rightChild!=null){
                	x=cur.rightChild;
                }
                else{
                	x=cur.leftChild;
                }
            }
            else if(cur.rightChild!=null){
            	if(pre.rightChild==cur){
                	pre.rightChild=cur.rightChild;
                }else{
                	pre.leftChild=cur.rightChild;
                }
            }else{
            	if(pre.leftChild==cur){
                	pre.leftChild=cur.leftChild;
                }else{
                	pre.rightChild=cur.leftChild;
                }
            }
        }else{
        	TreeNode newcode=min(cur.rightChild);
            TreeNode y=deleteMin(cur.rightChild);
            //System.out.println(newcode.item);
            if(pre==null){
            	//TreeNode s=x.rightChild;
                //TreeNode ss=x.leftChild;
                x.item=newcode.item;
                //x.rightChild=s;
                //x.leftChild=ss;
            }
            else if(pre.rightChild==cur){
            	pre.rightChild=newcode;
            }else{
            	pre.leftChild=newcode;
            }
        }
	return x;

        /********** End *********/
    }

    /**
     * 删除树x中的最小结点
     *
     * @param x
     * @return
     */
    private TreeNode deleteMin(TreeNode x) {
        if (x.leftChild == null) return x.rightChild;
        x.leftChild = deleteMin(x.leftChild);
        return x;
    }

    /**
     * 查找树x中的最小结点
     *
     * @param x
     * @return
     */
    private TreeNode min(TreeNode x) {
        TreeNode p = x;
        while (p.leftChild != null) {
            p = p.leftChild;
        }
        return p;
    }

    public void preOrder() {
        preOrder(root);
    }

    private void preOrder(TreeNode node) {
        if (node != null) {
            System.out.print(node.item + " ");
            preOrder(node.leftChild);
            preOrder(node.rightChild);
        }
    }

    public void inOrder() {
        inOrder(root);
    }

    private void inOrder(TreeNode node) {
        if (node != null) {
            inOrder(node.leftChild);
            System.out.print(node.item + " ");
            inOrder(node.rightChild);
        }
    }

    public void postOrder() {
        postOrder(root);
    }

    private void postOrder(TreeNode node) {
        if (node != null) {
            postOrder(node.leftChild);
            postOrder(node.rightChild);
            System.out.print(node.item + " ");
        }
    }


    public static class TreeNode {
        private TreeNode leftChild;
        private TreeNode rightChild;
        private int item;

        public TreeNode(int item) {
            this(null, null, item);
        }

        public TreeNode(TreeNode leftChild, TreeNode rightChild, int item) {
            this.leftChild = leftChild;
            this.rightChild = rightChild;
            this.item = item;
        }
    }
}
