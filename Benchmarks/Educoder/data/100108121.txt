package step3;

/**
 * Created by zengpeng on 2017/12/25.
 */
public class MyLinkedList {

    private Node first;//头结点，不存数据
    private Node last;//指向链表的最后一个节点
    private int size;

    public MyLinkedList() {
        size = 0;
        first = new Node(0, null);
        last = null;
    }

    /**
     * 添加到链表尾部
     *
     * @param item
     */
    public void add(int item) {
        /********** Begin *********/
    	final Node T = last;
    	final Node node = new Node(item,null);
    	last = node;
    	if(first.next == null)
    	{
    		first.next = node;
    	}
    	else
    		T.next = node;
    	    ++size;


        /********** End *********/
    }

    /**
     * 添加数据item到指定位置index
     * index从0开始
     * @param index
     * @param item
     */
    public void add(int index, int item) {
        checkPosIndex(index);

        /********** Begin *********/
        int n = index;
        Node T = first;
        while((n--)>0)
        {
        	T = T.next;
        }
        final Node node = new Node(item,null);
        if(null == first.next)
        {
        	last = node;
        }
        node.next = T.next;
        T.next = node;
        ++size;

        /********** End *********/
    }

    /**
     * 删除指定位置index处的元素并返回, index从0开始
     * @param index
     * @return
     */
    public int remove(int index) {
        checkPosIndex(index);

        /********** Begin *********/
        Node H = first;
        while((index--)>0)
        {
        	H = H.next;
        }
        Node del = H.next;
        if(del == last)
        {
        	last = H;
        }
        H.next = del.next;
        del.next = null;
        int oldVal = del.item;
        del = null;
        --size;
        return oldVal;

        /********** End *********/
    }

    public int size() {
        return size;
    }

    private void checkPosIndex(int index) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
    }

    //结点内部类
    private static class Node {
        int item;
        Node next;

        Node(int item, Node next) {
            this.item = item;
            this.next = next;
        }
    }
}