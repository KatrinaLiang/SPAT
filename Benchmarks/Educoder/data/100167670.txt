import java.util.*;

public class Java_LLParserAnalysis {

    private static StringBuffer prog = new StringBuffer();

    private static void read_prog() {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNextLine()) {
            prog.append(sc.nextLine()).append("\n");
        }
    }

    private class Production {
        String from;
        List<String> to;

        private Production() {
        }

        private Production(String _from, String... strings) {
            from = _from;
            to = Arrays.asList(strings);
        }

        @Override
        public String toString() {
            return from + " -> " + String.join(" ", to);
        }
    }

    private class Sync extends Production {
    }

    private class Token {
        String value;
        int lineNum;

        private Token(String value, int lineNum) {
            this.value = value;
            this.lineNum = lineNum;
        }
    }

    private final List<String> nonTerminates = Arrays.asList(
        "program",
        "stmt",
        "compoundstmt",
        "stmts",
        "ifstmt",
        "whilestmt",
        "assgstmt",
        "boolexpr",
        "boolop",
        "arithexpr",
        "arithexprprime",
        "multexpr",
        "multexprprime",
        "simpleexpr"
    );

    private final List<String> terminates = Arrays.asList(
        "{",
        "}",
        "if",
        "(",
        ")",
        "then",
        "else",
        "while",
        "ID",
        "=",
        ";",
        "<",
        ">",
        "<=",
        ">=",
        "==",
        "+",
        "-",
        "*",
        "/",
        "NUM",
        "$"
    );

    private final List<Production> productions = Arrays.asList(
        new Production("program", "compoundstmt"),
        new Production("stmt", "ifstmt"),
        new Production("stmt", "whilestmt"),
        new Production("stmt", "assgstmt"),
        new Production("stmt", "compoundstmt"),
        new Production("compoundstmt", "{", "stmts", "}"),
        new Production("stmts", "stmt", "stmts"),
        new Production("stmts", "E"),
        new Production("ifstmt", "if", "(", "boolexpr", ")", "then", "stmt", "else", "stmt"),
        new Production("whilestmt", "while", "(", "boolexpr", ")", "stmt"),
        new Production("assgstmt", "ID", "=", "arithexpr", ";"),
        new Production("boolexpr", "arithexpr", "boolop", "arithexpr"),
        new Production("boolop", "<"),
        new Production("boolop", ">"),
        new Production("boolop", "<="),
        new Production("boolop", ">="),
        new Production("boolop", "=="),
        new Production("arithexpr", "multexpr", "arithexprprime"),
        new Production("arithexprprime", "+", "multexpr", "arithexprprime"),
        new Production("arithexprprime", "-", "multexpr", "arithexprprime"),
        new Production("arithexprprime", "E"),
        new Production("multexpr", "simpleexpr", "multexprprime"),
        new Production("multexprprime", "*", "simpleexpr", "multexprprime"),
        new Production("multexprprime", "/", "simpleexpr", "multexprprime"),
        new Production("multexprprime", "E"),
        new Production("simpleexpr", "ID"),
        new Production("simpleexpr", "NUM"),
        new Production("simpleexpr", "(", "arithexpr", ")")
    );

    private boolean canProductE(String s) {
        return s.equals("arithexprprime") || s.equals("multexprprime") || s.equals("stmts");
    }

    private final Map<String, Map<String, Production>> map = new HashMap<>();

    {
        for (String key : nonTerminates) {
            map.put(key, new HashMap<>());
        }
        map.get("program").put("{", productions.get(0));

        map.get("stmt").put("{", productions.get(4));
        map.get("stmt").put("if", productions.get(1));
        map.get("stmt").put("while", productions.get(2));
        map.get("stmt").put("ID", productions.get(3));

        map.get("compoundstmt").put("{", productions.get(5));

        map.get("stmts").put("{", productions.get(6));
        map.get("stmts").put("}", productions.get(7));
        map.get("stmts").put("if", productions.get(6));
        map.get("stmts").put("while", productions.get(6));
        map.get("stmts").put("ID", productions.get(6));

        map.get("ifstmt").put("if", productions.get(8));

        map.get("whilestmt").put("while", productions.get(9));

        map.get("assgstmt").put("ID", productions.get(10));

        map.get("boolexpr").put("(", productions.get(11));
        map.get("boolexpr").put("ID", productions.get(11));
        map.get("boolexpr").put("NUM", productions.get(11));

        map.get("boolop").put("<", productions.get(12));
        map.get("boolop").put(">", productions.get(13));
        map.get("boolop").put("<=", productions.get(14));
        map.get("boolop").put(">=", productions.get(15));
        map.get("boolop").put("==", productions.get(16));

        map.get("arithexpr").put("(", productions.get(17));
        map.get("arithexpr").put("ID", productions.get(17));
        map.get("arithexpr").put("NUM", productions.get(17));

        map.get("arithexprprime").put(";", productions.get(20));
        map.get("arithexprprime").put(")", productions.get(20));
        map.get("arithexprprime").put("<", productions.get(20));
        map.get("arithexprprime").put(">", productions.get(20));
        map.get("arithexprprime").put("<=", productions.get(20));
        map.get("arithexprprime").put(">=", productions.get(20));
        map.get("arithexprprime").put("==", productions.get(20));
        map.get("arithexprprime").put("+", productions.get(18));
        map.get("arithexprprime").put("-", productions.get(19));

        map.get("multexpr").put("(", productions.get(21));
        map.get("multexpr").put("ID", productions.get(21));
        map.get("multexpr").put("NUM", productions.get(21));

        map.get("multexprprime").put(";", productions.get(24));
        map.get("multexprprime").put(")", productions.get(24));
        map.get("multexprprime").put("<", productions.get(24));
        map.get("multexprprime").put(">", productions.get(24));
        map.get("multexprprime").put("<=", productions.get(24));
        map.get("multexprprime").put(">=", productions.get(24));
        map.get("multexprprime").put("==", productions.get(24));
        map.get("multexprprime").put("+", productions.get(24));
        map.get("multexprprime").put("-", productions.get(24));
        map.get("multexprprime").put("*", productions.get(22));
        map.get("multexprprime").put("/", productions.get(23));

        map.get("simpleexpr").put("(", productions.get(27));
        map.get("simpleexpr").put("ID", productions.get(25));
        map.get("simpleexpr").put("NUM", productions.get(26));

        addSync("stmt", "}", "else");
        addSync("compoundstmt", "if", "while", "ID", "}", "else");
        addSync("ifstmt", "while", "ID", "{", "}", "else");
        addSync("whilestmt", "if", "ID", "{", "}", "else");
        addSync("assgstmt", "if", "while", "{", "}", "else");
        addSync("boolexpr", ")");
        addSync("boolop", "ID", "NUM", "(");
        addSync("arithexpr", ";", "<", ">", "<=", ">=", "==", ")");
        addSync("multexpr", "+", "-", ";", "<", ">", "<=", ">=", "==", ")");
        addSync("simpleexpr", "*", "/", "+", "-", ";", "<", ">", "<=", ">=", "==", ")");

    }

    private void addSync(String key, String... syncs) {
        Sync sync = new Sync();
        Map<String, Production> cur = map.get(key);
        for (String s : syncs) cur.put(s, sync);
    }

    private boolean isTerminate(String token) {
        return terminates.contains(token);
    }

    private List<Token> tokenize(String input) {
        int lineNum = 0;
        List<Token> tokens = new ArrayList<>();
        for (String line : input.split("\n")) {
            if (line.trim().length() == 0) continue;
            lineNum++;
            for (String token : line.split("[ \t]")) {
                if (token.trim().length() == 0) continue;
                tokens.add(new Token(token.trim(), lineNum));
            }
        }
        return tokens;
    }


    private void analyze(String input) {
        List<Production> productions = new ArrayList<>();

        List<Token> tokens = tokenize(input);
        Stack<String> stack = new Stack<>();
        stack.push("program");
        int curLine = 1;
        int p = 0;
        while (!stack.isEmpty()) {
            String X = stack.peek();
            Token curToken = tokens.get(p);
            if (X.equals(curToken.value) || X.equals("E")) {
                // 如果栈顶元素相同，那么直接弹出
                stack.pop();
                curLine = curToken.lineNum;
                if (!X.equals("E")) p++;
            } else if (isTerminate(X)) {
                // err: 终结符号不匹配，弹出栈顶终结符
                System.out.println("语法错误,第" + curLine + "行,缺少\"" + X + "\"");
                stack.pop();

            } else if (map.get(X).get(curToken.value) == null) {
                // err: 表中对应位置没有元素，忽略输入符号
                if (canProductE(X)) productions.add(new Production(X, "E"));
                stack.pop();
            } else if (map.get(X).get(curToken.value) instanceof Sync) {
                // err: 表中为同步符号，弹出栈顶非终结符
                stack.pop();
            } else {
                // 输出产生式，用产生式的右侧替换栈顶符号
                Production production = map.get(X).get(curToken.value);
                productions.add(production);
                stack.pop();
                List<String> items = production.to;
                for (int i = items.size() - 1; i >= 0; i--) {
                    stack.push(items.get(i));
                }
            }

        }
        List<String> output = new ArrayList<>();
        printProductionsRecursively(output, productions, 0);
        System.out.print(String.join("\n", output));
    }

    private int globalIndex = 0;

    private void printProductionsRecursively(List<String> output, List<Production> productions, int depth) {
        if (globalIndex >= productions.size()) return;
        Production cur = productions.get(globalIndex++);
        output.add(renderTextWithDepth(cur.from, depth));
        for (String next : cur.to) {
            if (isTerminate(next) || next.equals("E")) {
                output.add(renderTextWithDepth(next, depth + 1));
            } else {
                printProductionsRecursively(output, productions, depth + 1);
            }
        }
    }

    private String renderTextWithDepth(String text, int depth) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < depth; i++) {
            sb.append("\t");
        }
        sb.append(text);
        return sb.toString();
    }


    public static void main(String[] args) {
        Java_LLParserAnalysis analysis = new Java_LLParserAnalysis();
        read_prog();
        analysis.analyze(prog.toString());
//        analysis.analyze("" +
//            "\n" +
//            "{\n" +
//            "if ( ID == ID)\n" +
//            "then\n" +
//            "ID = NUM ;\n" +
//            "else\n" +
//            "ID = ID * NUM ;\n" +
//            "}"
//        );
    }
}
