package step3;

public class Task {
	
	public static int concaveValley(Integer[] arr) {
		
		if(isOrdered(arr) != 0) {
//			System.out.println("数组有序");
			return 0;
		}
		int len = arr.length;
		int[] minIndexList = getLocalMin(arr);
		int[] resultList = new int[minIndexList.length];
		int resultIndex = 0;
		
		for(int index : minIndexList) {
//			System.out.println("The Number: " + arr[index]);
			Integer[] subList;
			int count_left = -1;
//			System.out.println("left:");
			do{
				count_left++;
				subList = getSubList(arr, count_left, index);
//				print(subList);
			}while(isOrdered(subList) != -1);
//			System.out.println("right:");
			int count_right = len;
			do {
				count_right--;
				subList = getSubList(arr,index,count_right);
//				print(subList);	
			}while(isOrdered(subList) != 1);	
			resultList[resultIndex++] = count_right - count_left + 1;
//			System.out.println("The length is: " + resultList[resultIndex-1]);
//			System.out.println("=== === === ");
		}
		
		return getMax(resultList);		
	}
	
	/**
	 * 返回0表示不是单调数组；返回1表示单调递增；返回-1表示单调递减；
	 * @param arr
	 * @return -1,0,1
	 */
	public static int isOrdered(Integer[] arr) {
		
		int len = arr.length;
		int increment = 0;	//递增数量
		int decrease  = 0;	//递减数量
		
		for(int i=0; i<len-1; i++) {
			if(arr[i] < arr[i+1]) {	
				increment++;
			} else {
				decrease++;
			}
		}		
		
		if(increment == len-1) {
			return 1;
		} else if(decrease == len-1) {
			return -1;
		} else {
			return 0;
		}
	}
	
	public static Integer[] getSubList(Integer[] arr,int start,int end) {
		
		int len = end-start+1;
		Integer[] subList = new Integer[len];	
		for(int i=0; i<len; i++) {
			subList[i] = arr[start++];
		}
		return subList;
	}
	
	public static int[] getLocalMin(Integer[] arr) {
		
		int len = arr.length;
		int indexList[] = new int[len];
		int index = 0;
		for(int i=1; i<len-1; i++) {
			if(arr[i] < arr[i+1] && arr[i] < arr[i-1]) {
				indexList[index++] = i;
			}
		}
		int[] tmpList = new int[index];
		for(int i=0; i<index; i++) {
			tmpList[i] = indexList[i];
		}
		return tmpList;
	}
	
	public static int getMax(int[] arr) {
		
		int max = 0;
		for(int elem : arr) {
			if(max < elem) {
				max = elem;
			}
		}
		return max;
	}
	
	public static void print(Integer[] subList) {
		for(int elem : subList) {
			System.out.print(elem + " ");
		}
		System.out.println();
	}
}
