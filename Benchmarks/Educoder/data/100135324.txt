package case5;

public class abstractTest {
	public static void main(String[] args) {
		/********* begin *********/
		// 分别实例化Student类与Worker类的对象，并调用各自构造方法初始化类属性。
		
		// 分别调用各自类中被复写的talk()方法 打印信息。
		Student a=new  Student();
		Worker  b=new Worker();
		 a.talk("张三",20 , "学生");
		 b.talk("李四",30 , "工人");
		System.out.println(a.getN()+"——>姓名："+a.getName()+"，年龄："+a.getAge()+"，职业："+a.getN()+"！");
		System.out.println(b.getN()+"——>姓名："+b.getName()+"，年龄："+b.getAge()+"，职业："+b.getN()+"！");
		/********* end *********/
		
	}
}

// 声明一个名为Person的抽象类，在Person中声明了三个属性name age occupation和一个抽象方法——talk()。
abstract class Person {
	/********* begin *********/
String name;
	 int age;
	 String occupation; 
	 abstract void talk(String name,int age,String occupation) ;
	/********* end *********/
}

// Student类继承自Person类，添加带三个参数的构造方法，复写talk()方法 返回姓名、年龄和职业信息
class Student extends Person {
	/********* begin *********/
public void talk(String name,int age, String occupation) {
	this.name=name;
	this.age=age;
	this.occupation=occupation;
	
}
public String getName() {
	return name;
}

public int getAge() {
	return age;
}
public String getN() {
	return occupation;
}
	/********* end *********/
}

// Worker类继承自Person类，添加带三个参数的构造方法，复写talk()方法 返回姓名、年龄和职业信息
class Worker extends Person {
	/********* begin *********/
public void talk(String name,int age, String occupation) {
	this.name=name;
	this.age=age;
	this.occupation=occupation;
	
}
public String getName() {
	return name;
}

public int getAge() {
	return age;
}
public String getN() {
	return occupation;
}
	/********* end *********/

}