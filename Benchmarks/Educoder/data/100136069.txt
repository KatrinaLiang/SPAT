package case1;

import java.util.Scanner;

public class Task1 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String dogName = sc.next();
		String dogSex = sc.next();
		String dogColor = sc.next();
		String catName = sc.next();
		String catSex = sc.next();
		double catWeight = sc.nextDouble();
		// 通过有参构造函数实例化Dog类对象dog
		// dog调用talk()方法
		// dog调用eat()方法
		/********* begin *********/
		Dog oa = new Dog(dogName,dogSex,dogColor);
oa.talk();oa.eat();
	        
/********* end *********/
		// 通过有参构造函数实例化Cat类对象cat
		// cat调用talk()方法
		// cat调用eat()方法
		/********* begin *********/
		Cat ob = new Cat(catName,catSex,catWeight);
        
ob.talk();
ob.eat();        

		/********* end *********/
	}
}

// 抽象类Pet 封装属性name和sex
// 构造函数初始化name和sex
// 声明抽象方法talk()
// 声明抽象方法eat()
abstract class Pet {
	/********* begin *********/
	String name;
    String sex;
	public void set(String s1,String  s2){
	   name = s1;sex = s2; 
}
    
abstract public void talk();
    
abstract public void eat();
	/********* end *********/
}

// Dog类继承自Pet类 封装属性color
// 构造函数初始化name、sex和color
// 实现自己的talk()方法和eat()方法
// talk()输出'名称：name，性别：sex，颜色：color，汪汪叫'
// eat()输出'name吃骨头'
class Dog extends Pet {
	/********* begin *********/
	String color;
  public Dog(String a,String b,String c){
	super.name = a;
	super.sex = b;
	color = c;
}
public void talk(){
	System.out.println("名称："+super.name+"，性别："+super.sex+"，颜色："+color+"，汪汪叫");
}
public void eat(){
	System.out.println(super.name+"吃骨头！");
}
	/********* end *********/
}

// Cat类继承自Pet类 封装属性weight
// 构造函数初始化name、sex和weight
// 实现自己的talk()方法和eat()方法
// talk()输出'名称：name，性别：sex，体重：weight kg，喵喵叫'
// eat()输出'name吃鱼'
class Cat extends Pet {
	/********* begin *********/
    double weight;
	public Cat(String a,String b,double c){
	super.name = a;
	super.sex = b;
	weight = c;
}

public void eat(){
	System.out.println(super.name+"吃鱼！");
}
public void talk(){
	System.out.println("名称："+super.name+"，性别："+super.sex+"，体重："+weight+"kg"+"，喵喵叫");
}

	/********* end *********/
}