import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.*;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import com.csvreader.CsvReader;
import com.csvreader.CsvWriter;

public class Task {

    public static void main(String[] args) throws IOException {
        //读取文件内容至list集合中
        List<User> userlist = getUserTagsFromCsv("src/step1/user_tag.csv");
        Map<Integer, List<Tag>> map = getTagFromCsv("src/step1/tag_cooccurrence.csv");
        
        List<String> data = new ArrayList<>();
        
        boolean flag = false;
        String s = "";
        int x = 0;
        int w=0;
        int y = 0;
        
       
        for (User user : userlist) {
            List<T> ts = new ArrayList<T>();
            List<Tag> tagList =  user.getTags();
            
            s = "";
            x = 0;
            for(Tag t : tagList){ 
            y = 0;
             
            for(int i=1;i<=map.size();i++){
                
                flag = false;
              if(map.get(i).get(0).getStrtag().contains(t.getName())){
                x++;
                y++;
                flag = true;
              }
              if(flag){
               for(Tag tag : map.get(i)){
                   int f = 0;
                   for(T tt : ts){
                    if(tt.getName().equals(tag.getName())){
                    f = 1;
                    tt.setA(tt.getA()+1);
                    tt.setB(tt.getB()+1);
                    break;
                    }
                   
                   }
                 if((f==0)&&(!t.getName().equals(tag.getName()))){
                    T tt = new T();
                   tt.setName(tag.getName());
                   tt.setA(1);
                   tt.setB(1);
                   ts.add(tt);
                 }
               }
                    
              }
           
            }
             for(T tt : ts){
               
                 if(tt.getB()>=1){
                     if (y>2) {
                   tt.setWeight(tt.getWeight()+(((double)tt.getB() * t.getWeight())/(double)y));
                     }
                   tt.setB(0);
                   
                 }
             }
           }
           List<T> t1 = new ArrayList<T>();
           for (T tt : ts){
            for (Tag t : tagList){
             if (t.getName().equals(tt.getName())){
                t1.add(tt);
                break; 
             }
                
            }
               
           }
          /* for(T t : t1){
            System.out.println(t.getName()+" "+t.getWeight());   
            System.out.println();      
           }*/
           ts.removeAll(t1);
           for(int i=0;i<10;i++){
               T tt = ts.get(0);
               //tt.setWeight(tt.getWeight()+((double)tt.getA()/(double)x));
           for (T t : ts){
               // t.setWeight(t.getWeight()+((double)t.getA()/(double)x));
                 if(tt.getWeight()<t.getWeight()) {
                     
                    tt = t; 
                     
                 }

           }
             
             s = s+tt.getName()+",";
             ts.remove(tt);
        }
           
         
           s = s.substring(0, s.length()-1);
            data.add(s); 
            
            
        }
        
        
        //将数据写到user_recommand.csv中
        writeCsvFile("src/step1/user_recommand.csv",data);
    }

    /**
     * 读取user_tag文件信息至list集合中
     * 
     * @param path
     *            文件路径
     * @return 用户的集合
     * @throws IOException
     */
    public static List<User> getUserTagsFromCsv(String path) throws IOException {
        // 创建创建用户集合并读取文件数据
        List<User> userList = new ArrayList<>();
        try {
            // 创建CSV读对象
           CsvReader csvReader = new CsvReader(new FileInputStream(new File(path)),Charset.forName("UTF-8"));
            // 读表头
            boolean readHeaders = csvReader.readHeaders();
            while (csvReader.readRecord()) {
                // 读一整行
                // 读这行的第一列
                String id = csvReader.get(0);        //读id
                String tagName = csvReader.get(1);    //标签名
                String weight = csvReader.get(2);    //对应权重
                String[] tagItems = tagName.split(",");
                String[] weightItems = weight.split(",");
                List<Tag> tags = new ArrayList<>();
                User user = new User();
                user.setTagStr(tagName);
                user.setUserId(Integer.valueOf(id));
                for (int j = 0; j < tagItems.length; j++) {
                    Tag tag = new Tag();
                    tag.setName(tagItems[j]);
                    tag.setWeight(Double.valueOf(weightItems[j].replace("[", "").replace("]", "")));
                    tags.add(tag);
                }
                user.setTags(tags);
                userList.add(user);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return userList;
    }

    /**
     * 读取tag_coocurrence.csv
     * @param path 路径
     * @return 读取后生成map集合
     * @throws IOException
     */
    public static Map<Integer, List<Tag>> getTagFromCsv(String path) throws IOException {
         Map<Integer, List<Tag>> map = new HashMap<>();
        try {
            // 创建CSV读对象
           CsvReader csvReader = new CsvReader(new FileInputStream(new File(path)),Charset.forName("UTF-8"));
            // 读表头
            boolean readHeaders = csvReader.readHeaders();
            while (csvReader.readRecord()) {
                // 读一整行
                // 读这行的第一列
                String id = csvReader.get(0);        //读id
                String tagName = csvReader.get(1);    //标签名
                
                String[] tagItems = tagName.split(",");
                List<Tag> tags = new ArrayList<>();
                for (int j = 0; j < tagItems.length; j++) {
                    Tag tag = new Tag();
                    tag.setName(tagItems[j]);
                    tag.setStrtag(tagName);
                    
                    tags.add(tag);
                }
                map.put(Integer.valueOf(id),tags);
                
                
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 写结果文件
     * 
     * @param filePath 文件路径
     * @param data 要写入的数据
     * @throws IOException
     */
    public static void writeCsvFile(String filePath, List<String> data) throws IOException {
        // 创建CSV写对象
        CsvWriter csvWriter = new CsvWriter(filePath, ',', Charset.forName("UTF-8"));
        // CsvWriter csvWriter = new CsvWriter(filePath);
        // 写表头
        String[] headers = {"id","recommand_tags"};
        csvWriter.writeRecord(headers);
        //循环写数据
       
        int id = 1;
        for (String tag : data) {
            String[] content = {id++ +"", tag};
            csvWriter.writeRecord(content);
        }
        csvWriter.close();
    }
    
    
}

class T{
        private String name;
        private int a;
        private int b;
        private double weight;


        public double getWeight() {
            return weight;
        }

        public void setWeight(double weight) {
            this.weight = weight;
        }
    
        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getA() {
            return a;
        }

        public void setA(int a) {
            this.a = a;
        }

        public int getB() {
            return b;
        }

        public void setB(int b) {
            this.b = b;
        }
    }

// 标签
class Tag {
    private String name; // 标签名
    private double weight; // 权重值
    private String strtag;
   
    public String getStrtag() {
        return strtag;
    }

    public void setStrtag(String strtag) {
        this.strtag = strtag;
    }
    
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getWeight() {
        return weight;
    }

    public void setWeight(double weight) {
        this.weight = weight;
    }
    
}

// 用户
class User {
    private int userId;
    private List<Tag> tags;
    private String tagStr;

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public List<Tag> getTags() {
        return tags;
    }

    public void setTags(List<Tag> tags) {
        this.tags = tags;
    }

    public String getTagStr() {
        return tagStr;
    }

    public void setTagStr(String tagStr) {
        this.tagStr = tagStr;
    }
}

