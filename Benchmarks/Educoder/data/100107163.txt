package step1;

/**
 * Created by sykus on 2018/1/15.
 */
public class MyCircleLinkedList {
    private Node head;//头结点, 不存数据
    private Node tail;//尾结点, 指向链表的最后一个节点
    private int size;

    @Override
	public String toString() {
		return "MyCircleLinkedList [head=" + head + ", size=" + size
				+ ", tail=" + tail + "]";
	}

	public MyCircleLinkedList() {
        head = new Node(Integer.MIN_VALUE, null);
        tail = head;
        size = 0;
    }

    /**
     * 添加到链表尾部
     *
     * @param item
     */
    public void add(int item) {
        /********** Begin *********/
		Node c = head;
		while(c.next != null){
			c = c.next;
		}
        c.next = new Node(item,null);
        size++;
        /********** End *********/
    }

    /**
     * 遍历链表并输出元素
     */
    public void output() {
        /********** Begin *********/
        Node c = head;
		while(size()!=0){
            System.out.println(c.next.item);
            c = c.next;
            size--;
        }


        /********** End *********/
    }

    public boolean isEmpty() {
        return head.next == head;
    }

    public int size() {
        return size;
    }

    //结点内部类
    private static class Node {
        int item;
        Node next;

        @Override
		public String toString() {
			return "item=" + item + ", next=" + next + "";
		}

		Node(int item, Node next) {
            this.item = item;
            this.next = next;
        }
    }
}
