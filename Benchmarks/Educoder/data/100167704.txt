import java.util.*;



class State{
    int num;
    List<Expression> expressions;
    Map<String,State> goTo =new LinkedHashMap<>();


    State(){
        this.expressions=new ArrayList<>();

    }

    State(int num,List<Expression> expressions){
        this.num=num;
        this.expressions=expressions;
    }

    @Override
    public boolean equals(Object obj) {
        if(this==obj){
            return true;
        }
        if(obj instanceof State){
            return ((State) obj).expressions.equals(this.expressions);
        }
        return false;
    }

    void add(Expression expression){
        this.expressions.add(expression);
    }
}

class Expression{

    String father;
    List<String> expr;
    String postfix;

    Expression(String father,List<String> expr){
        this.father=father;
        this.expr=expr;
    }

    public String turnToString(){
        String str="";
        for(int i=0;i<expr.size();i++){
            str+=expr.get(i)+" ";
        }
        return str;
    }

    @Override
    public boolean equals(Object obj) {
        if(this==obj){
            return true;
        }
        if(obj instanceof Expression){
            if(((Expression) obj).expr.size()!=this.expr.size()){
                return false;
            }
            if(((Expression) obj).father.equals(this.father)){

               for(int i=0;i<((Expression) obj).expr.size();i++){
                   if(!((Expression) obj).expr.get(i).equals(this.expr.get(i))){
                       return false;
                   }
               }
               return true;
            }
        }
        return false;
    }
}

public class Java_LRParserAnalysis {

     private static HashMap<String,String> followset=new HashMap<>();
     private static String [][] table=new String[58][36];
     private static int numOfStates=0;
     private static List<List<String>> grammer=new ArrayList<>();
     private static List<State> states=new ArrayList<>();
     private static HashMap<String,String> expression=new HashMap<>();
     private static HashMap<String,String> firstSet=new HashMap<>();
     private static HashSet<String> nts=new HashSet<>();
     private static HashSet<String> ts=new HashSet<>();
     private static HashMap<String,Integer> ntandt=new HashMap<>();
     private static Stack<String> stack=new Stack<>();
     private static List<String> input=new ArrayList<>();
     private static List<String> output=new ArrayList<>();
    private static List<Integer> row=new ArrayList<>();
    private static int errorrow=0;
    private static int numOfRemovedInputs=0;

     private static void initialize(){

         String nt[]={"program'","program","stmt" ,
                 "compoundstmt",
                 "stmts" ,
                 "ifstmt" ,
                 "whilestmt",
                 "assgstmt" ,
                 "boolexpr" ,
                 "boolop" ,
                 "arithexpr" ,
                 "arithexprprime",
                 "multexpr" ,
                 "multexprprime" ,
                 "simpleexpr"};

         String t[]={"{"	,"}","if","while",	"ID",
                 "<",">",	"<=",	">=",	"==",
                 "NUM"	,"+",	"-",	"*"	,"/",
                 "$",	"(",	")",";","=","then","else"};

        String all[]={"{"	,"}","if","while",	"ID",
                "<",">",	"<=",	">=",	"==",
                "NUM"	,"+",	"-",	"*"	,"/",
                "$",	"(",	")",";","=","then","else","program","stmt" ,
                "compoundstmt",
                "stmts" ,
                "ifstmt" ,
                "whilestmt",
                "assgstmt" ,
                "boolexpr" ,
                "boolop" ,
                "arithexpr" ,
                "arithexprprime",
                "multexpr" ,
                "multexprprime" ,
                "simpleexpr"};
        for(int i=0;i<all.length;i++){
            ntandt.put(all[i],i);
        }
         for(int i=0;i<nt.length;i++){
             nts.add(nt[i]);
         }
         for(int j=0;j<t.length;j++){
             ts.add(t[j]);
         }

         String expr[]={"program","compoundstmt","ifstmt|whilestmt|assgstmt|compoundstmt",
                 "{ stmts }","stmt stmts|E", "if ( boolexpr ) then stmt else stmt","while ( boolexpr ) stmt"
             ,"ID = arithexpr ;","arithexpr boolop arithexpr","<|>|<=|>=|==","multexpr arithexprprime",
             "+ multexpr arithexprprime|- multexpr arithexprprime|E","simpleexpr multexprprime","* simpleexpr multexprprime|/ simpleexpr multexprprime|E",
          "ID|NUM|( arithexpr )" };

         String  first[]={"{","if while ID {","{","if while ID { E","if","while","ID","ID NUM (","< > <= >= ==","ID NUM (","+ - E","ID NUM (","* / E","ID NUM ("};
         String follow[]={"$","if while ID {  } else","$ if while ID {  } else",
         "}","if while ID } else {","if while ID { else }","if while ID { else }",")","ID NUM (",
         "; ) < > <= >= >= ==","; ) < > <= >= ==","+ -  ; ) < > >= <= ==","+ -  ; ) < > <= >= ==",
         "* / + - ; ) < > <= >= =="};

         for(int i=0;i<15;i++){
             expression.put(nt[i],expr[i]);
         }
         for(int i=0;i<first.length;i++){
             firstSet.put(nt[i+1],first[i]);
         }
         for(int i=0;i<follow.length;i++){
              followset.put(nt[i+1],follow[i]);
         }
     }




    public static String computeFirst(Expression expr){
        int index=0;
        index=expr.expr.indexOf(".");
        if(index==expr.expr.size()-1){
            return "end";
        }
         if(index==expr.expr.size()-2){
             return expr.postfix;
         }else{
            String str=expr.expr.get(index+2);
            if(nts.contains(str)){
                String first=firstSet.get(str);
//                while(firstSet.get(str).contains("E")){
//                    first+=
//                }
                return firstSet.get(str);
            }else if(ts.contains(str)){
                return str;
            }
         }
          return "error";
    }

    public static List<String> turntoList(String str){
        int index=0;
        List<String> res=new ArrayList<>();
        StringBuffer word=new StringBuffer();
        while(index<str.length()){
            word.delete(0,word.length());
            while(index<str.length()&&str.charAt(index)==' '){
                index++;
            }

            while(index<str.length()&&str.charAt(index)!=' '){
                char c=str.charAt(index);
                word.append(c);
                index++;
            }
            if(!word.toString().equals("")) {
                res.add(word.toString());
            }
        }
        return res;
    }

    public static List<List<String>> process(String str){
        String newstr[]= str.split("\\|");
        List<List<String>> ans=new ArrayList<>();
        for(int i=0;i<newstr.length;i++){
           String s=". "+newstr[i];
           List<String> list=turntoList(s);
           ans.add(list);
       }
      return ans;
    }

     public static List<Expression> closure(Expression expr){
         List<Expression> ans=new ArrayList<>();
         ans.add(expr);
         int index=expr.expr.indexOf(".");
         if(index==expr.expr.size()-1){
             return ans;
         }
         String head=expr.expr.get(index+1);
         if(ts.contains(head)){
             return ans;
         }
         if(head.equals("E")){
             return ans;
         }
         List<List<String>> process=process(expression.get(head));
         for(int i=0;i<process.size();i++){
             Expression newexpr=new Expression(head,process.get(i));
                ans.addAll(closure(newexpr));
         }
         return ans;
     }

     public static Expression moveDot(Expression expr){
         List<String> copyexpr=new ArrayList<>();
         for(int i=0;i<expr.expr.size();i++){
             copyexpr.add(expr.expr.get(i));
         }
         Expression newexpr=new Expression(expr.father,copyexpr);
         int index=newexpr.expr.indexOf(".");
         if(index==newexpr.expr.size()-1){
             return newexpr;
         }
         newexpr.expr.remove(index);
         newexpr.expr.add(index+1,".");
         return newexpr;
     }

     public static State goTo(State state, String str){
         State newState=new State();
         for(int i=0;i<state.expressions.size();i++){
             Expression nowexpr =state.expressions.get(i);
             int index= nowexpr.expr.indexOf(".");
             if(index!=nowexpr.expr.size()-1){
                 if(nowexpr.expr.get(index+1).equals(str)){
                     Expression newexpr=moveDot(nowexpr);
                     newState.expressions.addAll(closure(newexpr));
                 }
             }
         }
         return newState;
     }

     public static List<State> createStates(State state){
         List<State> statelist=new ArrayList<>();
         Set<String> gotos=new LinkedHashSet<>();
         for(Expression expr:state.expressions){
             int index=expr.expr.indexOf(".");
             if(index!=expr.expr.size()-1){
                 if(!expr.expr.get(index+1).equals("E")) {
                     gotos.add(expr.expr.get(index + 1));
                 }
             }
         }
         int size=states.size();
         for(String str:gotos){
             if(checkRepetition(goTo(state,str))==null) {
                 State s= goTo(state,str);
                 s.num=size++;
                 state.goTo.put(str,s);
                 statelist.add(s);
             }else{
                 state.goTo.put(str,checkRepetition(goTo(state,str)));
             }
         }
         return statelist;
     }

     public static State checkRepetition(State state){
         for(State s:states){
             if(s.equals(state)){
                 return s;
             }
         }
         return null;
     }

     public static void analysis(){
        List<String> start=new ArrayList<>();
        start.add(".");
        start.add("program");
        Expression startexpr=new Expression("program'",start);
        State startstate=new State();
        startstate.num=0;
        startstate.expressions=closure(startexpr);
        states.add(startstate);
        int index=0;
        while(index<states.size()){
            List<State> stateToList=new ArrayList<>(states);
          states.addAll(createStates(stateToList.get(index)));
          index++;
        }
     }

     public static void createTable(){

         for(int i=0;i<58;i++){
             for(Map.Entry<String,State> entry:states.get(i).goTo.entrySet()){
                 int index=ntandt.get(entry.getKey());
                 if(ts.contains(entry.getKey())) {
                     table[i][index] = "s" + entry.getValue().num;
                 }else{
                     table[i][index] = ""+entry.getValue().num;
                 }
             }
             for(Expression expr:states.get(i).expressions){
                 int index=expr.expr.indexOf(".");
                 if((index==expr.expr.size()-1&&!expr.father.equals("program'"))||(index==expr.expr.size()-2&&expr.expr.get(index+1).equals("E"))){
                     String follow=followset.get(expr.father);
                     List<String> followlist=turntoList(follow);
                     for(int j=0;j<followlist.size();j++) {
                         if (!followlist.get(j).equals("E")) {
                             int index2 = ntandt.get(followlist.get(j));
                             String removedot=expr.turnToString();
                             List<String> removedotlist=turntoList(removedot);
                             removedotlist.remove(".");
                             String ans="";
                             for(int k=0;k<removedotlist.size();k++){
                                 ans+=removedotlist.get(k)+" ";
                             }
                             table[i][index2] = expr.father+"->"+ans;
                         }
                     }
                 }else if(expr.father.equals("program'")&&index==expr.expr.size()-1){
                     int index3=ntandt.get("$");
                     table[i][index3]="acc";
                 }
             }
         }


     }

    private static StringBuffer prog = new StringBuffer();

    /**
     *  this method is to read the standard input
     */
    private static void read_prog()
    {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNextLine())
        {
            String str=sc.nextLine();
            prog.append(str);
            input.addAll(turntoList(str));
            row.add(input.size());
        }
    }

    public static void analyze(){
        input.add("$");
        List<String> actionlist=new ArrayList<>();
        String action="";
        stack.push("0");
       while(!action.equals("acc")){
            int top=Integer.parseInt(stack.peek());
            String first=input.get(0);
            int index=ntandt.get(first);
            action=table[top][index];
            if(action==null){
                for(int i=0;i<row.size();i++){
                    if(numOfRemovedInputs<=row.get(i)){
                        errorrow=i+1;
                        break;
                    }
                }
                input.add(0,";");
                action="";
            }else if(action.charAt(0)=='s'&&action.charAt(1)>='0'&&action.charAt(1)<='9'){
                    int num=Integer.parseInt(action.substring(1));
                    stack.push(first);
                    stack.push(action.substring(1));
                    input.remove(0);
                    numOfRemovedInputs++;
            }else if(!action.equals("acc")){
                String[] splitstring=action.split("->");
                String father=splitstring[0];
                String expr=splitstring[1];
                List<String> exprlist=turntoList(expr);
                int indexofexpr=exprlist.size()-1;
                while(indexofexpr>=0){
                    if(exprlist.get(indexofexpr).equals(stack.get(stack.size()-2))){
                        stack.pop();
                        stack.pop();
                    }
                    indexofexpr--;
                }
                stack.push(father);
                int num2=ntandt.get(father);
                int num3=Integer.parseInt(stack.get(stack.size()-2));
                String number=table[num3][num2];
                stack.push(number);
                actionlist.add(action);
            }

       }

       output.add("program");
       for(int i=actionlist.size()-1;i>=0;i--){
           int index=output.size()-1;
           String[] split=actionlist.get(i).split("->");
           String father=split[0];
           String expr=split[1];
           String str=output.get(index);
           List<String> strlist=turntoList(str);
           List<String> exprlist=turntoList(expr);
           int indexofstr=strlist.size()-1;
           while(indexofstr>=0){
               if(strlist.get(indexofstr).equals(father)){
                   strlist.remove(indexofstr);
                   if(!exprlist.get(0).equals("E")){
                   strlist.addAll(indexofstr,exprlist);
                   }
                  break;
               }
               indexofstr--;
           }
           String ans="";
           for(int j=0;j<strlist.size();j++){
               ans+=strlist.get(j)+" ";
           }
           output.add(ans);
       }
       if(errorrow!=0){
           System.out.println("语法错误，第"+errorrow+"行，缺少\";\"");
       }
       System.out.println(output.get(0)+" => ");
       for(int i=1;i<output.size()-1;i++){
           System.out.println(output.get(i)+"=> ");
       }
           System.out.print(output.get(output.size()-1));
    }


    public static  void print(){
        for (State state1 : states) {
            System.out.println("I" + state1.num + ": ");
            for (int i = 0; i < state1.expressions.size(); i++) {
                System.out.println(state1.expressions.get(i).father + "->" + state1.expressions.get(i).turnToString());
            }
            System.out.println();
            for (Map.Entry<String, State> entry : state1.goTo.entrySet()) {
                System.out.println(entry.getKey() + "       " + entry.getValue().num);
            }

            System.out.println();
        }
        for(int i=0;i<58;i++){
            System.out.print(i+": ");
            for(int j=0;j<36;j++){
                if(table[i][j]!=null) {
                    System.out.print(table[i][j] + "    ");
                } else{
                    System.out.print("    ");
                }
            }
            System.out.println();
        }
    }



    public static void main(String[] args) {
        initialize();
        analysis();
        createTable();
        read_prog();
        //print();
        analyze();
    }


}
