package case1;

import java.util.Scanner;

public class Task1 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String dogName = sc.next();
		String dogSex = sc.next();
		String dogColor = sc.next();
		String catName = sc.next();
		String catSex = sc.next();
		double catWeight = sc.nextDouble();
		// 通过有参构造函数实例化Dog类对象dog
		// dog调用talk()方法
		// dog调用eat()方法
		/********* begin *********/
		Dog d=new Dog(dogName,dogSex,dogColor);
        d.talk();
        d.eat(dogName);
        Cat c=new Cat(catName,catSex,catWeight);
        c.talk();
        c.eat(catName);
        
		/********* end *********/
		// 通过有参构造函数实例化Cat类对象cat
		// cat调用talk()方法
		// cat调用eat()方法
		/********* begin *********/
		
		/********* end *********/
	}
}

// 抽象类Pet 封装属性name和sex
// 构造函数初始化name和sex
// 声明抽象方法talk()
// 声明抽象方法eat()
abstract class Pet {
	/********* begin *********/
 String name;
    String sex;
    void talk(){};
    void eat(){};
	/********* end *********/
}

// Dog类继承自Pet类 封装属性color
// 构造函数初始化name、sex和color
// 实现自己的talk()方法和eat()方法
// talk()输出'名称：name，性别：sex，颜色：color，汪汪叫'
// eat()输出'name吃骨头'
class Dog extends Pet {
    String color;
    public Dog(String n,String s,String c){
        
    System.out.print("名称："+n);
    System.out.print("，性别："+s);
    System.out.print("，颜色："+c);};
    void talk(){
    System.out.println("，汪汪叫");};
    void eat(String b)
    {System.out.println(b+"吃骨头！");};
}
	/********* begin *********/
	
	/********* end *********/


// Cat类继承自Pet类 封装属性weight
// 构造函数初始化name、sex和weight
// 实现自己的talk()方法和eat()方法
// talk()输出'名称：name，性别：sex，体重：weight kg，喵喵叫'
// eat()输出'name吃鱼'
class Cat extends Pet {
	/********* begin *********/
double weight;
   public Cat(String n,String s,double c){
       
    System.out.print("名称："+n);
    System.out.print("，性别："+s);
    System.out.print("，体重："+c+"kg");};
    void talk(){
       System.out.println("，喵喵叫");};
    void eat(String b)
    {System.out.println(b+"吃鱼！");};

    
	/********* end *********/
}