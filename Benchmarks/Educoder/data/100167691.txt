import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

public class Java_LRParserAnalysis
{
    private static StringBuffer prog = new StringBuffer();

    /**
     *  this method is to read the standard input
     */
    private static void read_prog()
    {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNextLine())
        {
            prog.append(sc.nextLine());
            prog.append('\n');
        }
    }


    // add your method here!!!
    
    private static final int[][] actiontable = {{0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{-999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,13,-8,10,0,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,13,-8,10,0,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,0,0}, 
{0,-2,-2,-2,0,0,0,0,-2,-2,0,0,0,0,0,0,0,0,0,0,0,0},
{0,-3,-3,-3,0,0,0,0,-3,-3,0,0,0,0,0,0,0,0,0,0,0,0},
{0,-4,-4,-4,0,0,0,0,-4,-4,0,0,0,0,0,0,0,0,0,0,0,0},
{0,-5,-5,-5,0,0,0,0,-5,-5,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0},
{0,13,-8,10,0,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,0,0},
{-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,26,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,25},
{0,0,0,0,26,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,25},
{0,0,0,0,33,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,32},
{0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,37,38,39,40,41,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-21,-21,-21,-21,-21,43,44,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-25,-25,-25,-25,-25,-25,-25,46,47,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-26,-26,-26,-26,-26,-26,-26,-26,-26,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-27,-27,-27,-27,-27,-27,-27,-27,-27,0},
{0,0,0,0,0,-21,0,0,0,0,0,0,0,0,0,0,0,49,50,0,0,0},
{0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,-21,0,0,0,0,0,54,55,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,-25,0,0,0,0,0,-25,-25,57,58,0},
{0,0,0,0,0,0,0,0,0,0,0,-26,0,0,0,0,0,-26,-26,-26,-26,0},
{0,0,0,0,0,0,0,0,0,0,0,-27,0,0,0,0,0,-27,-27,-27,-27,0},
{0,0,0,0,0,-21,0,0,0,0,0,0,0,0,0,0,0,49,50,0,0,0},
{0,-6,-6,-6,0,0,0,0,-6,-6,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,66,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,65},
{0,0,0,0,-13,0,0,0,0,-13,0,0,0,0,0,0,0,0,0,0,0,-13},
{0,0,0,0,-14,0,0,0,0,-14,0,0,0,0,0,0,0,0,0,0,0,-14},
{0,0,0,0,-15,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,-15},
{0,0,0,0,-16,0,0,0,0,-16,0,0,0,0,0,0,0,0,0,0,0,-16},
{0,0,0,0,-17,0,0,0,0,-17,0,0,0,0,0,0,0,0,0,0,0,-17},
{0,0,0,0,0,0,0,0,0,0,0,0,-18,-18,-18,-18,-18,0,0,0,0,0},
{0,0,0,0,26,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,25},
{0,0,0,0,26,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,25},
{0,0,0,0,0,0,0,0,0,0,0,0,-22,-22,-22,-22,-22,-22,-22,0,0,0},
{0,0,0,0,26,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,25},
{0,0,0,0,26,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,25},
{0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,66,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,65},
{0,0,0,0,66,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,65},
{0,13,0,10,0,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,0,0},
{0,-11,-11,-11,0,0,0,0,-11,-11,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,-18,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,33,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,32},
{0,0,0,0,33,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,32},
{0,0,0,0,0,0,0,0,0,0,0,-22,0,0,0,0,0,-22,-22,0,0,0},
{0,0,0,0,33,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,32},
{0,0,0,0,33,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,32},
{0,0,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,88,0,85,0,0,0,0,86,87,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,-21,0,0,0,0,0,0,0,0,0,0,0,49,50,0,0,0},
{0,0,0,0,0,-25,0,0,0,0,0,0,0,0,0,0,0,-25,-25,91,92,0},
{0,0,0,0,0,-26,0,0,0,0,0,0,0,0,0,0,0,-26,-26,-26,-26,0},
{0,0,0,0,0,-27,0,0,0,0,0,0,0,0,0,0,0,-27,-27,-27,-27,0},
{0,0,0,0,0,-21,0,0,0,0,0,0,0,0,0,0,0,49,50,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-21,-21,-21,-21,-21,43,44,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-21,-21,-21,-21,-21,43,44,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-25,-25,-25,-25,-25,-25,-25,46,47,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-25,-25,-25,-25,-25,-25,-25,46,47,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-28,-28,-28,-28,-28,-28,-28,-28,-28,0},
{0,0,0,0,0,-21,0,0,0,0,0,0,0,0,0,0,0,49,50,0,0,0},
{0,0,0,0,0,-21,0,0,0,0,0,0,0,0,0,0,0,49,50,0,0,0},
{0,-10,-10,-10,0,0,0,0,-10,-10,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,-21,0,0,0,0,0,54,55,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,-21,0,0,0,0,0,54,55,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,-25,0,0,0,0,0,-25,-25,57,58,0},
{0,0,0,0,0,0,0,0,0,0,0,-25,0,0,0,0,0,-25,-25,57,58,0},
{0,0,0,0,0,0,0,0,0,0,0,-28,0,0,0,0,0,-28,-28,-28,-28,0},
{0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,-4,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,-5,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0},
{0,13,-8,10,0,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,-18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,-22,0,0,0,0,0,0,0,0,0,0,0,-22,-22,0,0,0},
{0,0,0,0,66,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,65},
{0,0,0,0,66,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,65},
{0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-19,-19,-19,-19,-19,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-20,-20,-20,-20,-20,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-23,-23,-23,-23,-23,-23,-23,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,-24,-24,-24,-24,-24,-24,-24,0,0,0},
{0,0,0,0,0,-19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,-20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,-19,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,-20,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,-23,0,0,0,0,0,-23,-23,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,-24,0,0,0,0,0,-24,-24,0,0,0},
{0,13,0,10,0,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,26,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,25},
{0,0,0,0,26,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,25},
{0,0,0,0,33,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,32},
{0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,-25,0,0,0,0,0,0,0,0,0,0,0,-25,-25,91,92,0},
{0,0,0,0,0,-25,0,0,0,0,0,0,0,0,0,0,0,-25,-25,91,92,0},
{0,0,0,0,0,-28,0,0,0,0,0,0,0,0,0,0,0,-28,-28,-28,-28,0},
{0,-9,-9,-9,0,0,0,0,-9,-9,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,121,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,-23,0,0,0,0,0,0,0,0,0,0,0,-23,-23,0,0,0},
{0,0,0,0,0,-24,0,0,0,0,0,0,0,0,0,0,0,-24,-24,0,0,0},
{0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,88,0,85,0,0,0,0,86,87,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,-11,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,88,0,85,0,0,0,0,86,87,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,-10,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,88,0,85,0,0,0,0,86,87,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,-9,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

    private static final int[][] gototable = {{1,0,2,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,5,9,4,6,7,8,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,5,9,15,6,7,8,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,5,9,19,6,7,8,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,20,0,21,0,22,0,23},
{0,0,0,0,0,0,0,27,0,21,0,22,0,23},
{0,0,0,0,0,0,0,0,0,28,0,29,0,30},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,36,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,42,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,45,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,48,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,53,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,56,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,59,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,61,0,62,0,63},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,67,0,23},
{0,0,0,0,0,0,0,0,0,0,0,68,0,23},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,69},
{0,0,0,0,0,0,0,0,0,0,0,0,0,70},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,72,0,63},
{0,0,0,0,0,0,0,0,0,0,0,73,0,63},
{0,74,9,0,6,7,8,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,75,0,30},
{0,0,0,0,0,0,0,0,0,0,0,76,0,30},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,77},
{0,0,0,0,0,0,0,0,0,0,0,0,0,78},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,80,84,0,81,82,83,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,89,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,90,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,93,0,0,0},
{0,0,0,0,0,0,0,0,0,0,94,0,0,0},
{0,0,0,0,0,0,0,0,0,0,95,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,96,0},
{0,0,0,0,0,0,0,0,0,0,0,0,97,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,98,0,0,0},
{0,0,0,0,0,0,0,0,0,0,99,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,100,0,0,0},
{0,0,0,0,0,0,0,0,0,0,101,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,102,0},
{0,0,0,0,0,0,0,0,0,0,0,0,103,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,5,9,108,6,7,8,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,109},
{0,0,0,0,0,0,0,0,0,0,0,0,0,110},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,112,9,0,6,7,8,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,113,0,21,0,22,0,23},
{0,0,0,0,0,0,0,114,0,21,0,22,0,23},
{0,0,0,0,0,0,0,0,0,115,0,29,0,30},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,117,0},
{0,0,0,0,0,0,0,0,0,0,0,0,118,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,123,84,0,81,82,83,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,124,84,0,81,82,83,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,126,84,0,81,82,83,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
    
    private static final Production[] production = new Production[28];
    
    private static String[] terminal = {"{","}","if","(",")",		// a:{		b:}		c:if 	d:(		e:)
			"then","else","while","ID","=",		// f:then	g:else		h:shile		i:ID	j:=
			";","<",">","<=",">=",	// k:;		l:<		m:>		n:<=	o:>=
			"==","+","-","*","/",	// p:==		q:+		r:-		s:*		t:/
			"NUM","$","E"};			// u:NUM	v:$		w:E
private static String[] nonterminal = {"program","stmt","compoundstmt","stmts","ifstmt",			// A:program	B:stmt		C:compoundstmt,		D:stmts		E:ifstmt
			   "whilestmt","assgstmt","boolexpr","boolop","arithexpr",		// F:whilestmt	G:assgstmt	H:boolexpr			I:boolop	J:arithexpr
			   "arithexprprime","multexpr","multexprprime","simpleexpr"};	// K:arithexprprime		L:multexpr		M:multexprprime		N:simpleexpr

    private static Stack<acc> acc = new Stack<>();

    private static List<Character> input = new ArrayList<>();
    
    private static Stack<Integer> result = new Stack<>();
    
    private static void createProduct() {
    	production[0] = new Production('A', "C");
    	
    	production[1] = new Production('B', "E");
    	production[2] = new Production('B', "F");
    	production[3] = new Production('B', "G");
    	production[4] = new Production('B', "C");
    	
    	production[5] = new Production('C', "aDb");
    	
    	production[6] = new Production('D', "BD");
    	production[7] = new Production('D', "w");
    	
    	production[8] = new Production('E', "cdHefBgB");
    	
    	production[9] = new Production('F', "hdHeB");
    	
    	production[10] = new Production('G', "ijJk");

    	production[11] = new Production('H', "JIJ");

    	production[12] = new Production('I', "l");
    	production[13] = new Production('I', "m");
    	production[14] = new Production('I', "n");
    	production[15] = new Production('I', "o");
    	production[16] = new Production('I', "p");

    	production[17] = new Production('J', "LK");

    	production[18] = new Production('K', "qLK");
    	production[19] = new Production('K',"rLK");
    	production[20] = new Production('K', "w");
    	
    	production[21] = new Production('L', "NM");
    	
    	production[22] = new Production('M', "sNM");
    	production[23] = new Production('M',"tNM");
    	production[24] = new Production('M',"w");
    	
    	production[25] = new Production('N', "i");
    	production[26] = new Production('N', "u");
    	production[27] = new Production('N',"dKe");
    }
    
    private static void getTerminal() {
    	String s = "";
    	for(int i = 0; i < prog.length(); i++) {
    		if(prog.charAt(i) == '\n') {
    			addTerminal(s);
    			input.add('\n');
    			s = "";
    		}
    		else if(prog.charAt(i) == ' ') {
    			addTerminal(s);
    			s = "";
    		}
    		else {
    			s += prog.charAt(i);
    		}
    	}
    }
    
    private static void addTerminal(String s) {
    	//System.out.println(s);
    	for(int i = 0; i < terminal.length; i++) {
    		if(s.equals(terminal[i])) {
    			input.add((char)((char)i+'a'));
    		}
    	}
    }
    
    private static int line = 0;
    
    private static final void function() {
    	acc.add(new acc(0, '%'));
    	input.add((char)('a'-1));
    	
    	// action
    	while(!input.isEmpty()) {
    		//System.out.println(input.get(0));
    		if(input.get(0) == '\n') {
    			input.remove(0);
    			line++;
    			continue;
    		}
    		int action = actiontable[acc.peek().num][input.get(0)-'a'+1];
    		//System.out.println(action);
    		if(action > 0) {
    			acc.push(new acc(action, input.get(0)));
    			input.remove(0);
    		}
    		else if(action < 0) {
    			if(action != -999) { 
    				action = -action;
    				Production p = production[action-1];
    				char left = p.left;
    				String right = p.right;
    				if(!right.equals("w")) {
    					for(int i = 0; i < right.length(); i++) {
        					acc.pop();
        				}
    				}
    				int gt = gototable[acc.peek().num][left-'A'];
    				acc.push(new acc(gt, left)); 
    				result.push(action-1);
    			}
    			else
    				return;
    		}
    		else {
    			System.out.println("语法错误，第" + (line) + "行，缺少\";\"");
				input.add(0, 'k');
			}
    	}
    	
    	
    }



    /**
     *  you should add some code in this method to achieve this lab
     */
    private static void analysis()
    {
        read_prog();
        getTerminal();
        createProduct();
        /*for(int i = 0; i < input.size(); i++)
        	System.out.print(input.get(i) + " ");*/
        function();
        output(); 

    }
    
    private static List<String> res = new ArrayList<>();
    
    private static boolean isTerminal(char c) {
    	return c >= 'a' && c <= 'z';
    }
    private static void output() {
    	String s = "A";
    	res.add(s);
    	while(!result.isEmpty()) {
    		int index = result.pop();
        	char left = production[index].left;
        	String right = production[index].right;
        	String store = "";
        	for(int i = s.length()-1; i >= 0; i--) {
        		char c = s.charAt(i);
        		if(!isTerminal(c) && c == left) {
        			s = s.substring(0, i) + right + store;
        			break;
        		}
        		else
        			store = c + store;
        	}
        	res.add(s);
    	}
    	for(int i = 0; i < res.size(); i++) {
    		String str = res.get(i);
    		for(int j = 0; j < str.length(); j++) {
    			char ch = str.charAt(j);
    			if(ch == 'w')
    				continue;
    			if(isTerminal(ch)) {
    				System.out.print(terminal[ch-'a'] + " ");
    			} 
    			else
    				System.out.print(nonterminal[ch-'A'] + " ");
    		}
    		if(i < res.size()-1)
    			System.out.println("=> ");
    	}
    }

    /**
     * this is the main method
     * @param args
     */
    public static void main(String[] args) {
        analysis();
    }
}

class acc {
	int num;
	char ch;
	acc(int num, char ch) {
		this.num = num;
		this.ch = ch;
	}
}

class Production {
	char left;
	String right;
	public Production(char left, String right) {
		// TODO Auto-generated constructor stub
		this.left = left;
		this.right = right;
	}
}

