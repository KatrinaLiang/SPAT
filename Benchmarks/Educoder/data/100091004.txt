package step6;
import java.util.*;
import step2.ListNode;
public class LinkedList {
	ListNode head;  // 链表的头结点
	private int length;  // 链表的长度

	// 构造函数
	public LinkedList() {
			length = 0;
	}
	
	// 返回链表的头结点
	public synchronized ListNode getHead() { 
			return head; 
	}


	// 用选择排序算法对列表进行升序排列
	public void selectionSort() {
		// 请在此添加实现代码
         // 判断链表是否为空或仅包含一个节点
    if (this.head == null || this.head.next == null)
        return;
    ListNode currentNode = this.head;
    ListNode nextNode = currentNode.getNext();
    // B部分第一个元素的位置为currentPosition
    // 显然，A部分的第一个元素位置为0
    int currentPosition = 0; 
    while (nextNode!=null) {
         int minValue = currentNode.getData();
         int position = currentPosition; 
        // 标识B部分头部节点是否是最小节点
        int flag = -1;
        //查找B部分最小节点的值，并记录其位置
        while (nextNode!=null){
            position ++;
            if (minValue>nextNode.getData()){
            minValue = nextNode.getData();
            flag = position;
        }
        nextNode = nextNode.getNext();
    }
    // 如果flag !=-1，则说明B部分头部节点不是最小节点，
    // 则继续删除和插入操作；否则不进行删除和插入
    if (flag != -1) {
        this.removeAt(flag);
        this.insertAt(currentPosition, minValue);
    }
    // B部分的头部节点位置后移一位（因为在A部分插入了一个元素）
    currentPosition++;
    currentNode = this.getAt(currentPosition);
    nextNode = currentNode.getNext();                    
    }
	}
	
	// 删除链表中指定位置的节点
	public void removeAt(int position) {
	    // 校准position
	    if (position < 0) {
	        position = 0;
	    }
	 
	    if (position >= length) {
	        position = length-1;
	    }
	 
	    // 如果列表为空，啥也不做 
	    if (head == null)
	        return;
	 
	    // 删除head节点
	    if (position == 0) {
	        head = head.getNext();
	    }
	    // 找到正确位置，然后删除节点 
	    else {
	        ListNode temp = head;
	        for (int i=1; i<position; i+=1) {
	            temp = temp.getNext();
	        }
	        temp.setNext(temp.getNext().getNext());
	    }
	    // 列表长度减1 
	    length -= 1;
	}
	
	// 在链表的指定位置插入一个节点
	public void insertAt(int position, int data) {
	    // 校准position
	    if (position < 0) {
	        position = 0;
	    }
	    if (position > length) {
	        position = length;
	    }
	 
	    // 如果列表为空，初始化head即可
	    if (head == null) {
	        head = new ListNode(data);
	    }
	    // 如果在head之前插入节点 
	    else if (position == 0) {
	        ListNode temp = new ListNode(data);
	        temp.next = head;
	        head = temp;
	    }
	    // 在其他位置插入节点 
	    else {
	        ListNode temp = head;
	        for (int i=1; i<position; i+=1) {
	            temp = temp.getNext();
	        }
	        ListNode newNode = new ListNode(data);
	        newNode.next = temp.next;
	        temp.setNext(newNode);
	    }
	    // 列表长度加1 
	    length += 1;
	}

	// 获取对应位置的节点
	public synchronized ListNode getAt(int position) {
	    if (position >= length || position < 0) {
	        return null;
	    }
	 
	    int i = 1;
	    if (head == null) 
	        return null;
	 
	    ListNode p = head.getNext();
	    while(p.getNext() != null && i < position) { 
	        i++;
	        p = p.getNext();
	    }
	    return p;
	}

	// 在链表最前面插入一个结点
	public synchronized void insertAtBegin(ListNode node) {
		node.setNext(head);
		head = node;
		length ++;
	}

	// 在链表末尾追加一个元素
	public synchronized void insertAtEnd(ListNode node) {
			if (head == null) 
					head = node;
			else {
					ListNode p, q;
					for(p = head; (q = p.getNext()) != null; p = q);
							p.setNext(node);
			}
			length ++;
	}
	
	// 以字符串序列的形式返回链表的值
	// 格式：["str1","str2",...]
	public String toString() {
		String result = "[";
		if (head == null) {
			return result+"]";
		}
		result = result + head.getData();
		ListNode temp = head.getNext();
		while (temp != null) {
			result = result + "," + temp.getData();
			temp = temp.getNext();
		}
		return result + "]";
	}
}
