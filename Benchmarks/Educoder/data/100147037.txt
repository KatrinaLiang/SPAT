package step2;

public class BestTeam {

	/********* Begin *********/

    public Long getBestTeam(int numbers, int[] abilities, int selectedNum, int distance){
 		int n = numbers;
        int[] nums =new int[abilities.length-1];
        
        for(int i=0;i<nums.length;++i){
            nums[i]=abilities[i+1];
        }

        int k = selectedNum;//距离
        int d = distance;//范围
        
    //    System.out.println("n:"+n+", k:"+k+",d:"+d);
        
        long[][] max = new long[k][n];
        long[][] min = new long[k][n];
        for(int i = 0; i < k; i++){
            for(int j = 0; j < n; j++){
                max[i][j] = 1;
                if(i == 0){
                    min[i][j] = nums[j];
                    max[i][j] = nums[j];
                }
            }
        }

        for(int i = 1; i < k; i++){
            for(int j = 0; j < n; j++){
                for(int m = 1; m <= d; m++){
                    if(j - m >= 0){
                        if(nums[j] > 0){
                            min[i][j] = Math.min(min[i][j], min[i - 1][j - m] * nums[j]);
                            max[i][j] = Math.max(max[i][j], max[i - 1][j - m] * nums[j]);
                        } else{
                            min[i][j] = Math.min(min[i][j], max[i - 1][j - m] * nums[j]);
                            max[i][j] = Math.max(max[i][j], min[i - 1][j - m] * nums[j]);
                        }
                    }
                }
    		}
		}
        
        long Max = 0;
        for(int i = 0; i < n; i++){
            Max = Math.max(Max, max[k - 1][i]);
          //  System.out.println(max[k - 1][i]+"，"+max[k - 2][i]);
        }
        return Max;
    }

	/********* End *********/
}
