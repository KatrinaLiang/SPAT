import java.util.Scanner;

public class Java_LexAnalysis
{
    private static StringBuffer prog = new StringBuffer();
    private static String lexeme=new String();
    private static int count=1;
    private static int state=0;

    private static void read_prog()
    {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNextLine())
        {
            prog.append(sc.nextLine()+'\n');
        }
        sc.close();
    }

	private static boolean isLetter(char c)
    {
    	return (c<='z'&&c>='a')||(c<='Z'&&c>='A')||c=='_';
    }
    
    private static boolean isNum(char c)
    {
    	return (c<='9'&&c>='0');
    }
    
    private static char nextChar()
    {
    	if(prog.length()<=lexeme.length())
    		return '$';
    	char c=prog.charAt(lexeme.length());
    	return c;
    }
    
    private static void pushBackChar()
    {
    	lexeme=lexeme.substring(0,lexeme.length()-1);
    }
    
    private static void getNumber()
    {
    	char ch=nextChar();
    	while(isNum(ch))
    		{lexeme+=ch;ch=nextChar();}
    	accept(80);
    }
    
    //accept&print
    private static void accept(int tips)
    {
    	Token token=new Token(tips,lexeme);
    	prog.delete(0, lexeme.length());
        if(prog.length()==1)
        	System.out.print(count+": "+token.toString());
        else 
        	System.out.println(count+": "+token.toString());
		count++;
		lexeme="";
		state=0;
    }


    //lexical analysis
    private static void analysis()
    {
        read_prog();
        char ch;
        while((ch=nextChar())!=0)
        {
        	switch(state)
        	{
        	case 0:
        		if(ch==' '||ch=='\t'||ch=='\n')
        			{prog.delete(0,1);continue;}
        		lexeme+=ch;
        		switch(ch)
        		{
        		case 'a':
        		case 'b':
        		case 'c':
        		case 'd':
        		case 'e':
        		case 'f':
        		case 'g':
        		case 'h':
        		case 'i':
        		case 'j':
        		case 'k':
        		case 'l':
        		case 'm':
        		case 'n':
        		case 'o':
        		case 'p':
        		case 'q':
        		case 'r':
        		case 's':
        		case 't':
        		case 'u':
        		case 'v':
        		case 'w':
        		case 'x':
        		case 'y':
        		case 'z':
        		case '_':
        			state=1;break;
        		case '-':
        			state=2;break;
        		case '!':
        			state=3;break;
        		case '%':
        			state=4;break;
        		case '&':
        			state=5;break;
        		case '(':
        			state=6;break;
        		case ')':
        			state=7;break;
        		case '*':
        			state=8;break;
        		case ',':
        			state=9;break;
        		case '.':
        			state=10;break;
        		case ':':
        			state=11;break;
        		case ';':
        			state=12;break;
        		case '?':
        			state=13;break;
        		case '[':
        			state=14;break;
        		case ']':
        			state=15;break;
        		case '^':
        			state=16;break;
        		case '{':
        			state=17;break;
        		case '|':
        			state=18;break;
        		case '}':
        			state=19;break;
        		case '~':
        			state=20;break;
        		case '+':
        			state=21;break;
        		case '<':
        			state=22;break;
        		case '=':
        			state=23;break;
        		case '>':
        			state=24;break;
        		case '"':
        			state=25;break;
        		case '/':
        			state=26;break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        		case '8':
        		case '9':
        			state=100;break;
        		}
        		break;
        	case 1:
        		ch=nextChar();
        		if(isLetter(ch))
        			{lexeme+=ch;
        			state=1;
        			}
        		else state=101;
        		break;
        	case 2://-
        		ch=nextChar();
        		if(ch=='-')
        			{lexeme+=ch;
       				state=28;//--
        			}
        		else if(ch=='=')
        			{lexeme+=ch;
        			state=29;//-=
        			}
        		else if(ch=='>')
        			{lexeme+=ch;
        			state=30;//->
        			}
        		else state=31;//-
        		break;	
        	case 3://!
        		ch=nextChar();
        		if(ch=='=')
        			{lexeme+=ch;
        			state=32;//!=
        			}
        		else
        			state=33;//!
        		break;
        	case 4://%
        		ch=nextChar();
        		if(ch=='=')
        			{lexeme+=ch;
        			state=34;//%=
        			}
        		else if(isLetter(ch))
        			{lexeme+=ch;
        			state=35;//%d
        			}
        		else
        			state=36;//%
        		break;
        	case 5://&
        		ch=nextChar();
        		if(ch=='&')//&&
        			{lexeme+=ch;
        			state=37;
        			}
        		else if(ch=='=')
        			{lexeme+=ch;
        			state=38;//&=
        			}
        		else
        			state=39;//&
        		break;
        	case 6:state=40;/*(*/break;
        	case 7:state=41;/*)*/break;
        	case 8://*
        		ch=nextChar();
        		if(ch=='=')
        			{lexeme+=ch;
        			state=42;//*=
        			}
        		else
        			state=43;//*
        		break;
        	case 9:state=44;/*,*/break;
        	case 10:state=45;/*.*/break;
        	case 11:state=46;/*:*/break;
        	case 12:state=47;/*;*/break;
        	case 13:state=48;/*?*/break;
        	case 14:state=49;/*[*/break;
        	case 15:state=50;/*]*/break;
        	case 16://^
        		ch=nextChar();
        		if(ch=='=')
        			{lexeme+=ch;
        			state=51;//^=
        			}
        		else
        			state=52;//^
        		break;
        	case 17:state=53;/*{*/break;
        	case 18://|
        		ch=nextChar();
        		if(ch=='|')
        			{lexeme+=ch;
        			state=54;//||
        			}
        		else if(ch=='=')
        			{lexeme+=ch;
        			state=55;//|=
        			}
        		else
        			state=56;//|
        		break;
        	case 19:state=57;/*}*/break;
        	case 20:state=58;/*~*/break;
        	case 21://+
        		ch=nextChar();
        		if(ch=='+')
        			{lexeme+=ch;
        			state=59;//++
        			}
        		else if(ch=='=')
        			{lexeme+=ch;
        			state=60;//+=
        			}
        		else
        			state=61;//+
        		break;
        	case 22://<
        		ch=nextChar();
        		if(ch=='<')
        			{lexeme+=ch;
        			state=62;//<<
        			}
        		else if(ch=='=')
        			{lexeme+=ch;
        			state=63;//<=
        			}
        		else
        			state=64;//<
        		break;
        	case 23://=
        		ch=nextChar();
        		if(ch=='=')
        			{lexeme+=ch;
        			state=65;//==
        			}
        		else state=66;//=
        		break;
        	case 24://>
        		ch=nextChar();
        		if(ch=='>')
        			{lexeme+=ch;
        			state=67;//>>
        			}
        		else if(ch=='=')
        			{lexeme+=ch;
        			state=68;//>=
        			}
        		else
        			state=69;//>
        		break;
        	case 25:state=70;/*"*/break;
        	case 26:///
        		ch=nextChar();
        		if(ch=='=')
        			{lexeme+=ch;
        			state=71;///=
        			}
        		else if(ch=='/')
        			{lexeme+=ch;
        			state=73;////
        			}
        		else if(ch=='*')
        			{lexeme+=ch;
        			state=72;///*
        			}
        		else 
        			state=74;///
        		break;
        	case 28:accept(34);break;//--
        	case 29:accept(35);break;//-=
        	case 30:accept(36);break;//->
        	case 31:accept(33);break;//-
        	case 32:accept(38);break;//！=
        	case 33:accept(37);break;//！
        	case 34:accept(40);break;//%=
        	case 35:accept(81);break;//%d
        	case 36:accept(39);break;//%
        	case 37:accept(42);break;//&&
        	case 38:accept(43);break;//&=
        	case 39:accept(41);break;//&
        	case 40:accept(44);break;//(
        	case 41:accept(45);break;//)
        	case 42:accept(47);break;//*=
        	case 43:accept(46);break;//*
        	case 44:accept(48);break;//,
        	case 45:accept(49);break;//.
        	case 46:accept(52);break;//:
        	case 47:accept(53);break;//;
        	case 48:accept(54);break;//?
        	case 49:accept(55);break;//[
        	case 50:accept(56);break;//]
        	case 51:accept(58);break;//^=
        	case 52:accept(57);break;//^
        	case 53:accept(59);break;//{
        	case 54:accept(61);break;//||
        	case 55:accept(62);break;//|=
        	case 56:accept(60);break;//|
        	case 57:accept(63);break;//}
        	case 58:accept(64);break;//~
        	case 59:accept(66);break;//++
        	case 60:accept(67);break;//+=
        	case 61:accept(65);break;//+
        	case 62://<<
        		ch=nextChar();
        		if(ch=='=')
        		{lexeme+=ch;
        		state=75;//<<=
        		}
        		else state=76;//<<
        		break;
        	case 63:accept(71);break;//<=
        	case 64:accept(68);break;//<
        	case 65:accept(73);break;//==
        	case 66:accept(72);break;//=
        	case 67://>>
        		ch=nextChar();
        		if(ch=='=')
        		{lexeme+=ch;
        		state=77;//>>=
        		}
        		else if(ch=='>')
        		{lexeme+=ch;
        		state=78;//>>>
        		}	
        		else state=79;//>>
        		break;
        	case 68:accept(75);break;//>=
        	case 69:accept(74);break;//>
        	case 70:accept(78);break;//"
        	case 71:accept(51);break;///=
        	case 72:///*
        		ch=nextChar();
        		if(ch=='*')
        		{lexeme+=ch;
        		state=82;
        		}
        		else
        		{
        			lexeme+=ch;
        		state=72;
        		}	
        		break;
        	case 73:////
        		ch=nextChar();
        		if(ch=='\n')
        			state=83;
        		else
        		{lexeme+=ch;
        		state=73;
        		}	
        		break;
        	case 74:accept(50);break;///
        	case 75:accept(70);break;//<<=
        	case 76:accept(69);break;//<<
        	case 77:accept(77);break;//>>=
        	case 78://>>>
        		ch=nextChar();
        		if(ch=='=')
        		{lexeme+=ch;
        		state=80;//>>>=
        		}
        		else state=81;//>>>
        		break;
        	case 79:accept(51);break;//>>
        	case 80:accept(83);break;//>>>=
        	case 81:accept(82);break;//>>>
        	case 82:///**
        		ch=nextChar();
        		if(ch=='/')
        		{lexeme+=ch;
        		state=83;//>>=
        		}
        		else
        		{lexeme+=ch;
        		state=72;//>>>
        		}	
        		break;
        	case 83:accept(79);break;////
        	case 100://number
        		if(isNum(ch))
        			{lexeme+=ch;
        			state=100;
        			}
        		else state=102;
        		break;
        	case 101://letterORid
        		switch(lexeme)
    			{
    			case "auto":accept(1);break;
    			case "break":accept(2);break;
    			case "case":accept(3);break;
    			case "char":accept(4);break;
    			case "const":accept(5);break;
    			case "continue":accept(6);break;
    			case "default":accept(7);break;
    			case "do":accept(8);break;
    			case "double":accept(9);break;
    			case "else":accept(10);break;
    			case "enum":accept(11);break;
    			case "extern":accept(12);break;
    			case "float":accept(13);break;
    			case "for":accept(14);break;
    			case "goto":accept(15);break;
    			case "if":accept(16);break;
    			case "int":accept(17);break;
    			case "long":accept(18);break;
    			case "register":accept(19);break;
    			case "return":accept(20);break;
    			case "short":accept(21);break;
    			case "signed":accept(22);break;
    			case "sizeof":accept(23);break;
    			case "static":accept(24);break;
    			case "struct":accept(25);break;
    			case "switch":accept(26);break;
    			case "typedef":accept(27);break;
    			case "union":accept(28);break;
    			case "unsigned":accept(29);break;
    			case "void":accept(30);break;
    			case "volatile":accept(31);break;
    			case "while":accept(32);break;
    			default:accept(81);
                }
        		break;
        	case 102:accept(80);break;
        	default:
        	}
        }
    }

    public static void main(String[] args) {
        analysis();
    }
}

class Token
{
	int tips;
	String name;
	
	public Token(int tips,String name)
	{
		this.tips=tips;
		this.name=name;
	}
	
	public String toString()
	{
		return '<'+name+','+tips+'>';
	}
}