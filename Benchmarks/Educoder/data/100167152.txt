
import java.util.HashMap;
import java.util.Scanner;

public class Java_LexAnalysis {

    private static StringBuffer prog = new StringBuffer();
    private static StringBuffer result = new StringBuffer();
    private static HashMap<Integer, String> map = new HashMap<Integer, String>();
    private static HashMap<Integer, String> temp = new HashMap<Integer, String>();
    private static int i = 0;
    private static char ch;
    private static String Token;
    private static String keys[] = {"auto", "break", "case", "char", "const", "continue", "default", "do", "double", "else", "enum", "extern", "float", "for",
            "goto", "if", "int", "long", "register", "return", "short", "signed", "sizeof", "static", "struct", "switch", "typedef", "union", "unsigned",
            "void", "volatile", "while", "-", "--", "-=", "->", "!", "!=", "%", "%=", "&", "&&", "&=", "(", ")", "*", "*=", ",", ".", "/", "/=", ":", ";",
            "?", "[", "]", "^", "^=", "{", "|", "||", "|=", "}", "~", "+", "++", "+=", "<", "<<", "<<=", "<=", "=", "==", ">", ">=", ">>", ">>=", "\"",
            "/*", "*/", "//"};
    /**
     *  this method is to read the standard input
     */
    private static void read_prog()
    {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNextLine())
        {
            prog.append(sc.nextLine());
        }
    }

    public static void init()
    {
        map.put(1, "auto");
        map.put(2, "break");
        map.put(3, "case");
        map.put(4, "char");
        map.put(5, "const");
        map.put(6, "continue");
        map.put(7, "default");
        map.put(8, "do");
        map.put(9, "double");
        map.put(10, "else");
        map.put(11, "enum");
        map.put(12, "extern");
        map.put(13, "float");
        map.put(14, "for");
        map.put(15, "goto");
        map.put(16, "if");
        map.put(17, "int");
        map.put(18, "long");
        map.put(19, "register");
        map.put(20, "return");
        map.put(21, "short");
        map.put(22, "signed");
        map.put(23, "sizeof");
        map.put(24, "static");
        map.put(25, "struct");
        map.put(26, "switch");
        map.put(27, "typedef");
        map.put(28, "union");
        map.put(29, "unsigned");
        map.put(30, "void");
        map.put(31, "volatile");
        map.put(32, "while");
        map.put(33, "-");
        map.put(34, "--");
        map.put(35, "-=");
        map.put(36, "->");
        map.put(37, "!");
        map.put(38, "!=");
        map.put(39, "%");
        map.put(40, "%=");
        map.put(41, "&");
        map.put(42, "&&");
        map.put(43, "&=");
        map.put(44, "(");
        map.put(45, ")");
        map.put(46, "*");
        map.put(47, "*=");
        map.put(48, ",");
        map.put(49, ".");
        map.put(50, "/");
        map.put(51, "/=");
        map.put(52, ":");
        map.put(53, ";");
        map.put(54, "?");
        map.put(55, "[");
        map.put(56, "]");
        map.put(57, "^");
        map.put(58, "^=");
        map.put(59, "{");
        map.put(60, "|");
        map.put(61, "||");
        map.put(62, "|=");
        map.put(63, "}");
        map.put(64, "~");
        map.put(65, "+");
        map.put(66, "++");
        map.put(67, "+=");
        map.put(68, "<");
        map.put(69, "<<");
        map.put(70, "<<=");
        map.put(71, "<=");
        map.put(72, "=");
        map.put(73, "==");
        map.put(74, ">");
        map.put(75, ">=");
        map.put(76, ">>");
        map.put(77, ">>=");
        map.put(78, "\"");
        map.put(79, "/*");
        map.put(80, "*/");
        map.put(81, "//");
    }

    public static boolean isLetter(char ch)
    {
        return Character.isLetter(ch);
    }

    public static boolean isDigit(char ch)
    {
        return Character.isDigit(ch);
    }

    public static boolean isNum(String s)
    {
        int i;
        for(i = 0; i < s.length(); i++) {
            if(s.charAt(i) < 48 || s.charAt(i) > 57)
                return false;
        }
        return true;
    }

    public static void getChar() {
        ch = prog.charAt(i);
        i++;
    }

    public static void getBlank() {
        while (Character.isWhitespace(ch))
            getChar();
    }

    public static void concat() {
        Token += ch;
    }
    /** 将搜索指示器回调一个字符位置，将ch值为空白字 */
    public static void retract() {
        i--;
        ch = ' ';
    }

    public static void output(String s, int count)
    {

    }

    // add your method here!!

    /**
     *  you should add some code in this method to achieve this lab
     */
    private static void analysis()
    {
        read_prog();
        //prog.append("int main(){char c = \"h\";/* 注释 12313test */if (c==\"h\")printf(\"%c\",c);else print(\"k\");return 0;}");
        init();
        int count = 0;
        Token = "";

        while(i < prog.length()) {
            getChar();
            getBlank();
            if (isLetter(ch)) {
                while (isLetter(ch) || isDigit(ch)) {
                    concat();
                    getChar();
                }
                count ++;
                retract();
                temp.put(count, Token);
                Token = "";
            }else if (isDigit(ch)) {
                while (isDigit(ch)) {
                    concat();
                    getChar();
                }
                count ++;
                retract();
                temp.put(count, Token);
                Token = "";
            }else if (ch == '(' || ch == ')' || ch == '[' || ch == ']' || ch == '{' || ch == '}' || ch == ',' ||
                    ch == '.' || ch == ':' || ch == ';' || ch == '"') {
                concat();
                count ++;
                temp.put(count, Token);
                Token = "";
            }else if(ch == '/'){
                concat();
                getChar();
                if(ch == '=') {
                    concat();
                    count ++;
                    temp.put(count, Token);
                    Token = "";
                }
                if(ch == '*') {//为/*注释
                    while(true){
                        concat();
                        getChar();
                        if(ch == '*'){// 为多行注释结束
                            concat();
                            getChar();
                            if(ch == '/') {
                                concat();
                                count ++;
                                temp.put(count, Token);
                                Token = "";
                                break;
                            }
                        }
                    }
                    continue;
                }
                if(ch == '/'){//为//单行注释
                    while(ch != 'f'){
                        concat();
                        getChar();
                        if(i>=prog.length())break;
                    }
                    count ++;
                    Token = Token.substring(0, Token.length()-1);
                    temp.put(count, Token);
                    Token = "";
                    retract();
                }

            } else if (ch == '+' || ch == '-' || ch == '~' || ch == '!' || ch == '=' || ch == '^' ||
                    ch == '>' || ch == '<' || ch == '?' || ch == '%' || ch == '&' || ch == '|' || ch == '*') {
                while(ch == '+' || ch == '-' || ch == '~' || ch == '!' || ch == '=' || ch == '^' ||
                        ch == '>' || ch == '<' || ch == '?' || ch == '%' || ch == '&' || ch == '|' || ch == '*' || ch == 'd' || ch == 'c') {
                    concat();
                    getChar();
                }
                retract();
                count ++;
                temp.put(count, Token);
                Token = "";
            }else {
            }
        }

        for(int j = 1; j <= count; j ++) {
            if(j != 1) {
                System.out.printf("\n");
            }
            if(map.containsValue(temp.get(j))) {
                if(temp.get(j).equals("/*") || temp.get(j).equals("*/") || temp.get(j).equals("//")) {
                    System.out.printf("%d: <%s,79>",j,temp.get(j));
                }
                else {
                    int k;
                    for(k = 0; k < keys.length; k++) {
                        if(keys[k].equals(temp.get(j))) {
                            break;
                        }
                    }
                    System.out.printf("%d: <%s,%d>",j,temp.get(j),k+1);
                }
            }else {
                if(isNum(temp.get(j))) {
                    System.out.printf("%d: <%s,80>",j,temp.get(j));
                }
                else {
                    if(temp.get(j).charAt(0) == '/') {
                        System.out.printf("%d: <%s,79>",j,temp.get(j));
                    }
                    else {
                        System.out.printf("%d: <%s,81>",j,temp.get(j));
                    }
                }
            }
        }
    }

    /**
     * this is the main method
     * @param args
     */
    public static void main(String[] args)
    {
        analysis();
    }
}
