package case1;

import java.util.Scanner;

public class Task1 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String dogName = sc.next();
		String dogSex = sc.next();
		String dogColor = sc.next();
		String catName = sc.next();
		String catSex = sc.next();
		double catWeight = sc.nextDouble();
		// 通过有参构造函数实例化Dog类对象dog
		// dog调用talk()方法
		// dog调用eat()方法
		/********* begin *********/
		Dog dog =new Dog(dogName,dogSex,dogColor);
        dog.talk();
        dog.eat();
		/********* end *********/
		// 通过有参构造函数实例化Cat类对象cat
		// cat调用talk()方法
		// cat调用eat()方法
		/********* begin *********/
		Cat cat = new Cat(catName,catSex,catWeight);
        cat.talk();
        cat.eat();
		/********* end *********/
	}
}


abstract class Pet {
	/********* begin *********/
      //封装属性 name 和 sex
      private String name;
      private String sex;
      
      public String getName(){
          return name;
      }
      public void setName(String name){
          this.name=name;
      }
      public String getSex(){
          return sex;
      }
      public void setSex(String sex){
            this.sex =sex;
      }
      
      //声明一个带有一个带有两个参数的构造函数
      public Pet(String name, String sex){
           this.name=name;
           this.sex=sex;
      }
      //声明抽象方法void talk（）和 void eat（）
      abstract void talk();
      abstract void eat();
	/********* end *********/
}


class Dog extends Pet {
	/********* begin *********/
// Dog类继承自Pet类 封装属性color
    private String color ;

    //color的属性是私有的 子类或者其他类调用该方法需要用到 set和get方法
    public String getColor(){
        return color;
    }
    public void setColor(String color){
        this.color =color;
    }
// 构造函数初始化name、sex和color
    public Dog(String name,String sex,String color){
         super(name,sex);
         this.color=color;
    }
// 实现自己的talk()方法和eat()方法
// talk()输出'名称：name，性别：sex，颜色：color，汪汪叫'
  public void talk(){
      System.out.println("名称："+this.getName()+"，性别："+this.getSex()+"，颜色："+this.getColor()+"，汪汪叫");
  }

// eat()输出'name吃骨头'  
 public void eat(){
     System.out.println(this.getName()+"吃骨头！");
 }
	/********* end *********/
}

// Cat类继承自Pet类 封装属性weight
// 构造函数初始化name、sex和weight
// 实现自己的talk()方法和eat()方法
// talk()输出'名称：name，性别：sex，体重：weight kg，喵喵叫'
// eat()输出'name吃鱼'
class Cat extends Pet {
	/********* begin *********/
     private double weight;
     public double getWeight(){
         return weight;
     }
     public void setWeight(double weight){
          this.weight=weight;
     }
     public Cat(String name,String sex,double weight){
       super(name,sex);
       this.weight=weight;
     }
//  super只是指定要调用的对象是父类，至于能不能调用还是看父类方法的修饰符。私有方法（private）只能当前类才能调用，子类无法访问。
 public void talk(){
      System.out.println("名称："+this.getName()+"，性别："+this.getSex()+"，体重："+this.getWeight()+"kg，喵喵叫");
  }	
  public void eat(){
     System.out.println(this.getName()+"吃鱼！");
 }
  /********* end *********/
}