package step3;

/**
 * Created by zengpeng on 2017/12/25.
 */
public class MyLinkedList {

    private Node first;//头结点，不存数据
    private Node last;//指向链表的最后一个节点
    private int size;

    public MyLinkedList() {
        size = 0;
        first = new Node(0, null);
        last = null;
    }

    /**
     * 添加到链表尾部
     *
     * @param item
     */
    public void add(int item) {
        /********** Begin *********/
        if(first.next==null)
		{
			Node n=new Node(item,null);
			first.next=n;
			last=n;
			size++;
			return;
		}
		Node n=new Node(item,null);
		if(last==null)
		{
			Node p=first.next;
			while(p.next!=null)
			   p=p.next;
			p.next=n;
			
		}else
		    last.next=n;
		last=n;
         size++;

        /********** End *********/
    }

    /**
     * 添加数据item到指定位置index
     * index从0开始
     * @param index
     * @param item
     */
    public void add(int index, int item) {
        checkPosIndex(index);

        /********** Begin *********/
		Node nnode=new Node(item,null);
		if(index==0)
		{
			nnode.next=first.next;
			first.next=nnode;
			size++;
			return;
		}
         Node p=first.next,q=null;
		 int j=0;
		 while(p!=null && j<index)
         {
			 q=p;p=p.next;j++;
		 }
		 if(j==index)
		 {
			 q.next=nnode;
			 nnode.next=p;
			 if(last==q)
			    last=nnode;
			 size++;
		 }

        /********** End *********/
    }

    /**
     * 删除指定位置index处的元素并返回, index从0开始
     * @param index
     * @return
     */
    public int remove(int index) {
        checkPosIndex(index);

        /********** Begin *********/
          int old=0;
		  Node p=first.next;
		  if(index==0)
		  {
			  old=p.item;
			  first.next=p.next;
			  size--;
			  return old;
		  }
		  Node q=null;
		  int j=1;
		  while(p.next!=null&&j<=index)
		  {
			  q=p;
			  p=p.next;
			   j++;
			  
		  }
		  q.next=p.next;
		  if(last==p)
		      last=q;
		  old=p.item;
		  p=null; 

          size--;
		  return old;
        /********** End *********/
    }

    public int size() {
        return size;
    }

    private void checkPosIndex(int index) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
    }

    //结点内部类
    private static class Node {
        int item;
        Node next;

        Node(int item, Node next) {
            this.item = item;
            this.next = next;
        }
    }
}
