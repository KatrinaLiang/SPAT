//import org.apache.poi.ss.usermodel.*;
//import org.apache.poi.xssf.usermodel.XSSFWorkbook;
//import java.io.FileInputStream;
import java.util.*;
//import static org.apache.poi.ss.usermodel.CellType.NUMERIC;

public class Java_LRParserAnalysis {

    private static String[] reservedWord = new String[]{"$","if","while","{","}","(",")","ID","NUM","+","-","*","/",";","then","else","=","==","<",">","<=",">=","==","E"};
    private static Stack<String> stack = new Stack<>();
    private static StringBuffer prog = new StringBuffer();
    private static String output = new String();
    private static int index = 0;
    private static HashMap<String,String> lrTable = new HashMap<>();
    private static Stack<String> product = new Stack<>();

    private static void read_prog()
    {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNextLine())
        {
            prog.append(sc.nextLine());
        }
        prog.append("$");
    }

    private static void init() {
        stack.push("0");
        lrTable.put("0 {","3");
        lrTable.put("0 }","");
        lrTable.put("0 if","");
        lrTable.put("0 while","");
        lrTable.put("0 ID","");
        lrTable.put("0 NUM","");
        lrTable.put("0 (","");
        lrTable.put("0 )","");
        lrTable.put("0 ;","");
        lrTable.put("0 then","");
        lrTable.put("0 =","");
        lrTable.put("0 <","");
        lrTable.put("0 >","");
        lrTable.put("0 <=","");
        lrTable.put("0 >=","");
        lrTable.put("0 ==","");
        lrTable.put("0 +","");
        lrTable.put("0 -","");
        lrTable.put("0 *","");
        lrTable.put("0 /","");
        lrTable.put("0 else","");
        lrTable.put("0 $","");
        lrTable.put("0 program","1");
        lrTable.put("0 compoundstmt","2");
        lrTable.put("0 stmts","");
        lrTable.put("0 stmt","");
        lrTable.put("0 ifstmt ","");
        lrTable.put("0 whilestmt","");
        lrTable.put("0 assgstmt","");
        lrTable.put("0 boolexpr","");
        lrTable.put("0 arithexpr","");
        lrTable.put("0 multexpr","");
        lrTable.put("0 simpleexpr","");
        lrTable.put("0 arithexprprime","");
        lrTable.put("0 multexprprime","");
        lrTable.put("0 boolop","");
        lrTable.put("1 {","");
        lrTable.put("1 }","");
        lrTable.put("1 if","");
        lrTable.put("1 while","");
        lrTable.put("1 ID","");
        lrTable.put("1 NUM","");
        lrTable.put("1 (","");
        lrTable.put("1 )","");
        lrTable.put("1 ;","");
        lrTable.put("1 then","");
        lrTable.put("1 =","");
        lrTable.put("1 <","");
        lrTable.put("1 >","");
        lrTable.put("1 <=","");
        lrTable.put("1 >=","");
        lrTable.put("1 ==","");
        lrTable.put("1 +","");
        lrTable.put("1 -","");
        lrTable.put("1 *","");
        lrTable.put("1 /","");
        lrTable.put("1 else","");
        lrTable.put("1 $","acc");
        lrTable.put("1 program","");
        lrTable.put("1 compoundstmt","");
        lrTable.put("1 stmts","");
        lrTable.put("1 stmt","");
        lrTable.put("1 ifstmt ","");
        lrTable.put("1 whilestmt","");
        lrTable.put("1 assgstmt","");
        lrTable.put("1 boolexpr","");
        lrTable.put("1 arithexpr","");
        lrTable.put("1 multexpr","");
        lrTable.put("1 simpleexpr","");
        lrTable.put("1 arithexprprime","");
        lrTable.put("1 multexprprime","");
        lrTable.put("1 boolop","");
        lrTable.put("2 {","");
        lrTable.put("2 }","");
        lrTable.put("2 if","");
        lrTable.put("2 while","");
        lrTable.put("2 ID","");
        lrTable.put("2 NUM","");
        lrTable.put("2 (","");
        lrTable.put("2 )","");
        lrTable.put("2 ;","");
        lrTable.put("2 then","");
        lrTable.put("2 =","");
        lrTable.put("2 <","");
        lrTable.put("2 >","");
        lrTable.put("2 <=","");
        lrTable.put("2 >=","");
        lrTable.put("2 ==","");
        lrTable.put("2 +","");
        lrTable.put("2 -","");
        lrTable.put("2 *","");
        lrTable.put("2 /","");
        lrTable.put("2 else","");
        lrTable.put("2 $","program->compoundstmt");
        lrTable.put("2 program","");
        lrTable.put("2 compoundstmt","");
        lrTable.put("2 stmts","");
        lrTable.put("2 stmt","");
        lrTable.put("2 ifstmt ","");
        lrTable.put("2 whilestmt","");
        lrTable.put("2 assgstmt","");
        lrTable.put("2 boolexpr","");
        lrTable.put("2 arithexpr","");
        lrTable.put("2 multexpr","");
        lrTable.put("2 simpleexpr","");
        lrTable.put("2 arithexprprime","");
        lrTable.put("2 multexprprime","");
        lrTable.put("2 boolop","");
        lrTable.put("3 {","3");
        lrTable.put("3 }","stmts->E");
        lrTable.put("3 if","7");
        lrTable.put("3 while","9");
        lrTable.put("3 ID","11");
        lrTable.put("3 NUM","");
        lrTable.put("3 (","");
        lrTable.put("3 )","");
        lrTable.put("3 ;","");
        lrTable.put("3 then","");
        lrTable.put("3 =","");
        lrTable.put("3 <","");
        lrTable.put("3 >","");
        lrTable.put("3 <=","");
        lrTable.put("3 >=","");
        lrTable.put("3 ==","");
        lrTable.put("3 +","");
        lrTable.put("3 -","");
        lrTable.put("3 *","");
        lrTable.put("3 /","");
        lrTable.put("3 else","");
        lrTable.put("3 $","");
        lrTable.put("3 program","");
        lrTable.put("3 compoundstmt","12");
        lrTable.put("3 stmts","4");
        lrTable.put("3 stmt","5");
        lrTable.put("3 ifstmt","6");
        lrTable.put("3 whilestmt","8");
        lrTable.put("3 assgstmt","10");
        lrTable.put("3 boolexpr","");
        lrTable.put("3 arithexpr","");
        lrTable.put("3 multexpr","");
        lrTable.put("3 simpleexpr","");
        lrTable.put("3 arithexprprime","");
        lrTable.put("3 multexprprime","");
        lrTable.put("3 boolop","");
        lrTable.put("4 {","");
        lrTable.put("4 }","13");
        lrTable.put("4 if","");
        lrTable.put("4 while","");
        lrTable.put("4 ID","");
        lrTable.put("4 NUM","");
        lrTable.put("4 (","");
        lrTable.put("4 )","");
        lrTable.put("4 ;","");
        lrTable.put("4 then","");
        lrTable.put("4 =","");
        lrTable.put("4 <","");
        lrTable.put("4 >","");
        lrTable.put("4 <=","");
        lrTable.put("4 >=","");
        lrTable.put("4 ==","");
        lrTable.put("4 +","");
        lrTable.put("4 -","");
        lrTable.put("4 *","");
        lrTable.put("4 /","");
        lrTable.put("4 else","");
        lrTable.put("4 $","");
        lrTable.put("4 program","");
        lrTable.put("4 compoundstmt","");
        lrTable.put("4 stmts","");
        lrTable.put("4 stmt","");
        lrTable.put("4 ifstmt ","");
        lrTable.put("4 whilestmt","");
        lrTable.put("4 assgstmt","");
        lrTable.put("4 boolexpr","");
        lrTable.put("4 arithexpr","");
        lrTable.put("4 multexpr","");
        lrTable.put("4 simpleexpr","");
        lrTable.put("4 arithexprprime","");
        lrTable.put("4 multexprprime","");
        lrTable.put("4 boolop","");
        lrTable.put("5 {","3");
        lrTable.put("5 }","stmts->E");
        lrTable.put("5 if","7");
        lrTable.put("5 while","9");
        lrTable.put("5 ID","11");
        lrTable.put("5 NUM","");
        lrTable.put("5 (","");
        lrTable.put("5 )","");
        lrTable.put("5 ;","");
        lrTable.put("5 then","");
        lrTable.put("5 =","");
        lrTable.put("5 <","");
        lrTable.put("5 >","");
        lrTable.put("5 <=","");
        lrTable.put("5 >=","");
        lrTable.put("5 ==","");
        lrTable.put("5 +","");
        lrTable.put("5 -","");
        lrTable.put("5 *","");
        lrTable.put("5 /","");
        lrTable.put("5 else","");
        lrTable.put("5 $","");
        lrTable.put("5 program","");
        lrTable.put("5 compoundstmt","12");
        lrTable.put("5 stmts","14");
        lrTable.put("5 stmt","5");
        lrTable.put("5 ifstmt ","6");
        lrTable.put("5 whilestmt","8");
        lrTable.put("5 assgstmt","10");
        lrTable.put("5 boolexpr","");
        lrTable.put("5 arithexpr","");
        lrTable.put("5 multexpr","");
        lrTable.put("5 simpleexpr","");
        lrTable.put("5 arithexprprime","");
        lrTable.put("5 multexprprime","");
        lrTable.put("5 boolop","");
        lrTable.put("6 {","stmt->ifstmt");
        lrTable.put("6 }","stmt->ifstmt");
        lrTable.put("6 if","stmt->ifstmt");
        lrTable.put("6 while","stmt->ifstmt");
        lrTable.put("6 ID","stmt->ifstmt");
        lrTable.put("6 NUM","");
        lrTable.put("6 (","");
        lrTable.put("6 )","");
        lrTable.put("6 ;","");
        lrTable.put("6 then","");
        lrTable.put("6 =","");
        lrTable.put("6 <","");
        lrTable.put("6 >","");
        lrTable.put("6 <=","");
        lrTable.put("6 >=","");
        lrTable.put("6 ==","");
        lrTable.put("6 +","");
        lrTable.put("6 -","");
        lrTable.put("6 *","");
        lrTable.put("6 /","");
        lrTable.put("6 else","stmt->ifstmt");
        lrTable.put("6 $","");
        lrTable.put("6 program","");
        lrTable.put("6 compoundstmt","");
        lrTable.put("6 stmts","");
        lrTable.put("6 stmt","");
        lrTable.put("6 ifstmt ","");
        lrTable.put("6 whilestmt","");
        lrTable.put("6 assgstmt","");
        lrTable.put("6 boolexpr","");
        lrTable.put("6 arithexpr","");
        lrTable.put("6 multexpr","");
        lrTable.put("6 simpleexpr","");
        lrTable.put("6 arithexprprime","");
        lrTable.put("6 multexprprime","");
        lrTable.put("6 boolop","");
        lrTable.put("7 {","");
        lrTable.put("7 }","");
        lrTable.put("7 if","");
        lrTable.put("7 while","");
        lrTable.put("7 ID","");
        lrTable.put("7 NUM","");
        lrTable.put("7 (","15");
        lrTable.put("7 )","");
        lrTable.put("7 ;","");
        lrTable.put("7 then","");
        lrTable.put("7 =","");
        lrTable.put("7 <","");
        lrTable.put("7 >","");
        lrTable.put("7 <=","");
        lrTable.put("7 >=","");
        lrTable.put("7 ==","");
        lrTable.put("7 +","");
        lrTable.put("7 -","");
        lrTable.put("7 *","");
        lrTable.put("7 /","");
        lrTable.put("7 else","");
        lrTable.put("7 $","");
        lrTable.put("7 program","");
        lrTable.put("7 compoundstmt","");
        lrTable.put("7 stmts","");
        lrTable.put("7 stmt","");
        lrTable.put("7 ifstmt ","");
        lrTable.put("7 whilestmt","");
        lrTable.put("7 assgstmt","");
        lrTable.put("7 boolexpr","");
        lrTable.put("7 arithexpr","");
        lrTable.put("7 multexpr","");
        lrTable.put("7 simpleexpr","");
        lrTable.put("7 arithexprprime","");
        lrTable.put("7 multexprprime","");
        lrTable.put("7 boolop","");
        lrTable.put("8 {","stmt->whilestmt");
        lrTable.put("8 }","stmt->whilestmt");
        lrTable.put("8 if","stmt->whilestmt");
        lrTable.put("8 while","stmt->whilestmt");
        lrTable.put("8 ID","stmt->whilestmt");
        lrTable.put("8 NUM","");
        lrTable.put("8 (","");
        lrTable.put("8 )","");
        lrTable.put("8 ;","");
        lrTable.put("8 then","");
        lrTable.put("8 =","");
        lrTable.put("8 <","");
        lrTable.put("8 >","");
        lrTable.put("8 <=","");
        lrTable.put("8 >=","");
        lrTable.put("8 ==","");
        lrTable.put("8 +","");
        lrTable.put("8 -","");
        lrTable.put("8 *","");
        lrTable.put("8 /","");
        lrTable.put("8 else","stmt->whilestmt");
        lrTable.put("8 $","");
        lrTable.put("8 program","");
        lrTable.put("8 compoundstmt","");
        lrTable.put("8 stmts","");
        lrTable.put("8 stmt","");
        lrTable.put("8 ifstmt ","");
        lrTable.put("8 whilestmt","");
        lrTable.put("8 assgstmt","");
        lrTable.put("8 boolexpr","");
        lrTable.put("8 arithexpr","");
        lrTable.put("8 multexpr","");
        lrTable.put("8 simpleexpr","");
        lrTable.put("8 arithexprprime","");
        lrTable.put("8 multexprprime","");
        lrTable.put("8 boolop","");
        lrTable.put("9 {","");
        lrTable.put("9 }","");
        lrTable.put("9 if","");
        lrTable.put("9 while","");
        lrTable.put("9 ID","");
        lrTable.put("9 NUM","");
        lrTable.put("9 (","16");
        lrTable.put("9 )","");
        lrTable.put("9 ;","");
        lrTable.put("9 then","");
        lrTable.put("9 =","");
        lrTable.put("9 <","");
        lrTable.put("9 >","");
        lrTable.put("9 <=","");
        lrTable.put("9 >=","");
        lrTable.put("9 ==","");
        lrTable.put("9 +","");
        lrTable.put("9 -","");
        lrTable.put("9 *","");
        lrTable.put("9 /","");
        lrTable.put("9 else","");
        lrTable.put("9 $","");
        lrTable.put("9 program","");
        lrTable.put("9 compoundstmt","");
        lrTable.put("9 stmts","");
        lrTable.put("9 stmt","");
        lrTable.put("9 ifstmt ","");
        lrTable.put("9 whilestmt","");
        lrTable.put("9 assgstmt","");
        lrTable.put("9 boolexpr","");
        lrTable.put("9 arithexpr","");
        lrTable.put("9 multexpr","");
        lrTable.put("9 simpleexpr","");
        lrTable.put("9 arithexprprime","");
        lrTable.put("9 multexprprime","");
        lrTable.put("9 boolop","");
        lrTable.put("10 {","stmt->assgstmt");
        lrTable.put("10 }","stmt->assgstmt");
        lrTable.put("10 if","stmt->assgstmt");
        lrTable.put("10 while","stmt->assgstmt");
        lrTable.put("10 ID","stmt->assgstmt");
        lrTable.put("10 NUM","");
        lrTable.put("10 (","");
        lrTable.put("10 )","");
        lrTable.put("10 ;","");
        lrTable.put("10 then","");
        lrTable.put("10 =","");
        lrTable.put("10 <","");
        lrTable.put("10 >","");
        lrTable.put("10 <=","");
        lrTable.put("10 >=","");
        lrTable.put("10 ==","");
        lrTable.put("10 +","");
        lrTable.put("10 -","");
        lrTable.put("10 *","");
        lrTable.put("10 /","");
        lrTable.put("10 else","stmt->assgstmt");
        lrTable.put("10 $","");
        lrTable.put("10 program","");
        lrTable.put("10 compoundstmt","");
        lrTable.put("10 stmts","");
        lrTable.put("10 stmt","");
        lrTable.put("10 ifstmt ","");
        lrTable.put("10 whilestmt","");
        lrTable.put("10 assgstmt","");
        lrTable.put("10 boolexpr","");
        lrTable.put("10 arithexpr","");
        lrTable.put("10 multexpr","");
        lrTable.put("10 simpleexpr","");
        lrTable.put("10 arithexprprime","");
        lrTable.put("10 multexprprime","");
        lrTable.put("10 boolop","");
        lrTable.put("11 {","");
        lrTable.put("11 }","");
        lrTable.put("11 if","");
        lrTable.put("11 while","");
        lrTable.put("11 ID","");
        lrTable.put("11 NUM","");
        lrTable.put("11 (","");
        lrTable.put("11 )","");
        lrTable.put("11 ;","");
        lrTable.put("11 then","");
        lrTable.put("11 =","17");
        lrTable.put("11 <","");
        lrTable.put("11 >","");
        lrTable.put("11 <=","");
        lrTable.put("11 >=","");
        lrTable.put("11 ==","");
        lrTable.put("11 +","");
        lrTable.put("11 -","");
        lrTable.put("11 *","");
        lrTable.put("11 /","");
        lrTable.put("11 else","");
        lrTable.put("11 $","");
        lrTable.put("11 program","");
        lrTable.put("11 compoundstmt","");
        lrTable.put("11 stmts","");
        lrTable.put("11 stmt","");
        lrTable.put("11 ifstmt ","");
        lrTable.put("11 whilestmt","");
        lrTable.put("11 assgstmt","");
        lrTable.put("11 boolexpr","");
        lrTable.put("11 arithexpr","");
        lrTable.put("11 multexpr","");
        lrTable.put("11 simpleexpr","");
        lrTable.put("11 arithexprprime","");
        lrTable.put("11 multexprprime","");
        lrTable.put("11 boolop","");
        lrTable.put("12 {","stmt->compoundstmt");
        lrTable.put("12 }","stmt->compoundstmt");
        lrTable.put("12 if","stmt->compoundstmt");
        lrTable.put("12 while","stmt->compoundstmt");
        lrTable.put("12 ID","stmt->compoundstmt");
        lrTable.put("12 NUM","");
        lrTable.put("12 (","");
        lrTable.put("12 )","");
        lrTable.put("12 ;","");
        lrTable.put("12 then","");
        lrTable.put("12 =","");
        lrTable.put("12 <","");
        lrTable.put("12 >","");
        lrTable.put("12 <=","");
        lrTable.put("12 >=","");
        lrTable.put("12 ==","");
        lrTable.put("12 +","");
        lrTable.put("12 -","");
        lrTable.put("12 *","");
        lrTable.put("12 /","");
        lrTable.put("12 else","stmt->compoundstmt");
        lrTable.put("12 $","");
        lrTable.put("12 program","");
        lrTable.put("12 compoundstmt","");
        lrTable.put("12 stmts","");
        lrTable.put("12 stmt","");
        lrTable.put("12 ifstmt ","");
        lrTable.put("12 whilestmt","");
        lrTable.put("12 assgstmt","");
        lrTable.put("12 boolexpr","");
        lrTable.put("12 arithexpr","");
        lrTable.put("12 multexpr","");
        lrTable.put("12 simpleexpr","");
        lrTable.put("12 arithexprprime","");
        lrTable.put("12 multexprprime","");
        lrTable.put("12 boolop","");
        lrTable.put("13 {","compoundstmt->{ stmts }");
        lrTable.put("13 }","compoundstmt->{ stmts }");
        lrTable.put("13 if","compoundstmt->{ stmts }");
        lrTable.put("13 while","compoundstmt->{ stmts }");
        lrTable.put("13 ID","compoundstmt->{ stmts }");
        lrTable.put("13 NUM","");
        lrTable.put("13 (","");
        lrTable.put("13 )","");
        lrTable.put("13 ;","");
        lrTable.put("13 then","");
        lrTable.put("13 =","");
        lrTable.put("13 <","");
        lrTable.put("13 >","");
        lrTable.put("13 <=","");
        lrTable.put("13 >=","");
        lrTable.put("13 ==","");
        lrTable.put("13 +","");
        lrTable.put("13 -","");
        lrTable.put("13 *","");
        lrTable.put("13 /","");
        lrTable.put("13 else","compoundstmt->{ stmts }");
        lrTable.put("13 $","compoundstmt->{ stmts }");
        lrTable.put("13 program","");
        lrTable.put("13 compoundstmt","");
        lrTable.put("13 stmts","");
        lrTable.put("13 stmt","");
        lrTable.put("13 ifstmt ","");
        lrTable.put("13 whilestmt","");
        lrTable.put("13 assgstmt","");
        lrTable.put("13 boolexpr","");
        lrTable.put("13 arithexpr","");
        lrTable.put("13 multexpr","");
        lrTable.put("13 simpleexpr","");
        lrTable.put("13 arithexprprime","");
        lrTable.put("13 multexprprime","");
        lrTable.put("13 boolop","");
        lrTable.put("14 {","");
        lrTable.put("14 }","stmts->stmt stmts");
        lrTable.put("14 if","");
        lrTable.put("14 while","");
        lrTable.put("14 ID","");
        lrTable.put("14 NUM","");
        lrTable.put("14 (","");
        lrTable.put("14 )","");
        lrTable.put("14 ;","");
        lrTable.put("14 then","");
        lrTable.put("14 =","");
        lrTable.put("14 <","");
        lrTable.put("14 >","");
        lrTable.put("14 <=","");
        lrTable.put("14 >=","");
        lrTable.put("14 ==","");
        lrTable.put("14 +","");
        lrTable.put("14 -","");
        lrTable.put("14 *","");
        lrTable.put("14 /","");
        lrTable.put("14 else","");
        lrTable.put("14 $","");
        lrTable.put("14 program","");
        lrTable.put("14 compoundstmt","");
        lrTable.put("14 stmts","");
        lrTable.put("14 stmt","");
        lrTable.put("14 ifstmt ","");
        lrTable.put("14 whilestmt","");
        lrTable.put("14 assgstmt","");
        lrTable.put("14 boolexpr","");
        lrTable.put("14 arithexpr","");
        lrTable.put("14 multexpr","");
        lrTable.put("14 simpleexpr","");
        lrTable.put("14 arithexprprime","");
        lrTable.put("14 multexprprime","");
        lrTable.put("14 boolop","");
        lrTable.put("15 {","");
        lrTable.put("15 }","");
        lrTable.put("15 if","");
        lrTable.put("15 while","");
        lrTable.put("15 ID","22");
        lrTable.put("15 NUM","23");
        lrTable.put("15 (","24");
        lrTable.put("15 )","");
        lrTable.put("15 ;","");
        lrTable.put("15 then","");
        lrTable.put("15 =","");
        lrTable.put("15 <","");
        lrTable.put("15 >","");
        lrTable.put("15 <=","");
        lrTable.put("15 >=","");
        lrTable.put("15 ==","");
        lrTable.put("15 +","");
        lrTable.put("15 -","");
        lrTable.put("15 *","");
        lrTable.put("15 /","");
        lrTable.put("15 else","");
        lrTable.put("15 $","");
        lrTable.put("15 program","");
        lrTable.put("15 compoundstmt","");
        lrTable.put("15 stmts","");
        lrTable.put("15 stmt","");
        lrTable.put("15 ifstmt ","");
        lrTable.put("15 whilestmt","");
        lrTable.put("15 assgstmt","");
        lrTable.put("15 boolexpr","18");
        lrTable.put("15 arithexpr","19");
        lrTable.put("15 multexpr","20");
        lrTable.put("15 simpleexpr","21");
        lrTable.put("15 arithexprprime","");
        lrTable.put("15 multexprprime","");
        lrTable.put("15 boolop","");
        lrTable.put("16 {","");
        lrTable.put("16 }","");
        lrTable.put("16 if","");
        lrTable.put("16 while","");
        lrTable.put("16 ID","22");
        lrTable.put("16 NUM","23");
        lrTable.put("16 (","24");
        lrTable.put("16 )","");
        lrTable.put("16 ;","");
        lrTable.put("16 then","");
        lrTable.put("16 =","");
        lrTable.put("16 <","");
        lrTable.put("16 >","");
        lrTable.put("16 <=","");
        lrTable.put("16 >=","");
        lrTable.put("16 ==","");
        lrTable.put("16 +","");
        lrTable.put("16 -","");
        lrTable.put("16 *","");
        lrTable.put("16 /","");
        lrTable.put("16 else","");
        lrTable.put("16 $","");
        lrTable.put("16 program","");
        lrTable.put("16 compoundstmt","");
        lrTable.put("16 stmts","");
        lrTable.put("16 stmt","");
        lrTable.put("16 ifstmt ","");
        lrTable.put("16 whilestmt","");
        lrTable.put("16 assgstmt","");
        lrTable.put("16 boolexpr","25");
        lrTable.put("16 arithexpr","19");
        lrTable.put("16 multexpr","20");
        lrTable.put("16 simpleexpr","21");
        lrTable.put("16 arithexprprime","");
        lrTable.put("16 multexprprime","");
        lrTable.put("16 boolop","");
        lrTable.put("17 {","");
        lrTable.put("17 }","");
        lrTable.put("17 if","");
        lrTable.put("17 while","");
        lrTable.put("17 ID","22");
        lrTable.put("17 NUM","23");
        lrTable.put("17 (","24");
        lrTable.put("17 )","");
        lrTable.put("17 ;","");
        lrTable.put("17 then","");
        lrTable.put("17 =","");
        lrTable.put("17 <","");
        lrTable.put("17 >","");
        lrTable.put("17 <=","");
        lrTable.put("17 >=","");
        lrTable.put("17 ==","");
        lrTable.put("17 +","");
        lrTable.put("17 -","");
        lrTable.put("17 *","");
        lrTable.put("17 /","");
        lrTable.put("17 else","");
        lrTable.put("17 $","");
        lrTable.put("17 program","");
        lrTable.put("17 compoundstmt","");
        lrTable.put("17 stmts","");
        lrTable.put("17 stmt","");
        lrTable.put("17 ifstmt ","");
        lrTable.put("17 whilestmt","");
        lrTable.put("17 assgstmt","");
        lrTable.put("17 boolexpr","");
        lrTable.put("17 arithexpr","26");
        lrTable.put("17 multexpr","20");
        lrTable.put("17 simpleexpr","21");
        lrTable.put("17 arithexprprime","");
        lrTable.put("17 multexprprime","");
        lrTable.put("17 boolop","");
        lrTable.put("18 {","");
        lrTable.put("18 }","");
        lrTable.put("18 if","");
        lrTable.put("18 while","");
        lrTable.put("18 ID","");
        lrTable.put("18 NUM","");
        lrTable.put("18 (","");
        lrTable.put("18 )","27");
        lrTable.put("18 ;","");
        lrTable.put("18 then","");
        lrTable.put("18 =","");
        lrTable.put("18 <","");
        lrTable.put("18 >","");
        lrTable.put("18 <=","");
        lrTable.put("18 >=","");
        lrTable.put("18 ==","");
        lrTable.put("18 +","");
        lrTable.put("18 -","");
        lrTable.put("18 *","");
        lrTable.put("18 /","");
        lrTable.put("18 else","");
        lrTable.put("18 $","");
        lrTable.put("18 program","");
        lrTable.put("18 compoundstmt","");
        lrTable.put("18 stmts","");
        lrTable.put("18 stmt","");
        lrTable.put("18 ifstmt ","");
        lrTable.put("18 whilestmt","");
        lrTable.put("18 assgstmt","");
        lrTable.put("18 boolexpr","");
        lrTable.put("18 arithexpr","");
        lrTable.put("18 multexpr","");
        lrTable.put("18 simpleexpr","");
        lrTable.put("18 arithexprprime","");
        lrTable.put("18 multexprprime","");
        lrTable.put("18 boolop","");
        lrTable.put("19 {","");
        lrTable.put("19 }","");
        lrTable.put("19 if","");
        lrTable.put("19 while","");
        lrTable.put("19 ID","");
        lrTable.put("19 NUM","");
        lrTable.put("19 (","");
        lrTable.put("19 )","");
        lrTable.put("19 ;","");
        lrTable.put("19 then","");
        lrTable.put("19 =","");
        lrTable.put("19 <","29");
        lrTable.put("19 >","30");
        lrTable.put("19 <=","31");
        lrTable.put("19 >=","32");
        lrTable.put("19 ==","33");
        lrTable.put("19 +","");
        lrTable.put("19 -","");
        lrTable.put("19 *","");
        lrTable.put("19 /","");
        lrTable.put("19 else","");
        lrTable.put("19 $","");
        lrTable.put("19 program","");
        lrTable.put("19 compoundstmt","");
        lrTable.put("19 stmts","");
        lrTable.put("19 stmt","");
        lrTable.put("19 ifstmt ","");
        lrTable.put("19 whilestmt","");
        lrTable.put("19 assgstmt","");
        lrTable.put("19 boolexpr","");
        lrTable.put("19 arithexpr","");
        lrTable.put("19 multexpr","");
        lrTable.put("19 simpleexpr","");
        lrTable.put("19 arithexprprime","");
        lrTable.put("19 multexprprime","");
        lrTable.put("19 boolop","28");
        lrTable.put("20 {","");
        lrTable.put("20 }","");
        lrTable.put("20 if","");
        lrTable.put("20 while","");
        lrTable.put("20 ID","");
        lrTable.put("20 NUM","");
        lrTable.put("20 (","");
        lrTable.put("20 )","arithexprprime->E");
        lrTable.put("20 ;","arithexprprime->E");
        lrTable.put("20 then","");
        lrTable.put("20 =","");
        lrTable.put("20 <","arithexprprime->E");
        lrTable.put("20 >","arithexprprime->E");
        lrTable.put("20 <=","arithexprprime->E");
        lrTable.put("20 >=","arithexprprime->E");
        lrTable.put("20 ==","arithexprprime->E");
        lrTable.put("20 +","35");
        lrTable.put("20 -","36");
        lrTable.put("20 *","");
        lrTable.put("20 /","");
        lrTable.put("20 else","");
        lrTable.put("20 $","");
        lrTable.put("20 program","");
        lrTable.put("20 compoundstmt","");
        lrTable.put("20 stmts","");
        lrTable.put("20 stmt","");
        lrTable.put("20 ifstmt ","");
        lrTable.put("20 whilestmt","");
        lrTable.put("20 assgstmt","");
        lrTable.put("20 boolexpr","");
        lrTable.put("20 arithexpr","");
        lrTable.put("20 multexpr","");
        lrTable.put("20 simpleexpr","");
        lrTable.put("20 arithexprprime","34");
        lrTable.put("20 multexprprime","");
        lrTable.put("20 boolop","");
        lrTable.put("21 {","");
        lrTable.put("21 }","");
        lrTable.put("21 if","");
        lrTable.put("21 while","");
        lrTable.put("21 ID","");
        lrTable.put("21 NUM","");
        lrTable.put("21 (","");
        lrTable.put("21 )","multexprprime->E");
        lrTable.put("21 ;","multexprprime->E");
        lrTable.put("21 then","");
        lrTable.put("21 =","");
        lrTable.put("21 <","multexprprime->E");
        lrTable.put("21 >","multexprprime->E");
        lrTable.put("21 <=","multexprprime->E");
        lrTable.put("21 >=","multexprprime->E");
        lrTable.put("21 ==","multexprprime->E");
        lrTable.put("21 +","multexprprime->E");
        lrTable.put("21 -","multexprprime->E");
        lrTable.put("21 *","38");
        lrTable.put("21 /","39");
        lrTable.put("21 else","");
        lrTable.put("21 $","");
        lrTable.put("21 program","");
        lrTable.put("21 compoundstmt","");
        lrTable.put("21 stmts","");
        lrTable.put("21 stmt","");
        lrTable.put("21 ifstmt ","");
        lrTable.put("21 whilestmt","");
        lrTable.put("21 assgstmt","");
        lrTable.put("21 boolexpr","");
        lrTable.put("21 arithexpr","");
        lrTable.put("21 multexpr","");
        lrTable.put("21 simpleexpr","");
        lrTable.put("21 arithexprprime","");
        lrTable.put("21 multexprprime","37");
        lrTable.put("21 boolop","");
        lrTable.put("22 {","");
        lrTable.put("22 }","");
        lrTable.put("22 if","");
        lrTable.put("22 while","");
        lrTable.put("22 ID","");
        lrTable.put("22 NUM","");
        lrTable.put("22 (","");
        lrTable.put("22 )","simpleexpr->ID");
        lrTable.put("22 ;","simpleexpr->ID");
        lrTable.put("22 then","");
        lrTable.put("22 =","");
        lrTable.put("22 <","simpleexpr->ID");
        lrTable.put("22 >","simpleexpr->ID");
        lrTable.put("22 <=","simpleexpr->ID");
        lrTable.put("22 >=","simpleexpr->ID");
        lrTable.put("22 ==","simpleexpr->ID");
        lrTable.put("22 +","simpleexpr->ID");
        lrTable.put("22 -","simpleexpr->ID");
        lrTable.put("22 *","simpleexpr->ID");
        lrTable.put("22 /","simpleexpr->ID");
        lrTable.put("22 else","");
        lrTable.put("22 $","");
        lrTable.put("22 program","");
        lrTable.put("22 compoundstmt","");
        lrTable.put("22 stmts","");
        lrTable.put("22 stmt","");
        lrTable.put("22 ifstmt ","");
        lrTable.put("22 whilestmt","");
        lrTable.put("22 assgstmt","");
        lrTable.put("22 boolexpr","");
        lrTable.put("22 arithexpr","");
        lrTable.put("22 multexpr","");
        lrTable.put("22 simpleexpr","");
        lrTable.put("22 arithexprprime","");
        lrTable.put("22 multexprprime","");
        lrTable.put("22 boolop","");
        lrTable.put("23 {","");
        lrTable.put("23 }","");
        lrTable.put("23 if","");
        lrTable.put("23 while","");
        lrTable.put("23 ID","");
        lrTable.put("23 NUM","");
        lrTable.put("23 (","");
        lrTable.put("23 )","simpleexpr->NUM");
        lrTable.put("23 ;","simpleexpr->NUM");
        lrTable.put("23 then","");
        lrTable.put("23 =","");
        lrTable.put("23 <","simpleexpr->NUM");
        lrTable.put("23 >","simpleexpr->NUM");
        lrTable.put("23 <=","simpleexpr->NUM");
        lrTable.put("23 >=","simpleexpr->NUM");
        lrTable.put("23 ==","simpleexpr->NUM");
        lrTable.put("23 +","simpleexpr->NUM");
        lrTable.put("23 -","simpleexpr->NUM");
        lrTable.put("23 *","simpleexpr->NUM");
        lrTable.put("23 /","simpleexpr->NUM");
        lrTable.put("23 else","");
        lrTable.put("23 $","");
        lrTable.put("23 program","");
        lrTable.put("23 compoundstmt","");
        lrTable.put("23 stmts","");
        lrTable.put("23 stmt","");
        lrTable.put("23 ifstmt ","");
        lrTable.put("23 whilestmt","");
        lrTable.put("23 assgstmt","");
        lrTable.put("23 boolexpr","");
        lrTable.put("23 arithexpr","");
        lrTable.put("23 multexpr","");
        lrTable.put("23 simpleexpr","");
        lrTable.put("23 arithexprprime","");
        lrTable.put("23 multexprprime","");
        lrTable.put("23 boolop","");
        lrTable.put("24 {","");
        lrTable.put("24 }","");
        lrTable.put("24 if","");
        lrTable.put("24 while","");
        lrTable.put("24 ID","22");
        lrTable.put("24 NUM","23");
        lrTable.put("24 (","24");
        lrTable.put("24 )","");
        lrTable.put("24 ;","");
        lrTable.put("24 then","");
        lrTable.put("24 =","");
        lrTable.put("24 <","");
        lrTable.put("24 >","");
        lrTable.put("24 <=","");
        lrTable.put("24 >=","");
        lrTable.put("24 ==","");
        lrTable.put("24 +","");
        lrTable.put("24 -","");
        lrTable.put("24 *","");
        lrTable.put("24 /","");
        lrTable.put("24 else","");
        lrTable.put("24 $","");
        lrTable.put("24 program","");
        lrTable.put("24 compoundstmt","");
        lrTable.put("24 stmts","");
        lrTable.put("24 stmt","");
        lrTable.put("24 ifstmt ","");
        lrTable.put("24 whilestmt","");
        lrTable.put("24 assgstmt","");
        lrTable.put("24 boolexpr","");
        lrTable.put("24 arithexpr","40");
        lrTable.put("24 multexpr","20");
        lrTable.put("24 simpleexpr","21");
        lrTable.put("24 arithexprprime","");
        lrTable.put("24 multexprprime","");
        lrTable.put("24 boolop","");
        lrTable.put("25 {","");
        lrTable.put("25 }","");
        lrTable.put("25 if","");
        lrTable.put("25 while","");
        lrTable.put("25 ID","");
        lrTable.put("25 NUM","");
        lrTable.put("25 (","");
        lrTable.put("25 )","41");
        lrTable.put("25 ;","");
        lrTable.put("25 then","");
        lrTable.put("25 =","");
        lrTable.put("25 <","");
        lrTable.put("25 >","");
        lrTable.put("25 <=","");
        lrTable.put("25 >=","");
        lrTable.put("25 ==","");
        lrTable.put("25 +","");
        lrTable.put("25 -","");
        lrTable.put("25 *","");
        lrTable.put("25 /","");
        lrTable.put("25 else","");
        lrTable.put("25 $","");
        lrTable.put("25 program","");
        lrTable.put("25 compoundstmt","");
        lrTable.put("25 stmts","");
        lrTable.put("25 stmt","");
        lrTable.put("25 ifstmt ","");
        lrTable.put("25 whilestmt","");
        lrTable.put("25 assgstmt","");
        lrTable.put("25 boolexpr","");
        lrTable.put("25 arithexpr","");
        lrTable.put("25 multexpr","");
        lrTable.put("25 simpleexpr","");
        lrTable.put("25 arithexprprime","");
        lrTable.put("25 multexprprime","");
        lrTable.put("25 boolop","");
        lrTable.put("26 {","");
        lrTable.put("26 }","");
        lrTable.put("26 if","");
        lrTable.put("26 while","");
        lrTable.put("26 ID","");
        lrTable.put("26 NUM","");
        lrTable.put("26 (","");
        lrTable.put("26 )","");
        lrTable.put("26 ;","42");
        lrTable.put("26 then","");
        lrTable.put("26 =","");
        lrTable.put("26 <","");
        lrTable.put("26 >","");
        lrTable.put("26 <=","");
        lrTable.put("26 >=","");
        lrTable.put("26 ==","");
        lrTable.put("26 +","");
        lrTable.put("26 -","");
        lrTable.put("26 *","");
        lrTable.put("26 /","");
        lrTable.put("26 else","");
        lrTable.put("26 $","");
        lrTable.put("26 program","");
        lrTable.put("26 compoundstmt","");
        lrTable.put("26 stmts","");
        lrTable.put("26 stmt","");
        lrTable.put("26 ifstmt ","");
        lrTable.put("26 whilestmt","");
        lrTable.put("26 assgstmt","");
        lrTable.put("26 boolexpr","");
        lrTable.put("26 arithexpr","");
        lrTable.put("26 multexpr","");
        lrTable.put("26 simpleexpr","");
        lrTable.put("26 arithexprprime","");
        lrTable.put("26 multexprprime","");
        lrTable.put("26 boolop","");
        lrTable.put("27 {","");
        lrTable.put("27 }","");
        lrTable.put("27 if","");
        lrTable.put("27 while","");
        lrTable.put("27 ID","");
        lrTable.put("27 NUM","");
        lrTable.put("27 (","");
        lrTable.put("27 )","");
        lrTable.put("27 ;","");
        lrTable.put("27 then","43");
        lrTable.put("27 =","");
        lrTable.put("27 <","");
        lrTable.put("27 >","");
        lrTable.put("27 <=","");
        lrTable.put("27 >=","");
        lrTable.put("27 ==","");
        lrTable.put("27 +","");
        lrTable.put("27 -","");
        lrTable.put("27 *","");
        lrTable.put("27 /","");
        lrTable.put("27 else","");
        lrTable.put("27 $","");
        lrTable.put("27 program","");
        lrTable.put("27 compoundstmt","");
        lrTable.put("27 stmts","");
        lrTable.put("27 stmt","");
        lrTable.put("27 ifstmt ","");
        lrTable.put("27 whilestmt","");
        lrTable.put("27 assgstmt","");
        lrTable.put("27 boolexpr","");
        lrTable.put("27 arithexpr","");
        lrTable.put("27 multexpr","");
        lrTable.put("27 simpleexpr","");
        lrTable.put("27 arithexprprime","");
        lrTable.put("27 multexprprime","");
        lrTable.put("27 boolop","");
        lrTable.put("28 {","");
        lrTable.put("28 }","");
        lrTable.put("28 if","");
        lrTable.put("28 while","");
        lrTable.put("28 ID","22");
        lrTable.put("28 NUM","23");
        lrTable.put("28 (","24");
        lrTable.put("28 )","");
        lrTable.put("28 ;","");
        lrTable.put("28 then","");
        lrTable.put("28 =","");
        lrTable.put("28 <","");
        lrTable.put("28 >","");
        lrTable.put("28 <=","");
        lrTable.put("28 >=","");
        lrTable.put("28 ==","");
        lrTable.put("28 +","");
        lrTable.put("28 -","");
        lrTable.put("28 *","");
        lrTable.put("28 /","");
        lrTable.put("28 else","");
        lrTable.put("28 $","");
        lrTable.put("28 program","");
        lrTable.put("28 compoundstmt","");
        lrTable.put("28 stmts","");
        lrTable.put("28 stmt","");
        lrTable.put("28 ifstmt ","");
        lrTable.put("28 whilestmt","");
        lrTable.put("28 assgstmt","");
        lrTable.put("28 boolexpr","");
        lrTable.put("28 arithexpr","44");
        lrTable.put("28 multexpr","20");
        lrTable.put("28 simpleexpr","21");
        lrTable.put("28 arithexprprime","");
        lrTable.put("28 multexprprime","");
        lrTable.put("28 boolop","");
        lrTable.put("29 {","");
        lrTable.put("29 }","");
        lrTable.put("29 if","");
        lrTable.put("29 while","");
        lrTable.put("29 ID","boolop-><");
        lrTable.put("29 NUM","boolop-><");
        lrTable.put("29 (","boolop-><");
        lrTable.put("29 )","");
        lrTable.put("29 ;","");
        lrTable.put("29 then","");
        lrTable.put("29 =","");
        lrTable.put("29 <","");
        lrTable.put("29 >","");
        lrTable.put("29 <=","");
        lrTable.put("29 >=","");
        lrTable.put("29 ==","");
        lrTable.put("29 +","");
        lrTable.put("29 -","");
        lrTable.put("29 *","");
        lrTable.put("29 /","");
        lrTable.put("29 else","");
        lrTable.put("29 $","");
        lrTable.put("29 program","");
        lrTable.put("29 compoundstmt","");
        lrTable.put("29 stmts","");
        lrTable.put("29 stmt","");
        lrTable.put("29 ifstmt ","");
        lrTable.put("29 whilestmt","");
        lrTable.put("29 assgstmt","");
        lrTable.put("29 boolexpr","");
        lrTable.put("29 arithexpr","");
        lrTable.put("29 multexpr","");
        lrTable.put("29 simpleexpr","");
        lrTable.put("29 arithexprprime","");
        lrTable.put("29 multexprprime","");
        lrTable.put("29 boolop","");
        lrTable.put("30 {","");
        lrTable.put("30 }","");
        lrTable.put("30 if","");
        lrTable.put("30 while","");
        lrTable.put("30 ID","boolop->>");
        lrTable.put("30 NUM","boolop->>");
        lrTable.put("30 (","boolop->>");
        lrTable.put("30 )","");
        lrTable.put("30 ;","");
        lrTable.put("30 then","");
        lrTable.put("30 =","");
        lrTable.put("30 <","");
        lrTable.put("30 >","");
        lrTable.put("30 <=","");
        lrTable.put("30 >=","");
        lrTable.put("30 ==","");
        lrTable.put("30 +","");
        lrTable.put("30 -","");
        lrTable.put("30 *","");
        lrTable.put("30 /","");
        lrTable.put("30 else","");
        lrTable.put("30 $","");
        lrTable.put("30 program","");
        lrTable.put("30 compoundstmt","");
        lrTable.put("30 stmts","");
        lrTable.put("30 stmt","");
        lrTable.put("30 ifstmt ","");
        lrTable.put("30 whilestmt","");
        lrTable.put("30 assgstmt","");
        lrTable.put("30 boolexpr","");
        lrTable.put("30 arithexpr","");
        lrTable.put("30 multexpr","");
        lrTable.put("30 simpleexpr","");
        lrTable.put("30 arithexprprime","");
        lrTable.put("30 multexprprime","");
        lrTable.put("30 boolop","");
        lrTable.put("31 {","");
        lrTable.put("31 }","");
        lrTable.put("31 if","");
        lrTable.put("31 while","");
        lrTable.put("31 ID","boolop-><=");
        lrTable.put("31 NUM","boolop-><=");
        lrTable.put("31 (","boolop-><=");
        lrTable.put("31 )","");
        lrTable.put("31 ;","");
        lrTable.put("31 then","");
        lrTable.put("31 =","");
        lrTable.put("31 <","");
        lrTable.put("31 >","");
        lrTable.put("31 <=","");
        lrTable.put("31 >=","");
        lrTable.put("31 ==","");
        lrTable.put("31 +","");
        lrTable.put("31 -","");
        lrTable.put("31 *","");
        lrTable.put("31 /","");
        lrTable.put("31 else","");
        lrTable.put("31 $","");
        lrTable.put("31 program","");
        lrTable.put("31 compoundstmt","");
        lrTable.put("31 stmts","");
        lrTable.put("31 stmt","");
        lrTable.put("31 ifstmt ","");
        lrTable.put("31 whilestmt","");
        lrTable.put("31 assgstmt","");
        lrTable.put("31 boolexpr","");
        lrTable.put("31 arithexpr","");
        lrTable.put("31 multexpr","");
        lrTable.put("31 simpleexpr","");
        lrTable.put("31 arithexprprime","");
        lrTable.put("31 multexprprime","");
        lrTable.put("31 boolop","");
        lrTable.put("32 {","");
        lrTable.put("32 }","");
        lrTable.put("32 if","");
        lrTable.put("32 while","");
        lrTable.put("32 ID","boolop->>=");
        lrTable.put("32 NUM","boolop->>=");
        lrTable.put("32 (","boolop->>=");
        lrTable.put("32 )","");
        lrTable.put("32 ;","");
        lrTable.put("32 then","");
        lrTable.put("32 =","");
        lrTable.put("32 <","");
        lrTable.put("32 >","");
        lrTable.put("32 <=","");
        lrTable.put("32 >=","");
        lrTable.put("32 ==","");
        lrTable.put("32 +","");
        lrTable.put("32 -","");
        lrTable.put("32 *","");
        lrTable.put("32 /","");
        lrTable.put("32 else","");
        lrTable.put("32 $","");
        lrTable.put("32 program","");
        lrTable.put("32 compoundstmt","");
        lrTable.put("32 stmts","");
        lrTable.put("32 stmt","");
        lrTable.put("32 ifstmt ","");
        lrTable.put("32 whilestmt","");
        lrTable.put("32 assgstmt","");
        lrTable.put("32 boolexpr","");
        lrTable.put("32 arithexpr","");
        lrTable.put("32 multexpr","");
        lrTable.put("32 simpleexpr","");
        lrTable.put("32 arithexprprime","");
        lrTable.put("32 multexprprime","");
        lrTable.put("32 boolop","");
        lrTable.put("33 {","");
        lrTable.put("33 }","");
        lrTable.put("33 if","");
        lrTable.put("33 while","");
        lrTable.put("33 ID","boolop->==");
        lrTable.put("33 NUM","boolop->==");
        lrTable.put("33 (","boolop->==");
        lrTable.put("33 )","");
        lrTable.put("33 ;","");
        lrTable.put("33 then","");
        lrTable.put("33 =","");
        lrTable.put("33 <","");
        lrTable.put("33 >","");
        lrTable.put("33 <=","");
        lrTable.put("33 >=","");
        lrTable.put("33 ==","");
        lrTable.put("33 +","");
        lrTable.put("33 -","");
        lrTable.put("33 *","");
        lrTable.put("33 /","");
        lrTable.put("33 else","");
        lrTable.put("33 $","");
        lrTable.put("33 program","");
        lrTable.put("33 compoundstmt","");
        lrTable.put("33 stmts","");
        lrTable.put("33 stmt","");
        lrTable.put("33 ifstmt ","");
        lrTable.put("33 whilestmt","");
        lrTable.put("33 assgstmt","");
        lrTable.put("33 boolexpr","");
        lrTable.put("33 arithexpr","");
        lrTable.put("33 multexpr","");
        lrTable.put("33 simpleexpr","");
        lrTable.put("33 arithexprprime","");
        lrTable.put("33 multexprprime","");
        lrTable.put("33 boolop","");
        lrTable.put("34 {","");
        lrTable.put("34 }","");
        lrTable.put("34 if","");
        lrTable.put("34 while","");
        lrTable.put("34 ID","");
        lrTable.put("34 NUM","");
        lrTable.put("34 (","");
        lrTable.put("34 )","arithexpr->multexpr arithexprprime");
        lrTable.put("34 ;","arithexpr->multexpr arithexprprime");
        lrTable.put("34 then","");
        lrTable.put("34 =","");
        lrTable.put("34 <","arithexpr->multexpr arithexprprime");
        lrTable.put("34 >","arithexpr->multexpr arithexprprime");
        lrTable.put("34 <=","arithexpr->multexpr arithexprprime");
        lrTable.put("34 >=","arithexpr->multexpr arithexprprime");
        lrTable.put("34 ==","arithexpr->multexpr arithexprprime");
        lrTable.put("34 +","");
        lrTable.put("34 -","");
        lrTable.put("34 *","");
        lrTable.put("34 /","");
        lrTable.put("34 else","");
        lrTable.put("34 $","");
        lrTable.put("34 program","");
        lrTable.put("34 compoundstmt","");
        lrTable.put("34 stmts","");
        lrTable.put("34 stmt","");
        lrTable.put("34 ifstmt ","");
        lrTable.put("34 whilestmt","");
        lrTable.put("34 assgstmt","");
        lrTable.put("34 boolexpr","");
        lrTable.put("34 arithexpr","");
        lrTable.put("34 multexpr","");
        lrTable.put("34 simpleexpr","");
        lrTable.put("34 arithexprprime","");
        lrTable.put("34 multexprprime","");
        lrTable.put("34 boolop","");
        lrTable.put("35 {","");
        lrTable.put("35 }","");
        lrTable.put("35 if","");
        lrTable.put("35 while","");
        lrTable.put("35 ID","22");
        lrTable.put("35 NUM","23");
        lrTable.put("35 (","24");
        lrTable.put("35 )","");
        lrTable.put("35 ;","");
        lrTable.put("35 then","");
        lrTable.put("35 =","");
        lrTable.put("35 <","");
        lrTable.put("35 >","");
        lrTable.put("35 <=","");
        lrTable.put("35 >=","");
        lrTable.put("35 ==","");
        lrTable.put("35 +","");
        lrTable.put("35 -","");
        lrTable.put("35 *","");
        lrTable.put("35 /","");
        lrTable.put("35 else","");
        lrTable.put("35 $","");
        lrTable.put("35 program","");
        lrTable.put("35 compoundstmt","");
        lrTable.put("35 stmts","");
        lrTable.put("35 stmt","");
        lrTable.put("35 ifstmt ","");
        lrTable.put("35 whilestmt","");
        lrTable.put("35 assgstmt","");
        lrTable.put("35 boolexpr","");
        lrTable.put("35 arithexpr","");
        lrTable.put("35 multexpr","45");
        lrTable.put("35 simpleexpr","21");
        lrTable.put("35 arithexprprime","");
        lrTable.put("35 multexprprime","");
        lrTable.put("35 boolop","");
        lrTable.put("36 {","");
        lrTable.put("36 }","");
        lrTable.put("36 if","");
        lrTable.put("36 while","");
        lrTable.put("36 ID","22");
        lrTable.put("36 NUM","23");
        lrTable.put("36 (","24");
        lrTable.put("36 )","");
        lrTable.put("36 ;","");
        lrTable.put("36 then","");
        lrTable.put("36 =","");
        lrTable.put("36 <","");
        lrTable.put("36 >","");
        lrTable.put("36 <=","");
        lrTable.put("36 >=","");
        lrTable.put("36 ==","");
        lrTable.put("36 +","");
        lrTable.put("36 -","");
        lrTable.put("36 *","");
        lrTable.put("36 /","");
        lrTable.put("36 else","");
        lrTable.put("36 $","");
        lrTable.put("36 program","");
        lrTable.put("36 compoundstmt","");
        lrTable.put("36 stmts","");
        lrTable.put("36 stmt","");
        lrTable.put("36 ifstmt ","");
        lrTable.put("36 whilestmt","");
        lrTable.put("36 assgstmt","");
        lrTable.put("36 boolexpr","");
        lrTable.put("36 arithexpr","");
        lrTable.put("36 multexpr","46");
        lrTable.put("36 simpleexpr","21");
        lrTable.put("36 arithexprprime","");
        lrTable.put("36 multexprprime","");
        lrTable.put("36 boolop","");
        lrTable.put("37 {","");
        lrTable.put("37 }","");
        lrTable.put("37 if","");
        lrTable.put("37 while","");
        lrTable.put("37 ID","");
        lrTable.put("37 NUM","");
        lrTable.put("37 (","");
        lrTable.put("37 )","multexpr->simpleexpr multexprprime");
        lrTable.put("37 ;","multexpr->simpleexpr multexprprime");
        lrTable.put("37 then","");
        lrTable.put("37 =","");
        lrTable.put("37 <","multexpr->simpleexpr multexprprime");
        lrTable.put("37 >","multexpr->simpleexpr multexprprime");
        lrTable.put("37 <=","multexpr->simpleexpr multexprprime");
        lrTable.put("37 >=","multexpr->simpleexpr multexprprime");
        lrTable.put("37 ==","multexpr->simpleexpr multexprprime");
        lrTable.put("37 +","multexpr->simpleexpr multexprprime");
        lrTable.put("37 -","multexpr->simpleexpr multexprprime");
        lrTable.put("37 *","");
        lrTable.put("37 /","");
        lrTable.put("37 else","");
        lrTable.put("37 $","");
        lrTable.put("37 program","");
        lrTable.put("37 compoundstmt","");
        lrTable.put("37 stmts","");
        lrTable.put("37 stmt","");
        lrTable.put("37 ifstmt ","");
        lrTable.put("37 whilestmt","");
        lrTable.put("37 assgstmt","");
        lrTable.put("37 boolexpr","");
        lrTable.put("37 arithexpr","");
        lrTable.put("37 multexpr","");
        lrTable.put("37 simpleexpr","");
        lrTable.put("37 arithexprprime","");
        lrTable.put("37 multexprprime","");
        lrTable.put("37 boolop","");
        lrTable.put("38 {","");
        lrTable.put("38 }","");
        lrTable.put("38 if","");
        lrTable.put("38 while","");
        lrTable.put("38 ID","22");
        lrTable.put("38 NUM","23");
        lrTable.put("38 (","24");
        lrTable.put("38 )","");
        lrTable.put("38 ;","");
        lrTable.put("38 then","");
        lrTable.put("38 =","");
        lrTable.put("38 <","");
        lrTable.put("38 >","");
        lrTable.put("38 <=","");
        lrTable.put("38 >=","");
        lrTable.put("38 ==","");
        lrTable.put("38 +","");
        lrTable.put("38 -","");
        lrTable.put("38 *","");
        lrTable.put("38 /","");
        lrTable.put("38 else","");
        lrTable.put("38 $","");
        lrTable.put("38 program","");
        lrTable.put("38 compoundstmt","");
        lrTable.put("38 stmts","");
        lrTable.put("38 stmt","");
        lrTable.put("38 ifstmt ","");
        lrTable.put("38 whilestmt","");
        lrTable.put("38 assgstmt","");
        lrTable.put("38 boolexpr","");
        lrTable.put("38 arithexpr","");
        lrTable.put("38 multexpr","");
        lrTable.put("38 simpleexpr","47");
        lrTable.put("38 arithexprprime","");
        lrTable.put("38 multexprprime","");
        lrTable.put("38 boolop","");
        lrTable.put("39 {","");
        lrTable.put("39 }","");
        lrTable.put("39 if","");
        lrTable.put("39 while","");
        lrTable.put("39 ID","22");
        lrTable.put("39 NUM","23");
        lrTable.put("39 (","24");
        lrTable.put("39 )","");
        lrTable.put("39 ;","");
        lrTable.put("39 then","");
        lrTable.put("39 =","");
        lrTable.put("39 <","");
        lrTable.put("39 >","");
        lrTable.put("39 <=","");
        lrTable.put("39 >=","");
        lrTable.put("39 ==","");
        lrTable.put("39 +","");
        lrTable.put("39 -","");
        lrTable.put("39 *","");
        lrTable.put("39 /","");
        lrTable.put("39 else","");
        lrTable.put("39 $","");
        lrTable.put("39 program","");
        lrTable.put("39 compoundstmt","");
        lrTable.put("39 stmts","");
        lrTable.put("39 stmt","");
        lrTable.put("39 ifstmt ","");
        lrTable.put("39 whilestmt","");
        lrTable.put("39 assgstmt","");
        lrTable.put("39 boolexpr","");
        lrTable.put("39 arithexpr","");
        lrTable.put("39 multexpr","");
        lrTable.put("39 simpleexpr","48");
        lrTable.put("39 arithexprprime","");
        lrTable.put("39 multexprprime","");
        lrTable.put("39 boolop","");
        lrTable.put("40 {","");
        lrTable.put("40 }","");
        lrTable.put("40 if","");
        lrTable.put("40 while","");
        lrTable.put("40 ID","");
        lrTable.put("40 NUM","");
        lrTable.put("40 (","");
        lrTable.put("40 )","49");
        lrTable.put("40 ;","");
        lrTable.put("40 then","");
        lrTable.put("40 =","");
        lrTable.put("40 <","");
        lrTable.put("40 >","");
        lrTable.put("40 <=","");
        lrTable.put("40 >=","");
        lrTable.put("40 ==","");
        lrTable.put("40 +","");
        lrTable.put("40 -","");
        lrTable.put("40 *","");
        lrTable.put("40 /","");
        lrTable.put("40 else","");
        lrTable.put("40 $","");
        lrTable.put("40 program","");
        lrTable.put("40 compoundstmt","");
        lrTable.put("40 stmts","");
        lrTable.put("40 stmt","");
        lrTable.put("40 ifstmt ","");
        lrTable.put("40 whilestmt","");
        lrTable.put("40 assgstmt","");
        lrTable.put("40 boolexpr","");
        lrTable.put("40 arithexpr","");
        lrTable.put("40 multexpr","");
        lrTable.put("40 simpleexpr","");
        lrTable.put("40 arithexprprime","");
        lrTable.put("40 multexprprime","");
        lrTable.put("40 boolop","");
        lrTable.put("41 {","3");
        lrTable.put("41 }","");
        lrTable.put("41 if","7");
        lrTable.put("41 while","9");
        lrTable.put("41 ID","11");
        lrTable.put("41 NUM","");
        lrTable.put("41 (","");
        lrTable.put("41 )","");
        lrTable.put("41 ;","");
        lrTable.put("41 then","");
        lrTable.put("41 =","");
        lrTable.put("41 <","");
        lrTable.put("41 >","");
        lrTable.put("41 <=","");
        lrTable.put("41 >=","");
        lrTable.put("41 ==","");
        lrTable.put("41 +","");
        lrTable.put("41 -","");
        lrTable.put("41 *","");
        lrTable.put("41 /","");
        lrTable.put("41 else","");
        lrTable.put("41 $","");
        lrTable.put("41 program","");
        lrTable.put("41 compoundstmt","12");
        lrTable.put("41 stmts","");
        lrTable.put("41 stmt","50");
        lrTable.put("41 ifstmt ","6");
        lrTable.put("41 whilestmt","8");
        lrTable.put("41 assgstmt","10");
        lrTable.put("41 boolexpr","");
        lrTable.put("41 arithexpr","");
        lrTable.put("41 multexpr","");
        lrTable.put("41 simpleexpr","");
        lrTable.put("41 arithexprprime","");
        lrTable.put("41 multexprprime","");
        lrTable.put("41 boolop","");
        lrTable.put("42 {","assgstmt->ID = arithexpr ;");
        lrTable.put("42 }","assgstmt->ID = arithexpr ;");
        lrTable.put("42 if","assgstmt->ID = arithexpr ;");
        lrTable.put("42 while","assgstmt->ID = arithexpr ;");
        lrTable.put("42 ID","assgstmt->ID = arithexpr ;");
        lrTable.put("42 NUM","");
        lrTable.put("42 (","");
        lrTable.put("42 )","");
        lrTable.put("42 ;","");
        lrTable.put("42 then","");
        lrTable.put("42 =","");
        lrTable.put("42 <","");
        lrTable.put("42 >","");
        lrTable.put("42 <=","");
        lrTable.put("42 >=","");
        lrTable.put("42 ==","");
        lrTable.put("42 +","");
        lrTable.put("42 -","");
        lrTable.put("42 *","");
        lrTable.put("42 /","");
        lrTable.put("42 else","assgstmt->ID = arithexpr ;");
        lrTable.put("42 $","");
        lrTable.put("42 program","");
        lrTable.put("42 compoundstmt","");
        lrTable.put("42 stmts","");
        lrTable.put("42 stmt","");
        lrTable.put("42 ifstmt ","");
        lrTable.put("42 whilestmt","");
        lrTable.put("42 assgstmt","");
        lrTable.put("42 boolexpr","");
        lrTable.put("42 arithexpr","");
        lrTable.put("42 multexpr","");
        lrTable.put("42 simpleexpr","");
        lrTable.put("42 arithexprprime","");
        lrTable.put("42 multexprprime","");
        lrTable.put("42 boolop","");
        lrTable.put("43 {","3");
        lrTable.put("43 }","");
        lrTable.put("43 if","7");
        lrTable.put("43 while","9");
        lrTable.put("43 ID","11");
        lrTable.put("43 NUM","");
        lrTable.put("43 (","");
        lrTable.put("43 )","");
        lrTable.put("43 ;","");
        lrTable.put("43 then","");
        lrTable.put("43 =","");
        lrTable.put("43 <","");
        lrTable.put("43 >","");
        lrTable.put("43 <=","");
        lrTable.put("43 >=","");
        lrTable.put("43 ==","");
        lrTable.put("43 +","");
        lrTable.put("43 -","");
        lrTable.put("43 *","");
        lrTable.put("43 /","");
        lrTable.put("43 else","");
        lrTable.put("43 $","");
        lrTable.put("43 program","");
        lrTable.put("43 compoundstmt","12");
        lrTable.put("43 stmts","");
        lrTable.put("43 stmt","51");
        lrTable.put("43 ifstmt ","6");
        lrTable.put("43 whilestmt","8");
        lrTable.put("43 assgstmt","10");
        lrTable.put("43 boolexpr","");
        lrTable.put("43 arithexpr","");
        lrTable.put("43 multexpr","");
        lrTable.put("43 simpleexpr","");
        lrTable.put("43 arithexprprime","");
        lrTable.put("43 multexprprime","");
        lrTable.put("43 boolop","");
        lrTable.put("44 {","");
        lrTable.put("44 }","");
        lrTable.put("44 if","");
        lrTable.put("44 while","");
        lrTable.put("44 ID","");
        lrTable.put("44 NUM","");
        lrTable.put("44 (","");
        lrTable.put("44 )","boolexpr->arithexpr boolop arithexpr");
        lrTable.put("44 ;","");
        lrTable.put("44 then","");
        lrTable.put("44 =","");
        lrTable.put("44 <","");
        lrTable.put("44 >","");
        lrTable.put("44 <=","");
        lrTable.put("44 >=","");
        lrTable.put("44 ==","");
        lrTable.put("44 +","");
        lrTable.put("44 -","");
        lrTable.put("44 *","");
        lrTable.put("44 /","");
        lrTable.put("44 else","");
        lrTable.put("44 $","");
        lrTable.put("44 program","");
        lrTable.put("44 compoundstmt","");
        lrTable.put("44 stmts","");
        lrTable.put("44 stmt","");
        lrTable.put("44 ifstmt ","");
        lrTable.put("44 whilestmt","");
        lrTable.put("44 assgstmt","");
        lrTable.put("44 boolexpr","");
        lrTable.put("44 arithexpr","");
        lrTable.put("44 multexpr","");
        lrTable.put("44 simpleexpr","");
        lrTable.put("44 arithexprprime","");
        lrTable.put("44 multexprprime","");
        lrTable.put("44 boolop","");
        lrTable.put("45 {","");
        lrTable.put("45 }","");
        lrTable.put("45 if","");
        lrTable.put("45 while","");
        lrTable.put("45 ID","");
        lrTable.put("45 NUM","");
        lrTable.put("45 (","");
        lrTable.put("45 )","arithexprprime->E");
        lrTable.put("45 ;","arithexprprime->E");
        lrTable.put("45 then","");
        lrTable.put("45 =","");
        lrTable.put("45 <","arithexprprime->E");
        lrTable.put("45 >","arithexprprime->E");
        lrTable.put("45 <=","arithexprprime->E");
        lrTable.put("45 >=","arithexprprime->E");
        lrTable.put("45 ==","arithexprprime->E");
        lrTable.put("45 +","35");
        lrTable.put("45 -","36");
        lrTable.put("45 *","");
        lrTable.put("45 /","");
        lrTable.put("45 else","");
        lrTable.put("45 $","");
        lrTable.put("45 program","");
        lrTable.put("45 compoundstmt","");
        lrTable.put("45 stmts","");
        lrTable.put("45 stmt","");
        lrTable.put("45 ifstmt ","");
        lrTable.put("45 whilestmt","");
        lrTable.put("45 assgstmt","");
        lrTable.put("45 boolexpr","");
        lrTable.put("45 arithexpr","");
        lrTable.put("45 multexpr","");
        lrTable.put("45 simpleexpr","");
        lrTable.put("45 arithexprprime","52");
        lrTable.put("45 multexprprime","");
        lrTable.put("45 boolop","");
        lrTable.put("46 {","");
        lrTable.put("46 }","");
        lrTable.put("46 if","");
        lrTable.put("46 while","");
        lrTable.put("46 ID","");
        lrTable.put("46 NUM","");
        lrTable.put("46 (","");
        lrTable.put("46 )","arithexprprime->E");
        lrTable.put("46 ;","arithexprprime->E");
        lrTable.put("46 then","");
        lrTable.put("46 =","");
        lrTable.put("46 <","arithexprprime->E");
        lrTable.put("46 >","arithexprprime->E");
        lrTable.put("46 <=","arithexprprime->E");
        lrTable.put("46 >=","arithexprprime->E");
        lrTable.put("46 ==","arithexprprime->E");
        lrTable.put("46 +","35");
        lrTable.put("46 -","36");
        lrTable.put("46 *","");
        lrTable.put("46 /","");
        lrTable.put("46 else","");
        lrTable.put("46 $","");
        lrTable.put("46 program","");
        lrTable.put("46 compoundstmt","");
        lrTable.put("46 stmts","");
        lrTable.put("46 stmt","");
        lrTable.put("46 ifstmt ","");
        lrTable.put("46 whilestmt","");
        lrTable.put("46 assgstmt","");
        lrTable.put("46 boolexpr","");
        lrTable.put("46 arithexpr","");
        lrTable.put("46 multexpr","");
        lrTable.put("46 simpleexpr","");
        lrTable.put("46 arithexprprime","53");
        lrTable.put("46 multexprprime","");
        lrTable.put("46 boolop","");
        lrTable.put("47 {","");
        lrTable.put("47 }","");
        lrTable.put("47 if","");
        lrTable.put("47 while","");
        lrTable.put("47 ID","");
        lrTable.put("47 NUM","");
        lrTable.put("47 (","");
        lrTable.put("47 )","multexprprime->E");
        lrTable.put("47 ;","multexprprime->E");
        lrTable.put("47 then","");
        lrTable.put("47 =","");
        lrTable.put("47 <","multexprprime->E");
        lrTable.put("47 >","multexprprime->E");
        lrTable.put("47 <=","multexprprime->E");
        lrTable.put("47 >=","multexprprime->E");
        lrTable.put("47 ==","multexprprime->E");
        lrTable.put("47 +","multexprprime->E");
        lrTable.put("47 -","multexprprime->E");
        lrTable.put("47 *","38");
        lrTable.put("47 /","39");
        lrTable.put("47 else","");
        lrTable.put("47 $","");
        lrTable.put("47 program","");
        lrTable.put("47 compoundstmt","");
        lrTable.put("47 stmts","");
        lrTable.put("47 stmt","");
        lrTable.put("47 ifstmt ","");
        lrTable.put("47 whilestmt","");
        lrTable.put("47 assgstmt","");
        lrTable.put("47 boolexpr","");
        lrTable.put("47 arithexpr","");
        lrTable.put("47 multexpr","");
        lrTable.put("47 simpleexpr","");
        lrTable.put("47 arithexprprime","");
        lrTable.put("47 multexprprime","54");
        lrTable.put("47 boolop","");
        lrTable.put("48 {","");
        lrTable.put("48 }","");
        lrTable.put("48 if","");
        lrTable.put("48 while","");
        lrTable.put("48 ID","");
        lrTable.put("48 NUM","");
        lrTable.put("48 (","");
        lrTable.put("48 )","multexprprime->E");
        lrTable.put("48 ;","multexprprime->E");
        lrTable.put("48 then","");
        lrTable.put("48 =","");
        lrTable.put("48 <","multexprprime->E");
        lrTable.put("48 >","multexprprime->E");
        lrTable.put("48 <=","multexprprime->E");
        lrTable.put("48 >=","multexprprime->E");
        lrTable.put("48 ==","multexprprime->E");
        lrTable.put("48 +","multexprprime->E");
        lrTable.put("48 -","multexprprime->E");
        lrTable.put("48 *","38");
        lrTable.put("48 /","39");
        lrTable.put("48 else","");
        lrTable.put("48 $","");
        lrTable.put("48 program","");
        lrTable.put("48 compoundstmt","");
        lrTable.put("48 stmts","");
        lrTable.put("48 stmt","");
        lrTable.put("48 ifstmt ","");
        lrTable.put("48 whilestmt","");
        lrTable.put("48 assgstmt","");
        lrTable.put("48 boolexpr","");
        lrTable.put("48 arithexpr","");
        lrTable.put("48 multexpr","");
        lrTable.put("48 simpleexpr","");
        lrTable.put("48 arithexprprime","");
        lrTable.put("48 multexprprime","55");
        lrTable.put("48 boolop","");
        lrTable.put("49 {","");
        lrTable.put("49 }","");
        lrTable.put("49 if","");
        lrTable.put("49 while","");
        lrTable.put("49 ID","");
        lrTable.put("49 NUM","");
        lrTable.put("49 (","");
        lrTable.put("49 )","simpleexpr->( arithexpr )");
        lrTable.put("49 ;","simpleexpr->( arithexpr )");
        lrTable.put("49 then","");
        lrTable.put("49 =","");
        lrTable.put("49 <","simpleexpr->( arithexpr )");
        lrTable.put("49 >","simpleexpr->( arithexpr )");
        lrTable.put("49 <=","simpleexpr->( arithexpr )");
        lrTable.put("49 >=","simpleexpr->( arithexpr )");
        lrTable.put("49 ==","simpleexpr->( arithexpr )");
        lrTable.put("49 +","simpleexpr->( arithexpr )");
        lrTable.put("49 -","simpleexpr->( arithexpr )");
        lrTable.put("49 *","simpleexpr->( arithexpr )");
        lrTable.put("49 /","simpleexpr->( arithexpr )");
        lrTable.put("49 else","");
        lrTable.put("49 $","");
        lrTable.put("49 program","");
        lrTable.put("49 compoundstmt","");
        lrTable.put("49 stmts","");
        lrTable.put("49 stmt","");
        lrTable.put("49 ifstmt ","");
        lrTable.put("49 whilestmt","");
        lrTable.put("49 assgstmt","");
        lrTable.put("49 boolexpr","");
        lrTable.put("49 arithexpr","");
        lrTable.put("49 multexpr","");
        lrTable.put("49 simpleexpr","");
        lrTable.put("49 arithexprprime","");
        lrTable.put("49 multexprprime","");
        lrTable.put("49 boolop","");
        lrTable.put("50 {","whilestmt->while ( boolexpr ) stmt");
        lrTable.put("50 }","whilestmt->while ( boolexpr ) stmt");
        lrTable.put("50 if","whilestmt->while ( boolexpr ) stmt");
        lrTable.put("50 while","whilestmt->while ( boolexpr ) stmt");
        lrTable.put("50 ID","whilestmt->while ( boolexpr ) stmt");
        lrTable.put("50 NUM","");
        lrTable.put("50 (","");
        lrTable.put("50 )","");
        lrTable.put("50 ;","");
        lrTable.put("50 then","");
        lrTable.put("50 =","");
        lrTable.put("50 <","");
        lrTable.put("50 >","");
        lrTable.put("50 <=","");
        lrTable.put("50 >=","");
        lrTable.put("50 ==","");
        lrTable.put("50 +","");
        lrTable.put("50 -","");
        lrTable.put("50 *","");
        lrTable.put("50 /","");
        lrTable.put("50 else","whilestmt->while ( boolexpr ) stmt");
        lrTable.put("50 $","");
        lrTable.put("50 program","");
        lrTable.put("50 compoundstmt","");
        lrTable.put("50 stmts","");
        lrTable.put("50 stmt","");
        lrTable.put("50 ifstmt ","");
        lrTable.put("50 whilestmt","");
        lrTable.put("50 assgstmt","");
        lrTable.put("50 boolexpr","");
        lrTable.put("50 arithexpr","");
        lrTable.put("50 multexpr","");
        lrTable.put("50 simpleexpr","");
        lrTable.put("50 arithexprprime","");
        lrTable.put("50 multexprprime","");
        lrTable.put("50 boolop","");
        lrTable.put("51 {","");
        lrTable.put("51 }","");
        lrTable.put("51 if","");
        lrTable.put("51 while","");
        lrTable.put("51 ID","");
        lrTable.put("51 NUM","");
        lrTable.put("51 (","");
        lrTable.put("51 )","");
        lrTable.put("51 ;","");
        lrTable.put("51 then","");
        lrTable.put("51 =","");
        lrTable.put("51 <","");
        lrTable.put("51 >","");
        lrTable.put("51 <=","");
        lrTable.put("51 >=","");
        lrTable.put("51 ==","");
        lrTable.put("51 +","");
        lrTable.put("51 -","");
        lrTable.put("51 *","");
        lrTable.put("51 /","");
        lrTable.put("51 else","56");
        lrTable.put("51 $","");
        lrTable.put("51 program","");
        lrTable.put("51 compoundstmt","");
        lrTable.put("51 stmts","");
        lrTable.put("51 stmt","");
        lrTable.put("51 ifstmt ","");
        lrTable.put("51 whilestmt","");
        lrTable.put("51 assgstmt","");
        lrTable.put("51 boolexpr","");
        lrTable.put("51 arithexpr","");
        lrTable.put("51 multexpr","");
        lrTable.put("51 simpleexpr","");
        lrTable.put("51 arithexprprime","");
        lrTable.put("51 multexprprime","");
        lrTable.put("51 boolop","");
        lrTable.put("52 {","");
        lrTable.put("52 }","");
        lrTable.put("52 if","");
        lrTable.put("52 while","");
        lrTable.put("52 ID","");
        lrTable.put("52 NUM","");
        lrTable.put("52 (","");
        lrTable.put("52 )","arithexprprime->+ multexpr arithexprprime");
        lrTable.put("52 ;","arithexprprime->+ multexpr arithexprprime");
        lrTable.put("52 then","");
        lrTable.put("52 =","");
        lrTable.put("52 <","arithexprprime->+ multexpr arithexprprime");
        lrTable.put("52 >","arithexprprime->+ multexpr arithexprprime");
        lrTable.put("52 <=","arithexprprime->+ multexpr arithexprprime");
        lrTable.put("52 >=","arithexprprime->+ multexpr arithexprprime");
        lrTable.put("52 ==","arithexprprime->+ multexpr arithexprprime");
        lrTable.put("52 +","");
        lrTable.put("52 -","");
        lrTable.put("52 *","");
        lrTable.put("52 /","");
        lrTable.put("52 else","");
        lrTable.put("52 $","");
        lrTable.put("52 program","");
        lrTable.put("52 compoundstmt","");
        lrTable.put("52 stmts","");
        lrTable.put("52 stmt","");
        lrTable.put("52 ifstmt ","");
        lrTable.put("52 whilestmt","");
        lrTable.put("52 assgstmt","");
        lrTable.put("52 boolexpr","");
        lrTable.put("52 arithexpr","");
        lrTable.put("52 multexpr","");
        lrTable.put("52 simpleexpr","");
        lrTable.put("52 arithexprprime","");
        lrTable.put("52 multexprprime","");
        lrTable.put("52 boolop","");
        lrTable.put("53 {","");
        lrTable.put("53 }","");
        lrTable.put("53 if","");
        lrTable.put("53 while","");
        lrTable.put("53 ID","");
        lrTable.put("53 NUM","");
        lrTable.put("53 (","");
        lrTable.put("53 )","arithexprprime->- multexpr arithexprprime");
        lrTable.put("53 ;","arithexprprime->- multexpr arithexprprime");
        lrTable.put("53 then","");
        lrTable.put("53 =","");
        lrTable.put("53 <","arithexprprime->- multexpr arithexprprime");
        lrTable.put("53 >","arithexprprime->- multexpr arithexprprime");
        lrTable.put("53 <=","arithexprprime->- multexpr arithexprprime");
        lrTable.put("53 >=","arithexprprime->- multexpr arithexprprime");
        lrTable.put("53 ==","arithexprprime->- multexpr arithexprprime");
        lrTable.put("53 +","");
        lrTable.put("53 -","");
        lrTable.put("53 *","");
        lrTable.put("53 /","");
        lrTable.put("53 else","");
        lrTable.put("53 $","");
        lrTable.put("53 program","");
        lrTable.put("53 compoundstmt","");
        lrTable.put("53 stmts","");
        lrTable.put("53 stmt","");
        lrTable.put("53 ifstmt ","");
        lrTable.put("53 whilestmt","");
        lrTable.put("53 assgstmt","");
        lrTable.put("53 boolexpr","");
        lrTable.put("53 arithexpr","");
        lrTable.put("53 multexpr","");
        lrTable.put("53 simpleexpr","");
        lrTable.put("53 arithexprprime","");
        lrTable.put("53 multexprprime","");
        lrTable.put("53 boolop","");
        lrTable.put("54 {","");
        lrTable.put("54 }","");
        lrTable.put("54 if","");
        lrTable.put("54 while","");
        lrTable.put("54 ID","");
        lrTable.put("54 NUM","");
        lrTable.put("54 (","");
        lrTable.put("54 )","multexprprime->* simpleexpr multexprprime");
        lrTable.put("54 ;","multexprprime->* simpleexpr multexprprime");
        lrTable.put("54 then","");
        lrTable.put("54 =","");
        lrTable.put("54 <","multexprprime->* simpleexpr multexprprime");
        lrTable.put("54 >","multexprprime->* simpleexpr multexprprime");
        lrTable.put("54 <=","multexprprime->* simpleexpr multexprprime");
        lrTable.put("54 >=","multexprprime->* simpleexpr multexprprime");
        lrTable.put("54 ==","multexprprime->* simpleexpr multexprprime");
        lrTable.put("54 +","multexprprime->* simpleexpr multexprprime");
        lrTable.put("54 -","multexprprime->* simpleexpr multexprprime");
        lrTable.put("54 *","");
        lrTable.put("54 /","");
        lrTable.put("54 else","");
        lrTable.put("54 $","");
        lrTable.put("54 program","");
        lrTable.put("54 compoundstmt","");
        lrTable.put("54 stmts","");
        lrTable.put("54 stmt","");
        lrTable.put("54 ifstmt ","");
        lrTable.put("54 whilestmt","");
        lrTable.put("54 assgstmt","");
        lrTable.put("54 boolexpr","");
        lrTable.put("54 arithexpr","");
        lrTable.put("54 multexpr","");
        lrTable.put("54 simpleexpr","");
        lrTable.put("54 arithexprprime","");
        lrTable.put("54 multexprprime","");
        lrTable.put("54 boolop","");
        lrTable.put("55 {","");
        lrTable.put("55 }","");
        lrTable.put("55 if","");
        lrTable.put("55 while","");
        lrTable.put("55 ID","");
        lrTable.put("55 NUM","");
        lrTable.put("55 (","");
        lrTable.put("55 )","multexprprime->/ simpleexpr multexprprime");
        lrTable.put("55 ;","multexprprime->/ simpleexpr multexprprime");
        lrTable.put("55 then","");
        lrTable.put("55 =","");
        lrTable.put("55 <","multexprprime->/ simpleexpr multexprprime");
        lrTable.put("55 >","multexprprime->/ simpleexpr multexprprime");
        lrTable.put("55 <=","multexprprime->/ simpleexpr multexprprime");
        lrTable.put("55 >=","multexprprime->/ simpleexpr multexprprime");
        lrTable.put("55 ==","multexprprime->/ simpleexpr multexprprime");
        lrTable.put("55 +","multexprprime->/ simpleexpr multexprprime");
        lrTable.put("55 -","multexprprime->/ simpleexpr multexprprime");
        lrTable.put("55 *","");
        lrTable.put("55 /","");
        lrTable.put("55 else","");
        lrTable.put("55 $","");
        lrTable.put("55 program","");
        lrTable.put("55 compoundstmt","");
        lrTable.put("55 stmts","");
        lrTable.put("55 stmt","");
        lrTable.put("55 ifstmt ","");
        lrTable.put("55 whilestmt","");
        lrTable.put("55 assgstmt","");
        lrTable.put("55 boolexpr","");
        lrTable.put("55 arithexpr","");
        lrTable.put("55 multexpr","");
        lrTable.put("55 simpleexpr","");
        lrTable.put("55 arithexprprime","");
        lrTable.put("55 multexprprime","");
        lrTable.put("55 boolop","");
        lrTable.put("56 {","3");
        lrTable.put("56 }","");
        lrTable.put("56 if","7");
        lrTable.put("56 while","9");
        lrTable.put("56 ID","11");
        lrTable.put("56 NUM","");
        lrTable.put("56 (","");
        lrTable.put("56 )","");
        lrTable.put("56 ;","");
        lrTable.put("56 then","");
        lrTable.put("56 =","");
        lrTable.put("56 <","");
        lrTable.put("56 >","");
        lrTable.put("56 <=","");
        lrTable.put("56 >=","");
        lrTable.put("56 ==","");
        lrTable.put("56 +","");
        lrTable.put("56 -","");
        lrTable.put("56 *","");
        lrTable.put("56 /","");
        lrTable.put("56 else","");
        lrTable.put("56 $","");
        lrTable.put("56 program","");
        lrTable.put("56 compoundstmt","12");
        lrTable.put("56 stmts","");
        lrTable.put("56 stmt","57");
        lrTable.put("56 ifstmt ","6");
        lrTable.put("56 whilestmt","8");
        lrTable.put("56 assgstmt","10");
        lrTable.put("56 boolexpr","");
        lrTable.put("56 arithexpr","");
        lrTable.put("56 multexpr","");
        lrTable.put("56 simpleexpr","");
        lrTable.put("56 arithexprprime","");
        lrTable.put("56 multexprprime","");
        lrTable.put("56 boolop","");
        lrTable.put("57 {","ifstmt->if ( boolexpr ) then stmt else stmt");
        lrTable.put("57 }","ifstmt->if ( boolexpr ) then stmt else stmt");
        lrTable.put("57 if","ifstmt->if ( boolexpr ) then stmt else stmt");
        lrTable.put("57 while","ifstmt->if ( boolexpr ) then stmt else stmt");
        lrTable.put("57 ID","ifstmt->if ( boolexpr ) then stmt else stmt");
        lrTable.put("57 NUM","");
        lrTable.put("57 (","");
        lrTable.put("57 )","");
        lrTable.put("57 ;","");
        lrTable.put("57 then","");
        lrTable.put("57 =","");
        lrTable.put("57 <","");
        lrTable.put("57 >","");
        lrTable.put("57 <=","");
        lrTable.put("57 >=","");
        lrTable.put("57 ==","");
        lrTable.put("57 +","");
        lrTable.put("57 -","");
        lrTable.put("57 *","");
        lrTable.put("57 /","");
        lrTable.put("57 else","ifstmt->if ( boolexpr ) then stmt else stmt");
        lrTable.put("57 $","");
        lrTable.put("57 program","");
        lrTable.put("57 compoundstmt","");
        lrTable.put("57 stmts","");
        lrTable.put("57 stmt","");
        lrTable.put("57 ifstmt ","");
        lrTable.put("57 whilestmt","");
        lrTable.put("57 assgstmt","");
        lrTable.put("57 boolexpr","");
        lrTable.put("57 arithexpr","");
        lrTable.put("57 multexpr","");
        lrTable.put("57 simpleexpr","");
        lrTable.put("57 arithexprprime","");
        lrTable.put("57 multexprprime","");
        lrTable.put("57 boolop","");
//        Workbook wb = null;
//        Sheet sheet;
//        Row row = null;
//        String cellData = null;
//        String currentKey = null;
//
//        try{
//            wb = new XSSFWorkbook(new FileInputStream("d://test//lr.xlsx"));
//
//        }catch (Exception e) {
//            e.printStackTrace();
//        }
//
//        sheet = wb.getSheetAt(0);
//        row = sheet.getRow(0);
//        int rownum = sheet.getPhysicalNumberOfRows();
//        int colnum = row.getPhysicalNumberOfCells();
//
//        for (int i = 1; i<rownum; i++) {
//            row = sheet.getRow(i);
//            if(row !=null){
//                for (int j=1;j<colnum;j++){
//                    cellData = (String) getCellFormatValue(row.getCell(j));
//                    currentKey = (String) getCellFormatValue(sheet.getRow(i).getCell(0))+" "+(String) getCellFormatValue(sheet.getRow(0).getCell(j));
//                    lrTable.put(currentKey,cellData);
//                    System.out.println("lrTable.put(\""+currentKey+"\",\""+cellData+"\");");
//                }
//            }else{
//                break;
//            }
//        }
    }

    private static void LR_Analysis(){

        while (prog.length()!=0){
            String firstToken = getFirstToken(prog);
            String currentKey = stack.peek()+" "+firstToken;
            output = lrTable.get(currentKey);
            if (output.equals("")||output==null){
                prog.insert(0,";");
                currentKey = stack.peek()+" "+getFirstToken(prog);
                output = lrTable.get(currentKey);
                System.out.println("语法错误，第4行，缺少\";\"");
            }
            if (!output.equals("acc")&&output.charAt(0)>='a'&&output.charAt(0)<='z'){
                product.push(output);
            }
            if (output.contains("->")){
                String[] splitOutput = output.split("->");
                if (splitOutput[1].equals("E")){
                    String key = stack.peek()+" "+splitOutput[0];
                    stack.push(splitOutput[0]);
                    stack.push(lrTable.get(key));
                }else {
                    String[] splitOutputRight = splitOutput[1].split(" ");
                    Stack<String> stack1 = new Stack<>();
                    for (int i=0;i<splitOutputRight.length;i++){
                        stack1.push(splitOutputRight[i]);
                    }
                    while (!stack1.empty()){
                        while (!stack.peek().equals(stack1.peek())){
                            stack.pop();
                        }
                        stack.pop();
                        stack1.pop();
                    }
                    String key = stack.peek()+" "+splitOutput[0];
                    stack.push(splitOutput[0]);
                    stack.push(lrTable.get(key));
                }
            }else if (output.equals("acc")){
                break;
            } else {
                stack.push(firstToken);
                prog.delete(0,firstToken.length());
                while (prog.charAt(0)==' '||prog.charAt(0)=='\t'||prog.charAt(0)=='\n'){
                    prog.delete(0,1);
                }
                firstToken = getFirstToken(prog);
                stack.push(output);
            }
        }
    }

    private static void print(){

        System.out.println(product.peek().substring(0,product.peek().indexOf("->"))+" => ");
        System.out.println(product.peek().substring(product.peek().indexOf(">")+1)+" => ");

        //right side
        String[] productRight = product.peek().substring(product.peek().indexOf(">")+1).split(" ");

        String currentPrint = new String();
        String[] currentSplitPrint = new String[]{};
        product.pop();

        while (!product.empty()){
            int index = 0;
            for (int j=productRight.length-1;j>=0;j--){
                if (productRight[j].equals(product.peek().substring(0,product.peek().indexOf("->")))){
                    index = j;
                    break;
                }
            }
            for (int j=0;j<productRight.length;j++){
                if (j==index){
                    productRight[j] = product.peek().substring(product.peek().indexOf(">")+1);
                    if (!productRight[j].equals("E")){
                        currentPrint = currentPrint + productRight[j] + " ";
                    }
                }else {
                    if (!productRight[j].equals("E")){
                        currentPrint = currentPrint + productRight[j] + " ";
                    }
                }
            }
            productRight = currentPrint.split(" ");
            for (int n=0;n<productRight.length;n++){
                System.out.print(productRight[n]+" ");
            }

            product.pop();
            if (!product.empty()){
                currentPrint = "";
                System.out.println("=> ");
            }
        }
    }

//    public static Object getCellFormatValue(Cell cell){
//        Object cellValue = null;
//        if(cell!=null){
//            switch(cell.getCellType()){
//                case NUMERIC:{
//                    cellValue = String.valueOf((int) cell.getNumericCellValue());
//                    break;
//                }
//                case FORMULA:{
//                    if(DateUtil.isCellDateFormatted(cell)){
//                        cellValue = cell.getDateCellValue();
//                    }else{
//                        cellValue = String.valueOf(cell.getNumericCellValue());
//                    }
//                    break;
//                }
//                case STRING:{
//                    cellValue = cell.getRichStringCellValue().getString();
//                    break;
//                }
//                default:
//                    cellValue = "";
//            }
//        }else{
//            cellValue = "";
//        }
//        return cellValue;
//    }

    private static String getFirstToken(StringBuffer p){

        StringBuffer token = new StringBuffer();
        int index = 0;

        while (index<p.length()){
            while (p.charAt(index)==' '||p.charAt(index)=='\t'||p.charAt(index)=='\n'){
                index++;
            }
            token.append(p.charAt(index));
            index++;
            for (int i = 0; i<reservedWord.length;i++){
                if (token.toString().equals(reservedWord[i])){
                    if (index<p.length()-1&&(p.charAt(index-1)=='='||p.charAt(index-1)=='<'||p.charAt(index-1)=='>')&&p.charAt(index)=='='){
                        token.append(p.charAt(index));
                        index++;
                    }
                    else { return token.toString(); }
                }
            }
        }
        return "(Error:"+token.toString()+")";
    }

    private static void analysis()
    {
        read_prog();
        //System.out.print(prog);
    }

    public static void main(String[] args) {
        analysis();
        init();
        LR_Analysis();
        print();
    }
}
