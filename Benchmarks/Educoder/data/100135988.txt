package case1;

import java.util.Scanner;

public class Task1 {
	public static void main(String[] args) {
	Scanner in=new Scanner(System.in );
		Dog d=new Dog();
		d.name=in.next();
		d.sex=in.next();
		d.color=in.next();
		
		Cat c=new Cat();
		c.name =in.next();
		c.sex=in.next();
		c.weight=in.nextDouble();
		d.Test(d.name ,d.sex,d.color);
		d.talk();
		d.eat();
		c.Test(c.name ,c.sex,c.weight);
		c.talk();
		c.eat();
	}
}
	
		// 通过有参构造函数实例化Dog类对象dog
		// dog调用talk()方法
		// dog调用eat()方法
		/********* begin *********/

      
		
		/********* end *********/
		// 通过有参构造函数实例化Cat类对象cat
		// cat调用talk()方法
		// cat调用eat()方法
		/********* begin *********/
		


		/********* end *********/


// 抽象类Pet 封装属性name和sex
// 构造函数初始化name和sex
// 声明抽象方法talk()
// 声明抽象方法eat()
abstract class Pet {
	/********* begin *********/
    public String name;
	public String sex;
	public abstract void talk();
	public abstract void eat();
}

// Dog类继承自Pet类 封装属性color
// 构造函数初始化name、sex和color
// 实现自己的talk()方法和eat()方法
// talk()输出'名称：name，性别：sex，颜色：color，汪汪叫'
// eat()输出'name吃骨头'
class Dog extends Pet {
	/********* begin *********/
	public void talk(){
		System.out.println("，汪汪叫");
	}
	public void eat(){
		System.out.println(name+"吃骨头！");
	}
	public String color;
	public void Test(String name,String sex,String color){
		System.out.print("名称："+name+"，性别："+sex+"，颜色："+color);
	}
    /********* end *********/
}

// Cat类继承自Pet类 封装属性weight
// 构造函数初始化name、sex和weight
// 实现自己的talk()方法和eat()方法
// talk()输出'名称：name，性别：sex，体重：weight kg，喵喵叫'
// eat()输出'name吃鱼'
class Cat extends Pet {
	/********* begin *********/
    public void talk(){
		System.out.println("kg，喵喵叫");
	}
	public void eat(){
		System.out.println(name+"吃鱼！");
	}
	public double weight;
	public void Test(String name,String sex,Double weight){
		System.out.print("名称："+name+"，性别："+sex+"，体重："+weight);
	}
	/********* end *********/
}