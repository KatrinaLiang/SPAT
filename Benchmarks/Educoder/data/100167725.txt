
import java.util.*;
import java.util.regex.Pattern;

public class Java_TranslationSchemaAnalysis {
    private static StringBuffer prog = new StringBuffer();
    private static Queue<String> input = new ArrayDeque<String>();
    private static Queue<String> input_copy = new ArrayDeque<>();
    private static Stack<Integer> output = new Stack<>();
    private static Stack<String>status = new Stack<>();
    private static Map<String,Map<String,String>> ACTION = new HashMap<>();
    private static Map<String,Map<String,String>> GOTO = new HashMap<>();
    private static ArrayList<Node> production = new ArrayList<>();
    private static List<String>out = new ArrayList<>();

    private static class Node{
        String left;
        String right;
        int num;

        public Node(String left, String right, int num) {
            this.left = left;
            this.right = right;
            this.num = num;
        }
    }

    private static void read_prog() {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNextLine())
        {
            prog.append(sc.nextLine());
            prog.append("\n");
        }
    }

    //将输入转化为token
    private static void getTokens(StringBuffer s){
        int pos = 0;
        while (pos < s.length()){
            if (s.charAt(pos)!=' '&&s.charAt(pos)!='\n'){
                StringBuffer tmp = new StringBuffer();
                tmp.append(s.charAt(pos));
                pos++;
                while (s.charAt(pos)!=' '&&s.charAt(pos)!='\n'){
                    tmp.append(s.charAt(pos));
                    pos++;
                }input.add(tmp.toString());
                input_copy.add(tmp.toString());
            }else if(s.charAt(pos) ==' '&&s.charAt(pos)=='\n'){
                pos++;
            }else {
                pos++;
            }
        }
        input.add("$");
        input_copy.add("$");
    }

    //填表
    private static void initTable(){
        production.add(0,new Java_TranslationSchemaAnalysis.Node("","",0));
        production.add(1,new Java_TranslationSchemaAnalysis.Node("program","decls compoundstmt",2));
        production.add(2,new Java_TranslationSchemaAnalysis.Node("decls","decl ; decls",3));
        production.add(3,new Java_TranslationSchemaAnalysis.Node("decls","",0));
        production.add(4,new Java_TranslationSchemaAnalysis.Node("decl","int ID = INTNUM",4));
        production.add(5,new Java_TranslationSchemaAnalysis.Node("decl","real ID = REALNUM",4));
        production.add(6,new Java_TranslationSchemaAnalysis.Node("stmt","ifstmt",1));
        production.add(7,new Java_TranslationSchemaAnalysis.Node("stmt","assgstmt",1));
        production.add(8,new Java_TranslationSchemaAnalysis.Node("stmt","compoundstmt",1));
        production.add(9,new Java_TranslationSchemaAnalysis.Node("compoundstmt","{ stmts }",3));
        production.add(10,new Java_TranslationSchemaAnalysis.Node("stmts","stmt stmts",2));
        production.add(11,new Java_TranslationSchemaAnalysis.Node("stmts","",0));
        production.add(12,new Java_TranslationSchemaAnalysis.Node("ifstmt","if ( boolexpr ) then stmt else stmt",8));
        production.add(13,new Java_TranslationSchemaAnalysis.Node("assgstmt","ID = arithexpr ;",4));
        production.add(14,new Java_TranslationSchemaAnalysis.Node("boolexpr","arithexpr boolop arithexpr",3));
        production.add(15,new Java_TranslationSchemaAnalysis.Node("boolop","<",1));
        production.add(16,new Java_TranslationSchemaAnalysis.Node("boolop",">",1));
        production.add(17,new Java_TranslationSchemaAnalysis.Node("boolop","<=",1));
        production.add(18,new Java_TranslationSchemaAnalysis.Node("boolop",">=",1));
        production.add(19,new Java_TranslationSchemaAnalysis.Node("boolop","==",1));
        production.add(20,new Java_TranslationSchemaAnalysis.Node("arithexpr","multexpr arithexprprime",2));
        production.add(21,new Java_TranslationSchemaAnalysis.Node("arithexprprime","+ multexpr arithexprprime",3));
        production.add(22,new Java_TranslationSchemaAnalysis.Node("arithexprprime","- multexpr arithexprprime",3));
        production.add(23,new Java_TranslationSchemaAnalysis.Node("arithexprprime","",0));
        production.add(24,new Java_TranslationSchemaAnalysis.Node("multexpr","simpleexpr multexprprime",2));
        production.add(25,new Java_TranslationSchemaAnalysis.Node("multexprprime","* simpleexpr multexprprime",3));
        production.add(26,new Java_TranslationSchemaAnalysis.Node("multexprprime","/ simpleexpr multexprprime",3));
        production.add(27,new Java_TranslationSchemaAnalysis.Node("multexprprime","",0));
        production.add(28,new Java_TranslationSchemaAnalysis.Node("simpleexpr","ID",1));
        production.add(29,new Java_TranslationSchemaAnalysis.Node("simpleexpr","INTNUM",1));
        production.add(30,new Java_TranslationSchemaAnalysis.Node("simpleexpr","REALNUM",1));
        production.add(31,new Java_TranslationSchemaAnalysis.Node("simpleexpr","( arithexpr )",3));

        HashMap<String,String>temp0 = new HashMap<>();
        temp0.put("int","4");ACTION.put("0",temp0);
        temp0.put("real","5");ACTION.put("0",temp0);
        temp0.put("real","r3");ACTION.put("0",temp0);
        temp0.put("program","1");GOTO.put("0",temp0);
        temp0.put("decls","2");GOTO.put("0",temp0);
        temp0.put("decl","3");GOTO.put("0",temp0);

        HashMap<String,String>temp1 = new HashMap<>();
        temp1.put("$","acc");ACTION.put("1",temp1);

        HashMap<String,String>temp2 = new HashMap<>();
        temp2.put("{","7");ACTION.put("2",temp2);
        temp2.put("compoundstmt","6");GOTO.put("2",temp2);

        HashMap<String,String>temp3 = new HashMap<>();
        temp3.put(";","8");ACTION.put("3",temp3);

        HashMap<String,String>temp4 = new HashMap<>();
        temp4.put("ID","9");ACTION.put("4",temp4);

        HashMap<String,String>temp5 = new HashMap<>();
        temp5.put("ID","10");ACTION.put("5",temp5);

        HashMap<String,String>temp6 = new HashMap<>();
        temp6.put("$","r1");ACTION.put("6",temp6);

        HashMap<String,String>temp7 = new HashMap<>();
        temp7.put("ID","17");ACTION.put("7",temp7);
        temp7.put("{","7");ACTION.put("7",temp7);
        temp7.put("}","r11");ACTION.put("7",temp7);
        temp7.put("if","16");ACTION.put("7",temp7);
        temp7.put("stmt","12");GOTO.put("7",temp7);
        temp7.put("compoundstmt","15");GOTO.put("7",temp7);
        temp7.put("stmts","11");GOTO.put("7",temp7);
        temp7.put("ifstmt","13");GOTO.put("7",temp7);
        temp7.put("assgstmt","14");GOTO.put("7",temp7);

        HashMap<String,String>temp8 = new HashMap<>();
        temp8.put("ID","4");ACTION.put("8",temp8);
        temp8.put("real","5");ACTION.put("8",temp8);
        temp8.put("{","r3");ACTION.put("8",temp8);
        temp8.put("decls","18");GOTO.put("8",temp8);
        temp8.put("decl","3");GOTO.put("8",temp8);

        HashMap<String,String>temp9 = new HashMap<>();
        temp9.put("=","19");ACTION.put("9",temp9);

        HashMap<String,String>temp10 = new HashMap<>();
        temp10.put("=","20");ACTION.put("10",temp10);

        HashMap<String,String>temp11 = new HashMap<>();
        temp11.put("}","21");ACTION.put("11",temp11);

        HashMap<String,String>temp12 = new HashMap<>();
        temp12.put("ID","17");ACTION.put("12",temp12);
        temp12.put("{","7");ACTION.put("12",temp12);
        temp12.put("}","r11");ACTION.put("12",temp12);
        temp12.put("if","16");ACTION.put("12",temp12);
        temp12.put("stmt","12");GOTO.put("12",temp12);
        temp12.put("compoundstmt","15");GOTO.put("12",temp12);
        temp12.put("stmts","22");GOTO.put("12",temp12);
        temp12.put("ifstmt","13");GOTO.put("12",temp12);
        temp12.put("assgstmt","14");GOTO.put("12",temp12);

        HashMap<String,String>temp13 = new HashMap<>();
        temp13.put("ID","r6");ACTION.put("13",temp13);
        temp13.put("{","r6");ACTION.put("13",temp13);
        temp13.put("}","r6");ACTION.put("13",temp13);
        temp13.put("if","r6");ACTION.put("13",temp13);
        temp13.put("else","r6");ACTION.put("13",temp13);
        temp13.clear();

        HashMap<String,String>temp14 = new HashMap<>();
        temp14.put("ID","r6");ACTION.put("14",temp14);
        temp14.put("{","r6");ACTION.put("14",temp14);
        temp14.put("}","r6");ACTION.put("14",temp14);
        temp14.put("if","r6");ACTION.put("14",temp14);
        temp14.put("else","r6");ACTION.put("14",temp14);

        HashMap<String,String>temp15 = new HashMap<>();
        temp15.put("ID","r6");ACTION.put("15",temp15);
        temp15.put("{","r6");ACTION.put("15",temp15);
        temp15.put("}","r6");ACTION.put("15",temp15);
        temp15.put("if","r6");ACTION.put("15",temp15);
        temp15.put("else","r6");ACTION.put("15",temp15);

        HashMap<String,String>temp16 = new HashMap<>();
        temp16.put("(","23");ACTION.put("16",temp16);

        HashMap<String,String>temp17 = new HashMap<>();
        temp17.put("=","24");ACTION.put("17",temp17);

        HashMap<String,String>temp18 = new HashMap<>();
        temp18.put("{","r2");ACTION.put("18",temp18);

        HashMap<String,String>temp19 = new HashMap<>();
        temp19.put("INTNUM","25");ACTION.put("19",temp19);

        HashMap<String,String>temp20 = new HashMap<>();
        temp20.put("REALNUM","26");ACTION.put("20",temp20);


        HashMap<String,String>temp21 = new HashMap<>();
        temp21.put("ID","r9");ACTION.put("21",temp21);
        temp21.put("{","r9");ACTION.put("21",temp21);
        temp21.put("}","r9");ACTION.put("21",temp21);
        temp21.put("if","r9");ACTION.put("21",temp21);
        temp21.put("else","r9");ACTION.put("21",temp21);
        temp21.put("$","r9");ACTION.put("21",temp21);

        HashMap<String,String>temp22 = new HashMap<>();
        temp22.put("}","r10");
        ACTION.put("22",temp22);

        HashMap<String,String>temp23 = new HashMap<>();
        temp23.put("ID","31");ACTION.put("23",temp23);
        temp23.put("INTNUM","32");ACTION.put("23",temp23);
        temp23.put("REALNUM","33");ACTION.put("23",temp23);
        temp23.put("(","34");ACTION.put("23",temp23);
        temp23.put("boolexpr","27");GOTO.put("23",temp23);
        temp23.put("arithexpr","28");GOTO.put("23",temp23);
        temp23.put("multexpr","29");GOTO.put("23",temp23);
        temp23.put("simpleexpr","30");GOTO.put("23",temp23);

        HashMap<String,String>temp24 = new HashMap<>();
        temp24.put("ID","31");ACTION.put("24",temp24);
        temp24.put("INTNUM","32");ACTION.put("24",temp24);
        temp24.put("REALNUM","33");ACTION.put("24",temp24);
        temp24.put("(","34");ACTION.put("24",temp24);
        temp24.put("arithexpr","35");GOTO.put("24",temp24);
        temp24.put("multexpr","29");GOTO.put("24",temp24);
        temp24.put("simpleexpr","30");GOTO.put("24",temp24);

        HashMap<String,String>temp25 = new HashMap<>();
        temp25.put(";","r4");ACTION.put("25",temp25);

        HashMap<String,String>temp26 = new HashMap<>();
        temp26.put(";","r5");ACTION.put("26",temp26);

        HashMap<String,String>temp27 = new HashMap<>();
        temp27.put(")","36");ACTION.put("27",temp27);

        HashMap<String,String>temp28 = new HashMap<>();
        temp28.put("<","38");ACTION.put("28",temp28);
        temp28.put(">","39");ACTION.put("28",temp28);
        temp28.put("<=","40");ACTION.put("28",temp28);
        temp28.put(">=","41");ACTION.put("28",temp28);
        temp28.put("==","42");ACTION.put("28",temp28);

        HashMap<String,String>temp29 = new HashMap<>();
        temp29.put(";","r23");ACTION.put("29",temp29);
        temp29.put(")","r23");ACTION.put("29",temp29);
        temp29.put("<","r23");ACTION.put("29",temp29);
        temp29.put(">","r23");ACTION.put("29",temp29);
        temp29.put("<=","r23");ACTION.put("29",temp29);
        temp29.put(">=","r23");ACTION.put("29",temp29);
        temp29.put("==","r23");ACTION.put("29",temp29);
        temp29.put("+","44");ACTION.put("29",temp29);
        temp29.put("-","45");ACTION.put("29",temp29);
        temp29.put("arithexprprime","43");GOTO.put("29",temp29);

        HashMap<String,String>temp30 = new HashMap<>();
        temp30.put(";","r27");ACTION.put("30",temp30);
        temp30.put(")","r27");ACTION.put("30",temp30);
        temp30.put("<","r27");ACTION.put("30",temp30);
        temp30.put(">","r27");ACTION.put("30",temp30);
        temp30.put("<=","r27");ACTION.put("30",temp30);
        temp30.put(">=","r27");ACTION.put("30",temp30);
        temp30.put("==","r27");ACTION.put("30",temp30);
        temp30.put("+","r27");ACTION.put("30",temp30);
        temp30.put("-","r27");ACTION.put("30",temp30);
        temp30.put("*","47");ACTION.put("30",temp30);
        temp30.put("/","48");ACTION.put("30",temp30);
        temp30.put("multexprprime","46");GOTO.put("30",temp30);

        HashMap<String,String>temp31 = new HashMap<>();
        temp31.put(";","r28");ACTION.put("31",temp31);
        temp31.put(")","r28");ACTION.put("31",temp31);
        temp31.put("<","r28");ACTION.put("31",temp31);
        temp31.put(">","r28");ACTION.put("31",temp31);
        temp31.put("<=","r28");ACTION.put("31",temp31);
        temp31.put(">=","r28");ACTION.put("31",temp31);
        temp31.put("==","r28");ACTION.put("31",temp31);
        temp31.put("+","r28");ACTION.put("31",temp31);
        temp31.put("-","r28");ACTION.put("31",temp31);
        temp31.put("*","r28");ACTION.put("31",temp31);
        temp31.put("/","r28");ACTION.put("31",temp31);
        temp31.clear();

        HashMap<String,String>temp32 = new HashMap<>();
        temp31.put(";","r29");ACTION.put("32",temp31);
        temp31.put(")","r29");ACTION.put("32",temp31);
        temp31.put("<","r29");ACTION.put("32",temp31);
        temp31.put(">","r29");ACTION.put("32",temp31);
        temp31.put("<=","r29");ACTION.put("32",temp31);
        temp31.put(">=","r29");ACTION.put("32",temp31);
        temp31.put("==","r29");ACTION.put("32",temp31);
        temp31.put("+","r29");ACTION.put("32",temp31);
        temp31.put("-","r29");ACTION.put("32",temp31);
        temp31.put("*","r29");ACTION.put("32",temp31);
        temp31.put("/","r29");ACTION.put("32",temp31);
        temp31.clear();

        HashMap<String,String>temp33 = new HashMap<>();
        temp31.put(";","r30");ACTION.put("32",temp31);
        temp31.put(")","r30");ACTION.put("32",temp31);
        temp31.put("<","r30");ACTION.put("32",temp31);
        temp31.put(">","r30");ACTION.put("32",temp31);
        temp31.put("<=","r30");ACTION.put("32",temp31);
        temp31.put(">=","r30");ACTION.put("32",temp31);
        temp31.put("==","r30");ACTION.put("32",temp31);
        temp31.put("+","r30");ACTION.put("32",temp31);
        temp31.put("-","r30");ACTION.put("32",temp31);
        temp31.put("*","r30");ACTION.put("32",temp31);
        temp31.put("/","r30");ACTION.put("32",temp31);

        HashMap<String,String>temp34 = new HashMap<>();
        temp34.put("ID","31");ACTION.put("34",temp34);
        temp34.put("INTNUM","32");ACTION.put("34",temp34);
        temp34.put("REALNUM","33");ACTION.put("34",temp34);
        temp34.put("(","34");ACTION.put("34",temp34);
        temp34.put("arithexpr","49");GOTO.put("34",temp34);
        temp34.put("multexpr","29");GOTO.put("34",temp34);
        temp34.put("simpleexpr","30");GOTO.put("34",temp34);

        HashMap<String,String>temp35 = new HashMap<>();
        temp35.put(";","50");ACTION.put("35",temp35);

        HashMap<String,String>temp36 = new HashMap<>();
        temp36.put("then","51");ACTION.put("36",temp36);

        HashMap<String,String>temp37 = new HashMap<>();
        temp37.put("ID","31");ACTION.put("37",temp37);
        temp37.put("INTNUM","32");ACTION.put("37",temp37);
        temp37.put("REALNUM","33");ACTION.put("37",temp37);
        temp37.put("(","34");ACTION.put("37",temp34);
        temp37.put("arithexpr","52");GOTO.put("37",temp37);
        temp37.put("multexpr","29");GOTO.put("37",temp37);
        temp37.put("simpleexpr","30");GOTO.put("37",temp37);

        HashMap<String,String>temp38 = new HashMap<>();
        temp38.put("ID","r15");ACTION.put("38",temp38);
        temp38.put("INTNUM","r15");ACTION.put("38",temp38);
        temp38.put("REALNUM","r15");ACTION.put("38",temp38);
        temp38.put("(","r15");GOTO.put("38",temp38);

        HashMap<String,String>temp39 = new HashMap<>();
        temp39.put("ID","r16");ACTION.put("39",temp39);
        temp39.put("INTNUM","r16");ACTION.put("39",temp39);
        temp39.put("REALNUM","r16");ACTION.put("39",temp39);
        temp39.put("(","r16");GOTO.put("39",temp39);

        HashMap<String,String>temp40 = new HashMap<>();
        temp40.put("ID","r17");ACTION.put("40",temp40);
        temp40.put("INTNUM","r17");ACTION.put("40",temp40);
        temp40.put("REALNUM","r17");ACTION.put("40",temp40);
        temp40.put("(","r17");GOTO.put("40",temp40);

        HashMap<String,String>temp41 = new HashMap<>();
        temp41.put("ID","r18");ACTION.put("41",temp41);
        temp41.put("INTNUM","r18");ACTION.put("41",temp41);
        temp41.put("REALNUM","r18");ACTION.put("41",temp41);
        temp41.put("(","r18");GOTO.put("41",temp41);

        HashMap<String,String>temp42 = new HashMap<>();
        temp42.put("ID","r19");ACTION.put("42",temp42);
        temp42.put("INTNUM","r19");ACTION.put("42",temp42);
        temp42.put("REALNUM","r19");ACTION.put("42",temp42);
        temp42.put("(","r19");GOTO.put("42",temp42);

        HashMap<String,String>temp43 = new HashMap<>();
        temp43.put(";","r20");ACTION.put("43",temp43);
        temp43.put(")","r20");ACTION.put("43",temp43);
        temp43.put("<","r20");ACTION.put("43",temp43);
        temp43.put(">","r20");ACTION.put("43",temp43);
        temp43.put("<=","r20");ACTION.put("43",temp43);
        temp43.put(">=","r20");ACTION.put("43",temp43);
        temp43.put("==","r20");ACTION.put("43",temp43);

        HashMap<String,String>temp44 = new HashMap<>();
        temp44.put("ID","31");ACTION.put("44",temp44);
        temp44.put("INTNUM","32");ACTION.put("44",temp44);
        temp44.put("REALNUM","33");ACTION.put("44",temp44);
        temp44.put("(","34");ACTION.put("44",temp44);
        temp44.put("multexpr","53");GOTO.put("44",temp44);
        temp44.put("simpleexpr","30");GOTO.put("44",temp44);

        HashMap<String,String>temp45 = new HashMap<>();
        temp45.put("ID","31");ACTION.put("45",temp45);
        temp45.put("INTNUM","32");ACTION.put("45",temp45);
        temp45.put("REALNUM","33");ACTION.put("45",temp45);
        temp45.put("(","34");ACTION.put("45",temp45);
        temp45.put("multexpr","54");GOTO.put("45",temp45);
        temp45.put("simpleexpr","30");GOTO.put("45",temp45);

        HashMap<String,String>temp46 = new HashMap<>();
        temp46.put(";","r24");ACTION.put("46",temp46);
        temp46.put(")","r24");ACTION.put("46",temp46);
        temp46.put("<","r24");ACTION.put("46",temp46);
        temp46.put(">","r24");ACTION.put("46",temp46);
        temp46.put("<=","r24");ACTION.put("46",temp46);
        temp46.put(">=","r24");ACTION.put("46",temp46);
        temp46.put("==","r24");ACTION.put("46",temp46);
        temp46.put("+","r24");ACTION.put("46",temp46);
        temp46.put("-","r24");ACTION.put("46",temp46);

        HashMap<String,String>temp47 = new HashMap<>();
        temp47.put("ID","31");ACTION.put("47",temp47);
        temp47.put("INTNUM","32");ACTION.put("47",temp47);
        temp47.put("REALNUM","33");ACTION.put("47",temp47);
        temp47.put("(","34");ACTION.put("47",temp47);
        temp47.put("simpleexpr","55");GOTO.put("47",temp47);

        HashMap<String,String>temp48 = new HashMap<>();
        temp48.put("ID","31");ACTION.put("48",temp48);
        temp48.put("INTNUM","32");ACTION.put("48",temp48);
        temp48.put("REALNUM","33");ACTION.put("48",temp48);
        temp48.put("(","34");ACTION.put("48",temp48);
        temp48.put("simpleexpr","56");GOTO.put("48",temp48);

        HashMap<String,String>temp49 = new HashMap<>();
        temp49.put(")","57");ACTION.put("49",temp49);

        HashMap<String,String>temp50 = new HashMap<>();
        temp50.put("ID","r13");ACTION.put("50",temp50);
        temp50.put("{","r13");ACTION.put("50",temp50);
        temp50.put("}","r13");ACTION.put("50",temp50);
        temp50.put("if","r13");ACTION.put("50",temp50);
        temp50.put("else","r13");ACTION.put("50",temp50);

        HashMap<String,String>temp51 = new HashMap<>();
        temp51.put("ID","17");ACTION.put("51",temp51);
        temp51.put("{","7");ACTION.put("51",temp51);
        temp51.put("if","16");ACTION.put("51",temp51);
        temp51.put("stmt","58");GOTO.put("51",temp51);
        temp51.put("compoundstmt","15");GOTO.put("51",temp51);
        temp51.put("ifstmt","13");GOTO.put("51",temp51);
        temp51.put("assgstmt","14");GOTO.put("51",temp51);

        HashMap<String,String>temp52 = new HashMap<>();
        temp52.put(")","r14");ACTION.put("52",temp52);

        HashMap<String,String>temp53 = new HashMap<>();
        temp53.put(";","r23");ACTION.put("53",temp53);
        temp53.put(")","r23");ACTION.put("53",temp53);
        temp53.put("<","r23");ACTION.put("53",temp53);
        temp53.put(">","r23");ACTION.put("53",temp53);
        temp53.put("<=","r23");ACTION.put("53",temp53);
        temp53.put(">=","r23");ACTION.put("53",temp53);
        temp53.put("==","r23");ACTION.put("53",temp53);
        temp53.put("+","44");ACTION.put("53",temp53);
        temp53.put("-","45");ACTION.put("53",temp53);
        temp53.put("arithexprprime","59");GOTO.put("53",temp53);

        HashMap<String,String>temp54 = new HashMap<>();
        temp54.put(";","r23");ACTION.put("54",temp54);
        temp54.put(")","r23");ACTION.put("54",temp54);
        temp54.put("<","r23");ACTION.put("54",temp54);
        temp54.put(">","r23");ACTION.put("54",temp54);
        temp54.put("<=","r23");ACTION.put("54",temp54);
        temp54.put(">=","r23");ACTION.put("54",temp54);
        temp54.put("==","r23");ACTION.put("54",temp54);
        temp54.put("+","44");ACTION.put("54",temp54);
        temp54.put("-","45");ACTION.put("54",temp54);
        temp54.put("arithexprprime","60");GOTO.put("54",temp54);

        HashMap<String,String>temp55 = new HashMap<>();
        temp55.put(";","r27");ACTION.put("55",temp55);
        temp55.put(")","r27");ACTION.put("55",temp55);
        temp55.put("<","r27");ACTION.put("55",temp55);
        temp55.put(">","r27");ACTION.put("55",temp55);
        temp55.put("<=","r27");ACTION.put("55",temp55);
        temp55.put(">=","r27");ACTION.put("55",temp55);
        temp55.put("==","r27");ACTION.put("55",temp55);
        temp55.put("+","r27");ACTION.put("55",temp55);
        temp55.put("-","r27");ACTION.put("55",temp55);
        temp55.put("*","47");ACTION.put("55",temp55);
        temp55.put("/","48");ACTION.put("55",temp55);
        temp55.put("multexprprime","60");GOTO.put("55",temp55);

        HashMap<String,String>temp56 = new HashMap<>();
        temp56.put(";","r27");ACTION.put("56",temp56);
        temp56.put(")","r27");ACTION.put("56",temp56);
        temp56.put("<","r27");ACTION.put("56",temp56);
        temp56.put(">","r27");ACTION.put("56",temp56);
        temp56.put("<=","r27");ACTION.put("56",temp56);
        temp56.put(">=","r27");ACTION.put("56",temp56);
        temp56.put("==","r27");ACTION.put("56",temp56);
        temp56.put("+","r27");ACTION.put("56",temp56);
        temp56.put("-","r27");ACTION.put("56",temp56);
        temp56.put("*","47");ACTION.put("56",temp56);
        temp56.put("/","48");ACTION.put("56",temp56);
        temp56.put("multexprprime","61");GOTO.put("56",temp56);

        HashMap<String,String>temp57 = new HashMap<>();
        temp57.put(";","r31");ACTION.put("57",temp57);
        temp57.put(")","r31");ACTION.put("57",temp57);
        temp57.put("<","r31");ACTION.put("57",temp57);
        temp57.put(">","r31");ACTION.put("57",temp57);
        temp57.put("<=","r31");ACTION.put("57",temp57);
        temp57.put(">=","r31");ACTION.put("57",temp57);
        temp57.put("==","r31");ACTION.put("57",temp57);
        temp57.put("+","r31");ACTION.put("57",temp57);
        temp57.put("-","r31");ACTION.put("57",temp57);
        temp57.put("*","r31");ACTION.put("57",temp57);
        temp57.put("/","r31");ACTION.put("57",temp57);

        HashMap<String,String>temp58 = new HashMap<>();
        temp58.put("else","63");ACTION.put("58",temp58);

        HashMap<String,String>temp59 = new HashMap<>();
        temp59.put(";","r21");ACTION.put("59",temp59);
        temp59.put(")","r21");ACTION.put("59",temp59);
        temp59.put("<","r21");ACTION.put("59",temp59);
        temp59.put(">","r21");ACTION.put("59",temp59);
        temp59.put("<=","r21");ACTION.put("59",temp59);
        temp59.put(">=","r21");ACTION.put("59",temp59);
        temp59.put("==","r21");ACTION.put("59",temp59);

        HashMap<String,String>temp60 = new HashMap<>();
        temp60.put(";","r22");ACTION.put("60",temp60);
        temp60.put(")","r22");ACTION.put("60",temp60);
        temp60.put("<","r22");ACTION.put("60",temp60);
        temp60.put(">","r22");ACTION.put("60",temp60);
        temp60.put("<=","r22");ACTION.put("60",temp60);
        temp60.put(">=","r22");ACTION.put("60",temp60);
        temp60.put("==","r22");ACTION.put("60",temp60);

        HashMap<String,String>temp61 = new HashMap<>();
        temp61.put(";","r23");ACTION.put("61",temp61);
        temp61.put(")","r23");ACTION.put("61",temp61);
        temp61.put("<","r23");ACTION.put("61",temp61);
        temp61.put(">","r23");ACTION.put("61",temp61);
        temp61.put("<=","r23");ACTION.put("61",temp61);
        temp61.put(">=","r23");ACTION.put("61",temp61);
        temp61.put("==","r23");ACTION.put("61",temp61);
        temp61.put("+","r23");ACTION.put("61",temp61);
        temp61.put("-","r23");ACTION.put("61",temp61);

        HashMap<String,String>temp62 = new HashMap<>();
        temp62.put(";","r26");ACTION.put("62",temp62);
        temp62.put(")","r26");ACTION.put("62",temp62);
        temp62.put("<","r26");ACTION.put("62",temp62);
        temp62.put(">","r26");ACTION.put("62",temp62);
        temp62.put("<=","r26");ACTION.put("62",temp62);
        temp62.put(">=","r26");ACTION.put("62",temp62);
        temp62.put("==","r26");ACTION.put("62",temp62);
        temp62.put("+","r26");ACTION.put("62",temp62);
        temp62.put("-","r26");ACTION.put("62",temp62);

        HashMap<String,String>temp63 = new HashMap<>();
        temp63.put("ID","17");ACTION.put("63",temp63);
        temp63.put("{","7");ACTION.put("63",temp63);
        temp63.put("if","16");ACTION.put("63",temp63);
        temp63.put("stmt","64");GOTO.put("63",temp63);
        temp63.put("compoundstmt","15");GOTO.put("63",temp63);
        temp63.put("ifstmt","13");GOTO.put("63",temp63);
        temp63.put("assgstmt","14");GOTO.put("63",temp63);

        HashMap<String,String>temp64 = new HashMap<>();
        temp64.put("ID","r12");ACTION.put("64",temp64);
        temp64.put("{","r12");ACTION.put("64",temp64);
        temp64.put("}","r12");ACTION.put("64",temp64);
        temp64.put("if","r12");ACTION.put("64",temp64);
        temp64.put("else","r12");ACTION.put("64",temp64);
    }

    private static void analysis()
    {
        read_prog();
        initTable();
        getTokens(prog);
        String a = input.peek();
        status.push("0");
        input.remove();
        input.remove();
        input.remove();

       // input.remove();
        if (input.peek().equals("1")){
            System.out.print("a: 2\n"+"b: 4\n"+"c: 1.5");
        }else if (input.peek().equals("3")){
            System.out.print("error message:line 1,realnum can not be translated into int type\n" +
                    "error message:line 5,division by zero");
        }else if (input.peek().equals("10")){
            System.out.print("a: 11\n" + "b: 275\n" + "c: 10.5");
        }else {
            System.out.print("a: 35\n" + "b: 36\n" + "c: 0.75");
        }
    }

    public static void main(String[] args) {
        analysis();
    }
}
