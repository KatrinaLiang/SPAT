package step2;

import java.util.NoSuchElementException;

/**
 * Created by sykus on 2017/12/29.
 */
public class MyStack<E> {

    private Node<E> head;//头结点
    private Node<E> top;//栈顶
    private int size;//栈中元素个数

    public MyStack() {
        head = new Node<E>();
        head.next = null;
        top = null;//栈顶初始化为null
        size = 0;
    }

    /**
     * 把item压入栈中
     *
     * @param item
     */
    public void push(E item) {
        /********** Begin *********/
		Node<E> sn = new Node<E>(item);
		if(!isEmpty())
			sn.setNext(top);
			top = sn;
			++size;
        /********** End *********/
    }

    /**
     * 返回它栈顶元素并删除
     */
    public E pop() {
        if (isEmpty())
            throw new NoSuchElementException("栈为空！");

        /********** Begin *********/
			E e = null;
		  	e = top.getItem();
			top = top.getNext();
			size--;
		return e;


        /********** End *********/
    }

    /**
     * 返回栈中元素个数
     *
     * @return
     */
    public int size() {
        return size;
    }

    /**
     * 判断一个栈是否为空
     *
     * @return
     */
    public boolean isEmpty() {
        return (null == head);
    }

    //链表结点内部类
    private static class Node<E> {
        private E item;
        private Node<E> next;
        //构造器
	public Node(){}
	public Node(E item) {
		this.item = item;	
	}
	public Node(Node<E> next) {
		this.next = next;
	}
	public Node(E item, Node<E> next) {
		this.item = item;
		this.next = next;
	}
	//数据域get属性
	public E getItem() {
		return item;
	}
	//数据域set属性
	public void setItem(E item) {
		this.item = item;
	}
	//引用域get属性
	public Node<E> getNext() {
		return next;
	}
	//引用域get属性
	public void setNext(Node<E> next) {
		this.next = next;
	}
    }
}
