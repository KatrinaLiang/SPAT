package step4;


import java.util.concurrent.locks.ReentrantLock;
public class Task {
	public volatile int inc = 0;

	public void increase() {
		synchronized (this) {
			++inc;

		}
	}

	public static void main(String[] args) {
		final Task test = new Task();
		ReentrantLock l = new ReentrantLock();
		for (int i = 0; i < 10; i++) {
			new Thread() {
				public void run() {
					for (int j = 0; j < 1000; j++) {
						l.lock();
						test.increase();
						l.unlock();

					}
				};
			}.start();
		}
		while (Thread.activeCount() > 1) // 保证前面的线程都执行完
			Thread.yield();
		System.out.println(test.inc);
	}
}
