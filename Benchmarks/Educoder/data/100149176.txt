package step2;
import java.util.LinkedList;
import java.util.Queue;

class Node{
	public Node(int x,int y){
		this.x=x;
		this.y=y;
	}
	public int x,y;
}
public class Task {
    private boolean vis[][];
		public void bfs(int x,int y,char[][] arr,int n,int m) {
			vis[x][y]=true;
			int[][] dir= {{0,1},{1,0},{0,-1},{-1,0}};
			Queue<Node>q =new LinkedList<Node>();
			q.add(new Node(x,y));
			while(!q.isEmpty()) {
				Node node = q.poll();
				x=node.x;
				y=node.y;
				for(int i=0;i<4;i++) {
					int xx=x+dir[i][0];
					int yy=y+dir[i][1];
					if(xx>=0&&xx<n&&yy>=0&&yy<m) {
						if(vis[xx][yy]==false&&arr[xx][yy]=='o') {
							q.add(new Node(xx,yy));
							vis[xx][yy]=true;
						}
					}
					
				}
			}

		}
	public int virusArea(int nn,int mm,char[][] arr) {
		  /**************BEGIN************/
	         
			 int n=arr.length;
	            if(n==0)return 0;
			 int m=arr[0].length;
	           
			 vis=new boolean[n][m];
			 for(int i=0;i<n;i++)
			 {
				 for(int j=0;j<m;j++) {
					 vis[i][j]=false;
				 }
			 }
			 int ans=0;
			 for(int i=0;i<n;i++)
			 {
				 for(int j=0;j<m;j++) {
					 if(arr[i][j]=='o'&&vis[i][j]==false) {
						 bfs(i,j,arr,n,m);
						 ans++;
					 }
				 }
			 }
		 
	        return ans;
	     /***********END ***************/
		 }
	
	
}
