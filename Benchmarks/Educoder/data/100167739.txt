
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.stream.Collectors;

public class Java_TranslationSchemaAnalysis {
    public static String readSource() throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder(12000);
        List<String> list = new ArrayList<String>();
        String tmp;
        while ((tmp = bufferedReader.readLine()) != null)
            sb.append(tmp).append(System.lineSeparator());
        return sb.append(' ').toString();
    }

    public static void main(String[] args) throws IOException {
        Parser parser = new Parser(readSource());
        Tree.Program program = parser.parse();
        Visitor visitor = new Visitor(parser.lexer.getLineMap());
        visitor.visitProgram(program);
        if (visitor.errorMessages.size() != 0) {
            System.out.print(visitor.errorMessages.stream().collect(Collectors.joining("\n")));
        } else {
            System.out.print(Env.varValue.entrySet().stream().map(entry -> String.format("%s: %s", entry.getKey(), entry.getValue())).collect(Collectors.joining("\n")));
        }
    }

    static class Env {
        static final Map<String, Object> varValue = new LinkedHashMap<>();

        public static void put(String name, Object value) {
            varValue.put(name, value);
        }

        public static Object get(String name) {
            return varValue.get(name);
        }

        public static void set(String name, Object value) {
            varValue.computeIfPresent(name, (k, v) -> value);
        }
    }

    static class Visitor {
        Tokenizer.LineMap lineMap;
        List<String> errorMessages = new ArrayList<>();

        public Visitor(Tokenizer.LineMap lineMap) {
            this.lineMap = lineMap;
        }

        public void visitProgram(Tree.Program program) {
            List<Tree.VarDef> varDefs = program.getVarDefs();
            Tree.Block block = program.getBlock();
            for (Tree.VarDef varDef : varDefs) {
                visitVarDef(varDef);
            }
            visitBlock(block);
        }

        public void visitVarDef(Tree.VarDef varDef) {
            Tree.Type vartype = ((Tree.Type) varDef.vartype);
            Tree.Literal initValue = ((Tree.Literal) varDef.init);
            if (vartype.typeTag != initValue.typeTag)
                reportTypeError(vartype.typeTag, initValue.typeTag, initValue.pos);
            Env.put(varDef.name, initValue.value);
        }

        public void visitBlock(Tree.Block block) {
            for (Tree.Statement stat : block.stats) {
                visitStatement(stat);
            }
        }

        public void visitStatement(Tree.Statement stat) {
            switch (stat.getTag()) {
            case IF: visitIf(((Tree.If) stat)); break;
            case BLOCK: visitBlock(((Tree.Block) stat)); break;
            case ASSIGN: visitAssign(((Tree.Assign) stat));
            }
        }

        private void visitAssign(Tree.Assign assign) {
            Tree.Ident left = (Tree.Ident) assign.left;
            Object value = visitExpression(assign.right);
            if (value != null)
                Env.set(left.name, value);
        }

        private void visitIf(Tree.If stmt) {
            Boolean cond = (Boolean) visitExpression(stmt.cond);
            if (cond)
                visitStatement(stmt.thenpart);
            else
                visitStatement(stmt.elsepart);
        }

        private Object visitExpression(Tree.Expression expression) {
            switch (expression.getTag()) {
            case IDENT: return Env.get(((Tree.Ident) expression).name);
            case LITERAL: return ((Tree.Literal) expression).value;
            case PARENS: return visitParens(((Tree.Parens) expression));
            case BINARY: return visitBinary(((Tree.Binary) expression));
            default:
                throw new AssertionError();
            }
        }

        private Object visitBinary(Tree.Binary binary) {
            Tree.Expression left = binary.left;
            Tree.Expression right = binary.right;
            Object leftValue = visitExpression(left);
            Object rightValue = visitExpression(right);
            if (leftValue instanceof Integer && rightValue instanceof Integer) {
                int a1 = ((Integer) leftValue).intValue();
                int a2 = ((Integer) rightValue).intValue();
                if (a2 == 0) {
                    reportDividedByZeroError(right.pos);
                    return null;
                }
                switch (binary.operand) {
                case PLUS: return a1 + a2;
                case MINUS: return a1 - a2;
                case MUL: return a1 * a2;
                case DIV: return a1 / a2;
                case LT: return a1 < a2;
                case GT: return a1 > a2;
                case LE: return a1 <= a2;
                case GE: return a1 >= a2;
                case EQ: return a1 == a2;
                default:
                    return null;
                }
            } else {
                double a1 = ((Number) leftValue).doubleValue();
                if (((Number) rightValue).intValue() == 0) {
                    reportDividedByZeroError(right.pos);
                    return null;
                }
                double a2 = ((Number) rightValue).doubleValue();
                switch (binary.operand) {
                case PLUS: return a1 + a2;
                case MINUS: return a1 - a2;
                case MUL: return a1 * a2;
                case DIV: return a1 / a2;
                case LT: return a1 < a2;
                case GT: return a1 > a2;
                case LE: return a1 <= a2;
                case GE: return a1 >= a2;
                case EQ: return a1 == a2;
                default: {
                    return null;
                }
                }
            }
        }

        private Object visitParens(Tree.Parens parens) {
            return visitExpression(parens.expr);
        }

        public void reportTypeError(Tree.TypeTag expected, Tree.TypeTag actual, int pos) {
            errorMessages.add(String.format("error message:line %d,%s can not be translated into %s type", lineMap.getLineNumber(pos),
                    actual, expected.name().toLowerCase()));
        }

        public void reportDividedByZeroError(int pos) {
            errorMessages.add(String.format("error message:line %d,division by zero", lineMap.getLineNumber(pos)));
        }
    }

    static class Parser {
        Lexer lexer;

        Tokens.Token token;

        public Parser(String buf) {
            this.lexer = new Lexer(buf);
            nextToken();
        }

        public void nextToken() {
            lexer.nextToken();
            token = lexer.token();
        }

        public Tree.Program parse() {
            return program();
        }

        public Tree.Program program() {
            List<Tree.VarDef> decls = decls();
            Tree.Block block = compoundStmt();
            return new Tree.Program(decls, block).setPos(token.pos);
        }

        public List<Tree.VarDef> decls() {
            List<Tree.VarDef> varDefs = new ArrayList<>();
            switch (token.kind) {
            case INT:
            case REAL:
                varDefs.add(decl());
                varDefs.addAll(decls());
                break;
            case LBRACE:
                return varDefs;
            default:
                throw new AssertionError();
            }
            return varDefs;
        }

        public Tree.VarDef decl() {
            String name;
            Tree.Ident ident;
            Tree.Type type;
            Tree.Literal literal;
            type = type();
            ident = ident();
            name = ident.name;
            accept(Tokens.TokenKind.EQ);
            switch (token.kind) {
            case REALLITERAL:
                literal = realnum();
                break;
            case INTLITERAL:
                literal = intnum();
                break;
            default:
                throw new AssertionError();
            }
            accept(Tokens.TokenKind.SEMI);
            return new Tree.VarDef(name, ident, type, literal).setPos(token.pos);
        }

        public Tree.Block compoundStmt() {
            List<Tree.Statement> stats;
            accept(Tokens.TokenKind.LBRACE);
            stats = stmts();
            accept(Tokens.TokenKind.RBRACE);
            return new Tree.Block(stats).setPos(token.pos);
        }

        private List<Tree.Statement> stmts() {
            List<Tree.Statement> stats = new ArrayList<>();
            switch (token.kind) {
            case LBRACE: case IF: case IDENT:
                stats.add(stmt());
                stats.addAll(stmts());
                break;
            case RBRACE:
                return stats;
            default:
                throw new AssertionError();
            }
            return stats;
        }

        private Tree.Statement stmt() {
            switch (token.kind) {
            case LBRACE:
                return compoundStmt();
            case IF:
                return ifstmt();
            case IDENT:
                return assgstmt();
            default:
                throw new AssertionError();
            }
        }

        private Tree.Assign assgstmt() {
            Tree.Ident ident = ident();
            accept(Tokens.TokenKind.EQ);
            Tree.Expression arithexpr = arithexpr();
            accept(Tokens.TokenKind.SEMI);
            return new Tree.Assign(ident, arithexpr).setPos(token.pos);
        }

        private Tree.If ifstmt() {
            Tree.Expression cond;
            Tree.Statement thenpart;
            Tree.Statement elsepart;
            accept(Tokens.TokenKind.IF);
            accept(Tokens.TokenKind.LPAREN);
            cond = boolexpr();
            accept(Tokens.TokenKind.RPAREN);
            accept(Tokens.TokenKind.THEN);
            thenpart = stmt();
            accept(Tokens.TokenKind.ELSE);
            elsepart = stmt();
            return new Tree.If(cond, thenpart, elsepart).setPos(token.pos);
        }

        private Tree.Expression boolexpr() {
            Tree.Expression left = arithexpr();
            Tree.Tag tag = operand();
            Tree.Expression right = arithexpr();
            return new Tree.Binary(tag, left, right).setPos(token.pos);
        }

        private Tree.Expression arithexpr() {
            Tree.Expression left;

            switch (token.kind) {
            case LPAREN: case IDENT: case INTLITERAL: case REALLITERAL:
                left = multexpr();
                return arithexprprime(left);
            default:
                throw new AssertionError();
            }
        }

        private Tree.Expression arithexprprime(Tree.Expression left) {
            Tree.Tag operand;
            Tree.Expression right;
            switch (token.kind) {
            case PLUS: case SUB:
                operand = operand();
                right = multexpr();
                right = arithexprprime(right);
                return new Tree.Binary(operand, left, right).setPos(token.pos);
            case RPAREN: case SEMI: case LT: case GT: case LTEQ: case GTEQ: case EQEQ:
            default:
                return left;
            }
        }

        private Tree.Expression multexpr() {
            Tree.Expression left;
            switch (token.kind) {
            case LPAREN: case IDENT: case INTLITERAL: case REALLITERAL:
                left = simpleexpr();
                return multexprprime(left);
            default:
                throw new AssertionError();
            }
        }

        private Tree.Expression multexprprime(Tree.Expression left) {
            Tree.Tag operand;
            Tree.Expression right;
            switch (token.kind) {
            case STAR: case SLASH:
                operand = operand();
                right = simpleexpr();
                right = multexprprime(right);
                return new Tree.Binary(operand, left, right).setPos(token.pos);
            case RPAREN: case SEMI: case LT: case GT: case LTEQ: case GTEQ: case EQEQ: case PLUS: case SUB:
            default:
                return left;
            }
        }

        private Tree.Expression simpleexpr() {
            switch (token.kind) {
            case IDENT: return ident();
            case INTLITERAL: return intnum();
            case REALLITERAL: return realnum();
            case LPAREN:
                accept(Tokens.TokenKind.LPAREN);
                Tree.Expression parens = new Tree.Parens(arithexpr()).setPos(token.pos);
                accept(Tokens.TokenKind.RPAREN);
                return parens;
            default:
                throw new AssertionError();
            }
        }

        private Tree.Tag operand() {
            try {
                switch (token.kind) {
                case LT: return Tree.Tag.LT;
                case LTEQ: return Tree.Tag.LE;
                case GT: return Tree.Tag.GT;
                case GTEQ: return Tree.Tag.GE;
                case EQEQ: return Tree.Tag.EQ;
                case PLUS: return Tree.Tag.PLUS;
                case SUB: return Tree.Tag.MINUS;
                case STAR: return Tree.Tag.MUL;
                case SLASH: return Tree.Tag.DIV;
                default: throw new AssertionError();
                }
            } finally {
                nextToken();
            }
        }

        private Tree.Literal intnum() {
            if (token.kind != Tokens.TokenKind.INTLITERAL)
                throw new AssertionError();
            try {
                return new Tree.Literal(Tree.TypeTag.INT, Integer.valueOf(((Tokens.NumericToken) token).val)).setPos(token.pos);
            } finally {
                nextToken();
            }
        }

        private Tree.Literal realnum() {
            if (token.kind != Tokens.TokenKind.REALLITERAL)
                throw new AssertionError();
            try {
                return new Tree.Literal(Tree.TypeTag.REAL, Double.valueOf(((Tokens.NumericToken) token).val)).setPos(token.pos);
            } finally {
                nextToken();
            }
        }


        private Tree.Ident ident() {
            if (token.kind != Tokens.TokenKind.IDENT)
                throw new AssertionError();
            try {
                return new Tree.Ident(((Tokens.NamedToken) token).name).setPos(token.pos);
            } finally {
                nextToken();
            }
        }

        public Tree.Type type() {
            try {
                switch (token.kind) {
                case INT:
                    return new Tree.Type(Tree.TypeTag.INT).setPos(token.pos);
                case REAL:
                    return new Tree.Type(Tree.TypeTag.REAL).setPos(token.pos);
                default:
                    throw new AssertionError();
                }
            } finally {
                nextToken();
            }
        }

        public void accept(Tokens.TokenKind tk) {
            if (token.kind == tk) {
                nextToken();
            } else {
                throw new AssertionError();
            }
        }
    }

    static abstract class Tree {
        public enum Tag {
            VARDEF,   // int a = 3;
            TYPEINDET,// int
            LITERAL,  // 1 2 3.0
            ASSIGN,   // a = b
            IDENT,    // a
            BLOCK,    // { stmt.... }
            IF,       //If
            BINARY,   //二元运算符表达式
            PARENS,   //括号表达式


            PLUS, // +
            MINUS,// -
            MUL,  // *
            DIV,  // /
            LT,   // <
            GT,   // >
            LE,   // <=
            GE,   // >=
            EQ    // ==
        }

        public enum TypeTag {
            INT,
            REAL;

            @Override
            public String toString() {
                switch (this) {
                case INT: return "intnum";
                case REAL: return "realnum";
                default:
                    return null;
                }
            }
        }

        public abstract Tag getTag();

        public boolean hasTag(Tag tag) {
            return tag == getTag();
        }

        public static abstract class Statement extends Tree {
        }

        public static abstract class Expression extends Tree {
        }

        public static class Program extends Tree {
            List<VarDef> varDefs;
            Block block;

            public Program(List<VarDef> varDefs, Block block) {
                this.varDefs = varDefs;
                this.block = block;
            }

            public List<VarDef> getVarDefs() {
                return varDefs;
            }

            public Block getBlock() {
                return block;
            }

            @Override
            public Tag getTag() {
                return null;
            }
        }

        public static class VarDef extends Tree {
            String name;
            Expression nameexpr;
            Expression vartype;
            Expression init;

            public VarDef(String name, Expression nameexpr, Expression vartype, Expression init) {
                this.name = name;
                this.nameexpr = nameexpr;
                this.vartype = vartype;
                this.init = init;
            }

            @Override
            public Tag getTag() {
                return Tag.VARDEF;
            }


        }

        public static class Ident extends Expression {
            public String name;

            public Ident(String name) {
                this.name = name;
            }

            public String getName() {
                return name;
            }

            @Override
            public Tag getTag() {
                return Tag.IDENT;
            }
        }

        public static class Literal extends Expression {
            public TypeTag typeTag;
            public Object value;

            public Literal(TypeTag typeTag, Object value) {
                this.typeTag = typeTag;
                this.value = value;
            }

            public TypeTag getTypeTag() {
                return typeTag;
            }

            public Object getValue() {
                return value;
            }

            @Override
            public Tag getTag() {
                return Tag.LITERAL;
            }
        }

        public static class Type extends Expression {
            public TypeTag typeTag;

            public Type(TypeTag typeTag) {
                this.typeTag = typeTag;
            }

            @Override
            public Tag getTag() {
                return Tag.TYPEINDET;
            }

            public TypeTag getTypeTag() {
                return typeTag;
            }
        }

        public static class Block extends Statement {
            public List<Statement> stats;

            public Block(List<Statement> stats) {
                this.stats = stats;
            }

            @Override
            public Tag getTag() {
                return Tag.BLOCK;
            }
        }

        public static class If extends Statement {
            Expression cond;
            Statement thenpart;
            Statement elsepart;

            public If(Expression cond, Statement thenpart, Statement elsepart) {
                this.cond = cond;
                this.thenpart = thenpart;
                this.elsepart = elsepart;
            }

            @Override
            public Tag getTag() {
                return Tag.IF;
            }
        }

        public static class Assign extends Statement {
            Expression left;
            Expression right;

            public Assign(Expression left, Expression right) {
                this.left = left;
                this.right = right;
            }

            @Override
            public Tag getTag() {
                return Tag.ASSIGN;
            }
        }

        public static class Binary extends Expression {
            public Expression left;
            public Expression right;
            Tag operand;

            public Binary(Tag operand, Expression left, Expression right) {
                this.left = left;
                this.right = right;
                this.operand = operand;
            }

            @Override
            public Tag getTag() {
                return Tag.BINARY;
            }

            public Expression getLeft() {
                return left;
            }

            public Expression getRight() {
                return right;
            }

            public Tag getOperand() {
                return operand;
            }
        }

        public static class Parens extends Expression {
            public Expression expr;

            public Parens(Expression expr) {
                this.expr = expr;
            }

            public Expression getExpression() {
                return expr;
            }

            @Override
            public Tag getTag() {
                return Tag.PARENS;
            }
        }

        int pos;

        public <T extends Tree> T setPos(int pos) {
            this.pos = pos;
            return ((T) this);
        }
    }


    static class Lexer {
        private Tokens tokens;
        private Tokens.Token token;
        private Tokens.Token prevToken;
        private Tokenizer tokenizer;

        public Lexer(String buf) {
            this.tokenizer = new Tokenizer(buf);
            this.tokens = Tokens.instance();
        }

        public Tokens.Token prevToken() {
            return prevToken;
        }

        public void nextToken() {
            prevToken = token;
            token = tokenizer.readToken();
        }

        public Tokens.Token token() {
            return token;
        }

        public Tokenizer.LineMap getLineMap() {
            return tokenizer.getLineMap();
        }
    }

    public static class Tokenizer {
        private Reader reader;

        private Tokens.TokenKind tk;

        private final Tokens tokens;

        private final LineMap lineMap;

        public Tokenizer(String buf) {
            this.reader = new Reader(buf);
            this.tokens = Tokens.instance();
            this.lineMap = new LineMap(buf);
        }

        public Tokens.Token readToken() {
            reader.tp = 0;
            int pos = 0;
            int endPos = 0;
            loop:
            while (true) {
                pos = reader.bp;
                switch (reader.ch) {
                case ' ':
                case '\t':
                    do {
                        reader.scanChar();
                    } while (reader.ch == ' ' || reader.ch == '\t');
                    break;
                case '\n':
                    reader.scanChar();
                    break;
                case '\r':
                    reader.scanChar();
                    if (reader.ch == '\n')
                        reader.scanChar();
                    break;
                case 'A': case 'B': case 'C': case 'D': case 'E':
                case 'F': case 'G': case 'H': case 'I': case 'J':
                case 'K': case 'L': case 'M': case 'N': case 'O':
                case 'P': case 'Q': case 'R': case 'S': case 'T':
                case 'U': case 'V': case 'W': case 'X': case 'Y':
                case 'Z':
                case 'a': case 'b': case 'c': case 'd': case 'e':
                case 'f': case 'g': case 'h': case 'i': case 'j':
                case 'k': case 'l': case 'm': case 'n': case 'o':
                case 'p': case 'q': case 'r': case 's': case 't':
                case 'u': case 'v': case 'w': case 'x': case 'y':
                case 'z':
                case '_':
                    scanIdentify();
                    break loop;
                case '0': case '1': case '2': case '3': case '4':
                case '5': case '6': case '7': case '8': case '9':
                    scanNumber();
                    break loop;
                case ';':
                    reader.scanChar(); tk = Tokens.TokenKind.SEMI; break loop;
                case '(':
                    reader.scanChar(); tk = Tokens.TokenKind.LPAREN; break loop;
                case ')':
                    reader.scanChar(); tk = Tokens.TokenKind.RPAREN; break loop;
                case '{':
                    reader.scanChar(); tk = Tokens.TokenKind.LBRACE; break loop;
                case '}':
                    reader.scanChar(); tk = Tokens.TokenKind.RBRACE; break loop;
                default:
                    if (isSpecial(reader.ch))
                        scanOperator();
                    else if (reader.bp == reader.len)
                        tk = Tokens.TokenKind.EOF;
                    break loop;
                }
            }
            endPos = reader.bp;
            switch (tk) {
            case INTLITERAL:
            case REALLITERAL:
                return new Tokens.NumericToken(tk, reader.chars(), pos, endPos);
            case IDENT:
                return new Tokens.NamedToken(tk, reader.chars(), pos, endPos);
            default:
                return new Tokens.Token(tk, pos, endPos);
            }
        }

        private void scanNumber() {
            scanDigits();
            tk = Tokens.TokenKind.INTLITERAL;
            if (reader.ch == '.') {
                reader.putChar(true);
                scanFraction();
            }
        }

        private void scanFraction() {
            if (reader.isDigit()) {
                scanDigits();
                tk = Tokens.TokenKind.REALLITERAL;
            }
        }

        private void scanDigits() {
            do {
                reader.putChar(true);
            } while (reader.isDigit());
        }

        private void scanOperator() {
            while (true) {
                reader.putChar(false);
                String val = reader.chars();
                Tokens.TokenKind tk1 = tokens.lookUpTokenKind(val);
                if (tk1 == Tokens.TokenKind.IDENT) {
                    reader.tp--;
                    break;
                }
                tk = tk1;
                reader.scanChar();
                if (!isSpecial(reader.ch))
                    break;
            }
        }

        private boolean isSpecial(char ch) {
            switch (ch) {
            case '*': case '+': case '-': case '/':
            case '<': case '=': case '>':
                return true;
            default:
                return false;
            }
        }

        private void scanIdentify() {
            reader.putChar(true);
            do {
                switch (reader.ch) {
                case 'A': case 'B': case 'C': case 'D': case 'E':
                case 'F': case 'G': case 'H': case 'I': case 'J':
                case 'K': case 'L': case 'M': case 'N': case 'O':
                case 'P': case 'Q': case 'R': case 'S': case 'T':
                case 'U': case 'V': case 'W': case 'X': case 'Y':
                case 'Z':
                case 'a': case 'b': case 'c': case 'd': case 'e':
                case 'f': case 'g': case 'h': case 'i': case 'j':
                case 'k': case 'l': case 'm': case 'n': case 'o':
                case 'p': case 'q': case 'r': case 's': case 't':
                case 'u': case 'v': case 'w': case 'x': case 'y':
                case 'z':
                case '$': case '_':
                case '0': case '1': case '2': case '3': case '4':
                case '5': case '6': case '7': case '8': case '9':
                    break;
                default:
                    tk = tokens.lookUpTokenKind(reader.chars());
                    return;
                }
                reader.putChar(true);
            } while (true);
        }

        public LineMap getLineMap() {
            return lineMap;
        }

        public static class LineMap {
            private int[] startPos;

            public LineMap(String src) {
                List<Integer> startPos = new LinkedList<>();
                int cnt = 0;
                int pos = -1;
                while ((pos = src.indexOf(System.lineSeparator(), pos + 1)) != -1)
                    startPos.add(pos);
                this.startPos = new int[startPos.size() + 1];
                ListIterator<Integer> iterator = startPos.listIterator();
                while (iterator.hasNext())
                    this.startPos[iterator.nextIndex()] = iterator.next();
            }

            public int getLineNumber(int pos) {
                int lineNumber = Arrays.binarySearch(startPos, pos);
                return lineNumber >= 0 ? lineNumber + 1 : -lineNumber;
            }

        }
    }

    static class Reader {
        private char[] buf;

        public int bp;

        public final int len;

        public char ch;


        private char[] tbuf = new char[128];

        public int tp;

        public Reader(String input) {
            buf = input.toCharArray();
            int i = input.length() - 1;
            while (i >= 0 && Character.isWhitespace(input.charAt(i)))
                --i;
            len = i + 1;
            buf[len] = 0x1A;
            bp = -1;
            scanChar();
        }

        public void scanChar() {
            if (bp < len) {
                ch = buf[++bp];
            }
        }

        public void putChar(char ch) {
            putChar(ch, false);
        }

        public void putChar(boolean next) {
            putChar(ch, next);
        }

        public void putChar(char ch, boolean next) {
            tbuf[tp++] = ch;//不考虑缓冲区溢出的情况
            if (next)
                scanChar();
        }

        public String chars() {
            return new String(tbuf, 0, tp);
        }

        public boolean isDigit() {
            char c = ch;
            if (c >= '0' && c <= '9')
                return true;
            return Character.isDigit(c);
        }
    }

    static class Tokens {
        private Map<String, TokenKind> tokenKindMap = new HashMap<>(128);

        public static Tokens instance() {
            return new Tokens();
        }

        private Tokens() {
            for (TokenKind t : TokenKind.values())
                if (t.name != null)
                    tokenKindMap.putIfAbsent(t.name, t);
        }

        public TokenKind lookUpTokenKind(String val) {
            return tokenKindMap.getOrDefault(val, TokenKind.IDENT);
        }

        public enum TokenKind {
            EOF(),
            INT("int"),
            REAL("real"),
            ELSE("else"),
            IF("if"),
            WHILE("while"),
            THEN("then"),
            LPAREN("("),
            RPAREN(")"),
            SEMI(";"),
            LBRACE("{"),
            RBRACE("}"),
            PLUS("+"),
            SUB("-"),
            STAR("*"),
            SLASH("/"),
            LT("<"),
            LTEQ("<="),
            EQ("="),
            EQEQ("=="),
            GT(">"),
            GTEQ(">="),
            INTLITERAL,
            REALLITERAL,
            IDENT;

            public String name;

            TokenKind(String name) {
                this.name = name;
            }

            TokenKind() {

            }
        }

        public static class Token {
            public final TokenKind kind;

            public final int pos;

            public final int endPos;

            public Token(TokenKind kind, int pos, int endPos) {
                this.kind = kind;
                this.pos = pos;
                this.endPos = endPos;
            }

            @Override
            public boolean equals(Object o) {
                if (this == o) return true;
                if (o == null || getClass() != o.getClass()) return false;
                Token token = (Token) o;
                return kind == token.kind;
            }

            @Override
            public int hashCode() {
                return Objects.hash(kind);
            }

            @Override
            public String toString() {
                return kind.name() + ":" + kind.name;
            }
        }


        public static class NamedToken extends Token {
            public final String name;

            public NamedToken(TokenKind tokenKind, String name, int pos, int endPos) {
                super(tokenKind, pos, endPos);
                this.name = name;
            }

            @Override
            public String toString() {
                return kind.name() + ":" + name;
            }
        }

        public static class NumericToken extends Token {
            public final String val;

            public NumericToken(TokenKind tokenKind, String val, int pos, int endPos) {
                super(tokenKind, pos, endPos);
                this.val = val;
            }

            @Override
            public String toString() {
                return kind.name() + ":" + val;
            }
        }
    }

}
