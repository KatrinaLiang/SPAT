import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Java_LexAnalysis {

    private static StringBuffer prog = new StringBuffer();

    private static int index = 0;

    private static int count = 0;

    private static Map<String,Integer> map = new HashMap<>();

    private static final int END_STATE_IDENTIFIER = Integer.MAX_VALUE - 1;

    private static final int END_STATE_KEYWORD = Integer.MAX_VALUE - 2;

    private static final int END_STATE_NUM = Integer.MAX_VALUE - 3;

    private static final int END_STATE_RELOP = Integer.MAX_VALUE - 4;
    /**
     *  this method is to read the standard input
     */
    private static void read_prog()
    {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNextLine())
        {
            prog.append(sc.nextLine());
            prog.append("\n");
        }
    }


    // add your method here!!



    /**
     *  you should add some code in this method to achieve this lab
     */
    private static void analysis()
    {
        read_prog();
        //System.out.print(prog);
        //System.out.print(prog.length());
        index = -1;

        int state = 0;
        char c = prog.charAt(0);
        StringBuilder str = new StringBuilder();
        while (true) {
            switch (state) {
                case 0:
                    c = nextChar();
                    if (c == '`')
                        return;
                    if ( c == '_' ) {
                        str.append(c);
                        state = 1;
                    }else if (Character.isDigit(c)) {
                        str.append(c);
                        state = 2;
                    }else if (Character.isLetter(c)) {
                        str.append(c);
                        state = 4;
                    }else if ( c == '"') {
                        toOutPut("String", "\"");
                        state = 6;
                    }else if ( c == '/') {
                        str.append(c);
                        state = 7;
                    }else if ( c == ' ' || c == '\n' || c == '\t') {
                        state = 0;
                    }
                    else {
                        str.append(c);
                        switch (c) {
                            case '-':
                                state = 5;
                                break;
                            case '!':
                                state = 5;
                                break;
                            case '%':
                                state = 5;
                                break;
                            case '&':
                                state = 5;
                                break;
                            case '(':
                                state = 5;
                                break;
                            case ')':
                                state = 5;
                                break;
                            case '*':
                                state = 5;
                                break;
                            case ',':
                                state = 5;
                                break;
                            case '.':
                                state = 5;
                                break;
                            case '/':
                                state = 5;
                                break;
                            case ':':
                                state = 5;
                                break;
                            case ';':
                                state = 5;
                                break;
                            case '?':
                                state = 5;
                                break;
                            case '[':
                                state = 5;
                                break;
                            case ']':
                                state = 5;
                                break;
                            case '^':
                                state = 5;
                                break;
                            case '{':
                                state = 5;
                                break;
                            case '|':
                                state = 5;
                                break;
                            case '}':
                                state = 5;
                                break;
                            case '~':
                                state = 5;
                                break;
                            case '+':
                                state = 5;
                                break;
                            case '<':
                                state = 5;
                                break;
                            case '=':
                                state = 5;
                                break;
                            case '>':
                                state = 5;
                                break;
                        }
                    }
                    break;
                case 1:
                    c = nextChar();
                    if ( Character.isLetter(c) || Character.isDigit(c) ) {
                        str.append(c);
                        state = 1;
                    }else {
                        if (map.containsKey(str.toString()))
                            state = END_STATE_KEYWORD;
                        else
                            state = END_STATE_IDENTIFIER;
                    }
                    break;
                case 2:
                    c = nextChar();
                    if (Character.isDigit(c)) {
                        state = 2;
                        str.append(c);
                    }
                    else if ( c == '.' ) {
                        state = 3;
                        str.append(c);
                    }
                    else state = END_STATE_NUM;
                    break;
                case 3:
                    c = nextChar();
                    if (Character.isDigit(c)) {
                        state = 3;
                        str.append(c);
                    }
                    else state = END_STATE_NUM;
                    break;
                case 4:
                    c = nextChar();
                    if ( Character.isLetter(c)) {
                        str.append(c);
                        state = 1;
                    }else {
                        if (map.containsKey(str.toString()))
                            state = END_STATE_KEYWORD;
                        else
                            state = END_STATE_IDENTIFIER;
                    }
                    break;
//                case 5:
//                    c = nextChar();
//                    if (Character.isDigit(c)) {
//                        state = 2;
//                    }else state = 6;
//                    break;
                case 5:
                    c = nextChar();
                    str.append(c);
                    String check = str.toString();
                    if (map.containsKey(check)) {
                        state = 5;
                    }else state = END_STATE_RELOP;
                    break;
                case 6:
                    c = nextChar();
                    if (c != '"') {
                        str.append(c);
                        state = 6;
                    }else {
                        toOutPut("Identifier", str.toString());
                        str.setLength(0);
                        toOutPut("String", "\"");
                        state = 0;
                    }
                    break;
                case 7:
                    c = nextChar();
                    if ( c == '/' ) {
                        str.append(c);
                        state = 8;
                    }else if ( c == '*') {
                        str.append(c);
                        state = 9;
                    }else {
                        index--;
                        toOutPut("RELOP", str.toString());
                        str.setLength(0);
                        state = 0;
                    }
                    break;
                case 8:
                    c = nextChar();
                    if ( c != '\n' ) {
                        str.append(c);
                        state = 8;
                    }else {
                        index--;
                        toOutPut("Comment", str.toString());
                        str.setLength(0);
                        state = 0;
                    }
                    break;
                case 9:
                    c = nextChar();
                    if ( c == '*' ) {
                        str.append(c);
                        state = 10;
                    }else {
                        str.append(c);
                        state = 9;
                    }
                    break;
                case 10:
                    c = nextChar();
                    if ( c == '/' ) {
                        str.append(c);
                        toOutPut("Comment", str.toString());
                        str.setLength(0);
                        state = 0;
                    }else {
                        str.append(c);
                        state = 9;
                    }
                    break;


                case END_STATE_IDENTIFIER:
                    index--;
                    toOutPut("Identifier", str.toString());
                    str.setLength(0);
                    state = 0;
                    break;
                case END_STATE_KEYWORD:
                    index--;
                    toOutPut("KEYWORD", str.toString());
                    str.setLength(0);
                    state = 0;
                    break;
                case END_STATE_NUM:
                    index--;
                    toOutPut("NUM", str.toString());
                    str.setLength(0);
                    state = 0;
                    break;
                case END_STATE_RELOP:
                    index--;
                    str.deleteCharAt(str.length() - 1);
                    toOutPut("RELOP", str.toString());
                    str.setLength(0);
                    state = 0;
                    break;


            }
        }
    }

    private static void toOutPut(String name, String a) {
        Integer b = null;
        if (name.equals("Identifier")) {
            b = map.get("标识符");
        }else if (name.equals("NUM")) {
            b = map.get("常数");
        }else if (name.equals("Comment")) {
            b = map.get("/*注释*/");
        }else {
            b = map.getOrDefault(a, 0);
        }
        if (count != 0)
            System.out.println();
        count++;
        System.out.print(count + ": <" + a + "," + b + ">" );
    }

    private static void readKeys() {
        String filePath = Java_LexAnalysis.class.getResource("c_keys.txt").getPath();
        File f = new File(filePath);
        Scanner scanner = null;
        try {
            scanner = new Scanner(f);
        }catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        while (scanner.hasNextLine()) {
            String str = scanner.nextLine();
            String[] args = str.split("    ");
            int num = Integer.parseInt(args[1]);
            map.put(args[0], num);
        }
    }

    private static char nextChar() {

        index++;

        if (index >= prog.length())
            return '`';

        return prog.charAt(index);
    }

    /**
     * this is the main method
     * @param args
     */
    public static void main(String[] args) {
        readKeys();
        analysis();
    }
}
