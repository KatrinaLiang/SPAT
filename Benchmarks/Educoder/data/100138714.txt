package step2;

import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;

public class Task {

    public void runThread(int num) {
        // 在这里开启线程 获取线程执行的结果
        ThreadCallable threadCallable=new ThreadCallable(num);
        FutureTask<Integer> futureTask=new FutureTask<>(threadCallable);
        new Thread(futureTask).start();
        try {
            System.out.println("线程的返回值为："+futureTask.get());
        }catch (InterruptedException | ExecutionException e){
            e.printStackTrace();
        }
    }
}

/* 在这里实现Callable接口及方法 */
class ThreadCallable implements Callable<Integer> {
    private int num;
        public ThreadCallable(){
        
    }
    public ThreadCallable(int num){
        this.num=num;
    }
    public Integer call() throws InterruptedException, ExecutionException {
        int[] fibonacci=new int[1000];
        fibonacci[0]=1;
        fibonacci[1]=1;
        if (num==1||num==2){
            return 1;
        }else{
            for (int i = 2; i < num; i++) {
                fibonacci[i]=fibonacci[i-1]+fibonacci[i-2];
            }
            return fibonacci[num-1];
        }
    }
}
