package step3;

/**
 * Created by zengpeng on 2017/12/25.
 */
public class MyLinkedList {

	private Node first;// 头结点，不存数据
	private Node last;// 指向链表的最后一个节点
	private int size;

	public MyLinkedList() {
		size = 0;
		first = new Node(0, null);
		last = null;
	}

	/**
	 * 添加到链表尾部
	 *
	 * @param item
	 */
	public void add(int item) {
		/********** Begin *********/

		if (size == 0) {
			first.item = item;
		} else {
			// Node ch=first;
			Node ch = first;
			while (ch.next != null) {
				ch = ch.next;
			}
			ch.next = new Node(item, null);
		}
		size++;

		/********** End *********/
	}

	/**
	 * 添加数据item到指定位置index index从0开始
	 * 
	 * @param index
	 * @param item
	 */
	public void add(int index, int item) {
		checkPosIndex(index);

		/********** Begin *********/
		Node head;
		Node end;
		if (size == 0) {
			first.item = item;
			size++;
			return;
		}
		Node newnode = new Node(item, null);
		if (index == 0) {
			// ch.next = first;
			// first=ch;
			newnode.next = first;
			first = newnode;

		} else

		{
			end = first;
			head = null;
			int j = 0;
			while (end != null && j < index) {
				head = end;
				end = end.next;
				j++;
			}
			if (j == index) {
				head.next = newnode;
				newnode.next = end;

			}
		}
		size++;
		/********** End *********/
	}

	/**
	 * 删除指定位置index处的元素并返回, index从0开始
	 * 
	 * @param index
	 * @return
	 */
	public int remove(int index) {
		checkPosIndex(index);

		/********** Begin *********/
		Node end = first;
		int a = 0;
		if (index == 0) {
			a = end.item;
			first = end.next;
			size--;
		} else {
			Node head = null;
			int j = 1;
			while (end.next != null && j <= index) {
				head = end;
				end = end.next;
				j++;
			}
			head.next = end.next;
			a = end.item;
			end = null;
			size--;
		}
		return a;

		/********** End *********/
	}

	public int size() {
		return size;
	}

	private void checkPosIndex(int index) {
		if (index < 0 || index > size) {
			throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
		}
	}

	// 结点内部类
	private static class Node {
		int item;
		Node next;

		Node(int item, Node next) {
			this.item = item;
			this.next = next;
		}
	}
}
