package step2;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
class Apple {
    private String name;
    public void setName(String name) {
        this.name = name;
    }
}
public class Reflect_stu {
    private String name;
    public Reflect_stu() {
    }
    public Reflect_stu(String name) {
        this.name = name;
    }
    public static void main(String[] args) {
        String classPath = "step2.Apple";
        Class clazz = null;
        try {
            clazz = Class.forName(classPath);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        printConstructors(clazz);
        printFields(clazz);
        printMethods(clazz);
    }
    public static void printConstructors(Class clazz) {
        Constructor[] constructors = clazz.getDeclaredConstructors();
        for (Constructor constructor : constructors) {
            String name = constructor.getName();
            printModifiers(clazz);
            System.out.print(name + "(");
            Class[] paramTypes = constructor.getParameterTypes();
            printParamTypes(paramTypes);
        }
    }
    private static void printModifiers(Class clazz) {
        System.out.print("  ");
        String modifiers = Modifier.toString(clazz.getModifiers());
        if (modifiers.length() > 0) {
            System.out.print(modifiers + " ");
        }
    }
    public static void printMethods(Class clazz) {
        Method[] methos = clazz.getDeclaredMethods();
        for (Method method : methos) {
            Class returnType = method.getReturnType();
            String name = method.getName();
            printModifiers(clazz);
            System.out.print(returnType.getName() + " " + name + "(");
            Class[] paramTypes = method.getParameterTypes();
            printParamTypes(paramTypes);
        }
    }
    private static void printParamTypes(Class[] paramTypes) {
        for (int j = 0; j < paramTypes.length; ++j) {
            if (j > 0) {
                System.out.print(",");
            }
            System.out.print(paramTypes[j].getName());
        }
        System.out.println(");");
    }
    public static void printFields(Class clazz) {
        Field[] fields = clazz.getDeclaredFields();
        for (Field field : fields) {
            Class type = field.getType();
            String name = field.getName();
            printModifiers(clazz);
            System.out.println(type.getName() + " " + name + ";");
        }
    }
}