import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Java_LexAnalysis
{
    //常量
    public static final int wordsSize = 32;
    public static final String words[] = {"auto","break","case","char","const","continue","default","do","double","else","enum","extern",
            "float","for","goto","if","int","long","register","return","short","signed","sizeof","static","struct","switch",
            "typedef","union","unsigned","void","volatile","while"};
    public static final int symbolSize = 46;
    public static final String symbol[] = {"-","--","-=","->","!","!=","%","%=","&","&&","&=","(",")","*","*=",",",".","/","/=",":",";",
            "?","[","]","^","^=","{","|","||","|=","}","~","+","++","+=","<","<<","<<=","<=","=","==",">",">=",">>",">>=","\""};

    //变量
    private static StringBuffer prog = new StringBuffer();
    private static Map<String, Integer> map = new HashMap<String, Integer>();
    private static String target;
    private static int i;
    private static int flag;

    /**
     *  this method is to read the standard input
     */
    private static void read_prog()
    {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNextLine())
        {
            prog.append(sc.nextLine());
            //这里要加一行，否则无法处理单行注释
            prog.append("\n");
        }
    }

    // add your method here!!

    //判断字母或下划线
    private static boolean isLetter(char x){
        return (x >= 'A' && x <= 'Z') || (x >= 'a' && x <= 'z') || x == '_';
    }

    //判断数字
    private static boolean isDigit(char x){
        return (x >= '0' && x <= '9');
    }

    //判断无歧义的字符
    private static boolean isUnambiguousSymbol(char x){
        return x == '(' || x ==')' || x == ',' || x == '.' || x == ':' || x == ';' || x =='?' ||
                x == '[' || x == ']' || x == '{' || x == '}' || x == '~' || x == '"';
    }

    //判断有歧义的字符
    private static boolean isAmbiguousSymbol(char x){
        return x == '-' || x == '!' || x == '%' || x == '&' || x == '*' || x == '/' || x == '^' ||
                x == '|' || x == '+' || x == '<' || x == '=' || x == '>';
    }

    //初始化map
    private static void init(){
        for(int i = 0; i < wordsSize;i++){
            map.put(words[i],i+1);
        }
        for(int i = 0; i < symbolSize; i++){
            map.put(symbol[i],i+1+wordsSize);
        }
    }

    //核心函数，扫描字符串
    private static int scan(){
        target = "";
        if(flag == 1){
            while(prog.charAt(i)!= '"'){
                target += prog.charAt(i);
                i++;
            }
            flag = 2;
            return 81;
        }
        while(i < prog.length() && (prog.charAt(i) == ' ' ||  prog.charAt(i) == '\n' || prog.charAt(i) == '\r' || prog.charAt(i) == '\t'))
            i++;
        if(i >= prog.length())
            return 0;
        if(isLetter(prog.charAt(i))){
            while(isLetter(prog.charAt(i)) || isDigit(prog.charAt(i))){
                target += prog.charAt(i);
                i++;
            }
            if(map.get(target) == null){
                return 81;
            }else{
                return map.get(target);
            }
        }else if(isDigit(prog.charAt(i))){
            while(isDigit(prog.charAt(i))){
                target += prog.charAt(i);
                i++;
            }
            return 80;
        }else if(isUnambiguousSymbol(prog.charAt(i))){
            target += prog.charAt(i);
            if(prog.charAt(i) == '"'){
                if(flag == 0){
                    flag = 1;
                }else if(flag == 2){
                    flag = 0;
                }
            }
            i++;
            return map.get(target);
        }else if(isAmbiguousSymbol(prog.charAt(i))){
            if(prog.charAt(i) == '-'){
                if(prog.charAt(i+1) == '-'){
                    target = "--";
                    i += 2;
                }else if (prog.charAt(i+1) == '='){
                    target = "-=";
                    i += 2;
                }else if (prog.charAt(i+1) == '>'){
                    target = "->";
                    i += 2;
                }else{
                    target = "-";
                    i++;
                }
            }else if(prog.charAt(i) == '!'){
                if(prog.charAt(i+1) == '='){
                    target = "!=";
                    i += 2;
                }else{
                    target = "!";
                    i++;
                }
            }else if(prog.charAt(i) == '%'){
                if(prog.charAt(i+1) == '='){
                    target = "%=";
                    i += 2;
                }else{
                    target = "%";
                    i++;
                }
            }else if(prog.charAt(i) == '&'){
                if(prog.charAt(i+1) == '&'){
                    target = "&&";
                    i += 2;
                }else if (prog.charAt(i+1) == '='){
                    target = "&=";
                    i += 2;
                }else{
                    target = "&";
                    i++;
                }
            }else if(prog.charAt(i) == '*'){
                if(prog.charAt(i+1) == '='){
                    target = "*=";
                    i += 2;
                }else{
                    target = "*";
                    i++;
                }
            }else if(prog.charAt(i) == '/'){
                if(prog.charAt(i+1) == '='){
                    target = "/=";
                    i += 2;
                }else if(prog.charAt(i+1) == '/'){
                    //单行注释
                    while(prog.charAt(i) != '\n' && prog.charAt(i) != '\r'){
                        target += prog.charAt(i);
                        i++;
                    }
                    return 79;
                }else if(prog.charAt(i+1) == '*'){
                    //多行注释
                    target = "/*";
                    i += 2;
                    while(!(prog.charAt(i) == '*' && prog.charAt(i+1) == '/')){
                        target += prog.charAt(i);
                        i++;
                    }
                    target += "*/";
                    i += 2;
                    return 79;
                }else{
                    target = "/";
                    i++;
                }
            }else if(prog.charAt(i) == '^'){
                if(prog.charAt(i+1) == '='){
                    target = "^=";
                    i += 2;
                }else{
                    target = "^";
                    i++;
                }
            }else if(prog.charAt(i) == '|'){
                if(prog.charAt(i+1) == '|'){
                    target = "||";
                    i += 2;
                }else if(prog.charAt(i+1) == '='){
                    target = "|=";
                    i += 2;
                }else{
                    target = "|";
                    i++;
                }
            }else if(prog.charAt(i) == '+'){
                if(prog.charAt(i+1) == '+'){
                    target = "++";
                    i += 2;
                }else if(prog.charAt(i+1) == '='){
                    target = "+=";
                    i += 2;
                }
                else{
                    target = "+";
                    i++;
                }
            }else if(prog.charAt(i) == '<'){
                if(prog.charAt(i+1) == '='){
                    target = "<=";
                    i += 2;
                }else if(prog.charAt(i+1) == '<'){
                    if(prog.charAt(i+2) == '='){
                        target = "<<=";
                        i += 3;
                    }else{
                        target = "<<";
                        i += 2;
                    }
                }else{
                    target = "<";
                    i++;
                }
            }else if(prog.charAt(i) == '='){
                if(prog.charAt(i+1) == '='){
                    target = "==";
                    i += 2;
                }else{
                    target = "=";
                    i++;
                }
            }else if(prog.charAt(i) == '>'){
                if(prog.charAt(i+1) == '='){
                    target = ">=";
                    i += 2;
                }else if(prog.charAt(i+1) == '>'){
                    if(prog.charAt(i+2) == '='){
                        target = ">>=";
                        i += 3;
                    }else{
                        target = ">>";
                        i += 2;
                    }
                }else{
                    target = ">";
                    i++;
                }
            }
            return map.get(target);
        }else{
            i++;
            return 0;
        }
    }

    /**
     *  you should add some code in this method to achieve this lab
     */
    private static void analysis()
    {
        read_prog();
        init();
        int len = prog.length();
        i = 0;
        flag = 0;
        int number = 1;
        while(i <= len){
            int code = scan();
            if(code == 0){
                break;
            }
            if(number != 1)
                System.out.println();
            System.out.print(number + ": <"+target + "," + code + ">");
            number++;
        }
    }

    /**
     * this is the main method
     * @param args
     */
    public static void main(String[] args) {
        analysis();
    }
}