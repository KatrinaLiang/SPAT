package step2;

public class BestTeam {

	/********* Begin *********/

    public Long getBestTeam(int numbers, int[] abilities, int selectedNum, int distance){
	        long[][] f = new long[numbers + 1][selectedNum + 1]; 
        long[][] g = new long[numbers + 1][selectedNum + 1];
        //初始化两个数组，即K=1的情况
        for(int i = 1; i <= numbers; i++) {
            f[i][1] = abilities[i];
            g[i][1] = abilities[i];
        }

        for(int curK = 2; curK <= selectedNum; curK++) {
            for(int curN = curK; curN <= numbers; curN++) {  
                long tempMax = Long.MIN_VALUE;         
                long tempMin = Long.MAX_VALUE;
                for(int left = Math.max(curK - 1, curN - distance); left <= curN - 1; left++){
                    if(tempMax < Math.max(f[left][curK - 1] * abilities[curN], g[left][curK - 1] * abilities[curN])) {
                        tempMax = Math.max(f[left][curK - 1] * abilities[curN], g[left][curK - 1] * abilities[curN]);
                    }
                    
                    if(tempMin > Math.min(f[left][curK - 1] * abilities[curN], g[left][curK - 1] * abilities[curN])) {
                        tempMin = Math.min(f[left][curK - 1] * abilities[curN], g[left][curK - 1] * abilities[curN]);
                    }
                }
                //更新最大值
                f[curN][curK] = tempMax;
                //更新最小值
                g[curN][curK] = tempMin;
            }
        }

        long maxResult = Long.MIN_VALUE;
        for(int curN = selectedNum; curN <= numbers; curN++) {
            if(f[curN][selectedNum] > maxResult)
                maxResult = f[curN][selectedNum];
        }
   
		return maxResult;
    }

	/********* End *********/
}
