import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Scanner;

public class Java_LexAnalysis {
    private static StringBuffer prog = new StringBuffer();
    private static HashMap<String, Integer> Map = new HashMap<>();
    private static int pos = 1;

    /**
     * this method is to read the standard input
     */
    private static void read_prog() {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNextLine()) {
            prog.append(sc.nextLine() + "/n");
        }
    }

    // add your method here!!
    private static HashMap<String, Integer> getMap() throws FileNotFoundException {

        HashMap<String, Integer> map = new HashMap<>();
        Scanner in = new Scanner(new File("c_keys.txt"));
        while (in.hasNextLine()) {
            String[] strs = in.nextLine().split("    ");
            map.put(strs[0], Integer.valueOf(strs[1]));
        }
        return map;
    }

    private static void process() {
        StringBuffer sb = new StringBuffer();
        char[] nProg = prog.toString().replace("\t", "").toCharArray();
        int i = nProg.length - 2, j = 1;
        char blank = ' ';
        //i是文件的终止下标。
        sb.append(nProg[0]);
        while (j < i ) {
            char getNextChar = nProg[j++];
            if (getNextChar == blank) {
                if (Map.get(sb.toString()) != null) {
                    System.out.println(pos++ + ": <" + sb.toString() + "," + Map.get(sb.toString()) + ">");
                    sb.delete(0, sb.length());
                    if (i == j - 1) break;
                    sb.append(getNextChar == ' ' ? "" : getNextChar);
                    continue;
                }
                else {
                    if (sb.length()==0)
                        continue;
                    System.out.println(pos++ + ": <" + sb.toString() + "," + "81" + ">");
                    sb.delete(0, sb.length());
                    if (i == j - 1) break;
                    continue;
                }
            }
            if (nProg[j] == 'n' && getNextChar == '/') {
                j++;
                continue;
            }
            if (nProg[j] == 'r' && getNextChar == '/') {
                j++;
                continue;
            }
            if (nProg[j] == 't' && getNextChar == '/') {
                j++;
                continue;
            }
            if (Map.get(sb.toString()) != null) {
                if (getNextChar == '*') {
                    sb.append(getNextChar);
                    while (nProg[j] != '*' || nProg[j + 1] != '/') {
                        sb.append(nProg[j]);
                        j++;
                    }
                    sb.append(nProg[j++]);
                    sb.append(nProg[j++]);
                    System.out.println(pos++ + ": <" + sb.toString() + "," + "79" + ">");
                    sb.delete(0, sb.length());
                    if (i == j - 1) break;
                    sb.append(nProg[j++]);
                    continue;
                }
                System.out.println(pos++ + ": <" + sb.toString() + "," + Map.get(sb.toString()) + ">");
                sb.delete(0, sb.length());
                if (i == j - 1) break;
                sb.append(getNextChar == ' ' ? "" : getNextChar);
                continue;
            }
            if (Map.get(String.valueOf(getNextChar)) != null) {
                //处理这个单独字符前sb里面的内容，其只可能是标志符或者数字
                boolean hasAlphbetic = false;
                for (char c : sb.toString().toCharArray()
                ) {
                    if (Character.isLetter(c)) {
                        hasAlphbetic = true;
                        break;
                    }
                }
                if (hasAlphbetic) {
                    //标志符
                    System.out.println(pos++ + ": <" + sb.toString() + "," + 81 + ">");
                    sb.delete(0, sb.length());
                    if (i == j - 1) break;
                } else {
                    //数字
                    if (sb.length() != 0) {
                        System.out.println(pos++ + ": <" + sb.toString() + "," + 80 + ">");
                        sb.delete(0, sb.length());
                        if (i == j - 1) break;
                    }
                }
                //唯一三元运算符
                if (j + 2 < i - 1) {
                    char getNextChar2 = nProg[j];
                    char getNextChar3 = nProg[j + 1];
                    if (getNextChar2 == '>' && getNextChar3 == '=') {
                        sb.append(getNextChar);
                        sb.append(getNextChar2);
                        sb.append(getNextChar3);
                        System.out.println(pos++ + ": <" + sb.toString() + "," + 77 + ">");
                        sb.delete(0, sb.length());
                        if (i == j - 1) break;
                        continue;
                    }
                }
                //二元运算符注释处理
                if (j + 1 < i - 1) {
                    char getNextChar2 = nProg[j];
                    sb.append(getNextChar);
                    sb.append(getNextChar2);
                    //处理注释
                    if (getNextChar == '/' && getNextChar2 == '/') {
                        j++;
                        while (nProg[j] != '/' || nProg[j + 1] != 'n') {
                            sb.append(nProg[j]);
                            j++;
                        }

                        j = j + 2;
                        System.out.println(pos++ + ": <" + sb.toString() + "," + "79" + ">");
                        sb.delete(0, sb.length());
                        if (i == j - 1) break;
                        sb.append(nProg[j++]);
                        continue;
                    }
                    if (getNextChar == '/' && getNextChar2 == '*') {
                        j++;
                        while (nProg[j] != '*' || nProg[j + 1] != '/') {
                            sb.append(nProg[j]);
                            j++;
                        }
                        sb.append(nProg[j++]);
                        sb.append(nProg[j++]);
                        System.out.println(pos++ + ": <" + sb.toString() + "," + "79" + ">");
                        sb.delete(0, sb.length());
                        if (i == j - 1) break;
                        sb.append(nProg[j++]);
                        continue;
                    }

                }
                //一元运算符
                if (Map.get(sb.toString()) != null) {
                    System.out.println(pos++ + ": <" + sb.toString() + "," + Map.get(sb.toString()) + ">");
                    sb.delete(0, sb.length());
                    j++;
                    if (i == j - 1) break;
                    continue;
                } else {
                    if (sb.toString().length() == 0) {
                        sb.append(getNextChar);
                        continue;
                    }
                    sb.deleteCharAt(sb.length() - 1);
                    //引号单独处理
                    if (nProg[j - 1] == '"') {
                        System.out.println(pos++ + ": <" + "\"" + "," + "78" + ">");
                        sb.deleteCharAt(0);
                        while (nProg[j] != '"' && j < i - 1) {
                            sb.append(nProg[j++]);
                        }
                        j++;
                        System.out.println(pos++ + ": <" + sb.toString() + "," + 81 + ">");
                        sb.delete(0, sb.length());
                        System.out.println(pos++ + ": <" + "\"" + "," + "78" + ">");
                        if (i == j - 1) break;
                        sb.append(nProg[j] == ' ' ? "" : nProg[j]);
                        j++;
                        continue;
                    }
                    System.out.println(pos++ + ": <" + sb.toString() + "," + Map.get(sb.toString()) + ">");
                    sb.delete(0, sb.length());
                    if (i == j - 1) break;
                    //sb.append(nProg[j] == ' ' ? "" : nProg[j]);
                    //j++;
                    continue;
                }
            }
            if (Character.isLetterOrDigit(getNextChar)) {
                sb.append(getNextChar == ' ' ? "" : getNextChar);
                continue;
            }

        }
    }

    /*
int main(){
    int k = 0; //gag
    }
     */
    /*
    /**
     * you should add some code in this method to achieve this lab
     */
    private static void analysis() {
        read_prog();
        //System.out.println(prog.toString());
    }

    /**
     * this is the main method
     *
     * @param args
     */
    public static void main(String[] args) throws FileNotFoundException {
        analysis();
        Map = getMap();
        process();
        System.out.print(pos + ": <" + "}" + "," + "63" + ">");
        //System.out.print(prog.toString().replace("\t", ""));
    }
}
