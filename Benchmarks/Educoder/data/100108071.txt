package step3;

/**
 * Created by zengpeng on 2017/12/25.
 */
public class MyLinkedList {

    private Node first;//头结点，不存数据
    private Node last;//指向链表的最后一个节点
    private int size;

    public MyLinkedList() {
        size = 0;
        first = new Node(0, null);
        last = null;
    }

    /**
     * 添加到链表尾部
     *
     * @param item
     */
    public void add(int item) {
        /********** Begin *********/

	Node newcode=new Node(item,null);
        if(first.next==null){
			first.next=newcode;
            last=newcode;
            size++;
        }
        else{
        last.next=newcode;
        last=newcode;
        size++;}
        


        /********** End *********/
    }

    /**
     * 添加数据item到指定位置index
     * index从0开始
     * @param index
     * @param item
     */
    public void add(int index, int item) {
        checkPosIndex(index);

        /********** Begin *********/
   Node cur=first;
        Node pre=null;
        Node newcode=new Node(item,null);
        int n=0;
		if(index==0){
			newcode.next=first.next;
			first.next=newcode;
			if(index==size){
				last=newcode;
			}
			size++;
		}
		else{
			
			while(cur.next!=null&&n<=index){
				pre=cur;
				cur=cur.next;
				n++;
			}
			pre.next=newcode;
			newcode.next=cur;
			cur=null;
			pre=null;
			size++;
		}



        /********** End *********/
    }

    /**
     * 删除指定位置index处的元素并返回, index从0开始
     * @param index
     * @return
     */
    public int remove(int index) {
        checkPosIndex(index);

        /********** Begin *********/

int item;
		if(index==0){
			item=(first.next).item;
			first.next=(first.next).next;
			size--;
			return item;
		}
		else{
			Node cur=first;
			Node pre=null;
			int n=0;
			while(cur.next!=null&&n<=index){
				pre=cur;
				cur=cur.next;
				n++;
			}
			item=cur.item;
			if(index==size-1){
				pre.next=null;
				last=pre;
			}else{
			pre.next=cur.next;}
			cur=null;
			pre=null;
			size--;
			return item;
		}


        /********** End *********/
    }

    public int size() {
        return size;
    }

    private void checkPosIndex(int index) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
    }

    //结点内部类
    private static class Node {
        int item;
        Node next;

        Node(int item, Node next) {
            this.item = item;
            this.next = next;
        }
    }
}
