import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.csvreader.CsvReader;
import com.csvreader.CsvWriter;

public class Task{
    /**
    同现标签数据：src/step1/tag_cooccurrence.csv
    开发者标签数据：src/step1/user_tag.csv
    推荐结果文件：src/step1/user_recommand.csv
    **/
    public static void main(String[] args) throws IOException {
        //读取文件内容至list集合中
        List<User> userlist = getUserTagsFromCsv("src/step1/user_tag.csv");
        List<String>  taglist=getTagFromCsv("src/step1/tag_cooccurrence.csv");
        List<String> data = new ArrayList<>();
        int name_id=0;
        float[] score=new float[2000];
        int[] fin=new int[10];
        Map<Integer,String> form1=new HashMap<>();
        Map<String,Integer> form2=new HashMap<>();
        for(String s:taglist) {
            String[] temp=s.split(",");
            for(String ss:temp) {    
                if(!form2.containsKey(ss)) {
                    form2.put(ss, name_id);    
                    form1.put(name_id, ss);
                    name_id++;
                }
            }
        }
        for(int k=0;k<20;k++) {
        for(Tag t:userlist.get(k).getTags()) {
            for(String s:taglist) {
                String[] temp=s.split(",");
                for(String ss:temp) {
                    if(t.getName().equals(ss)) {
                        for(String s_m:temp) 
                            score[form2.get(s_m)]+=t.getWeight()/temp.length;;                        
                    }
                }
            }
        }
        float max=0;
        int index=0;
        for(int i=0;i<10;i++) {
            for(int j=0;j<2000;j++) {
                if(score[j]>max) {
                    max=score[j];
                    index=j;
                }
            }
            
            score[index]=0;
            fin[i]=index;
            max=0;
            index=0;
            for(Tag t:userlist.get(k).getTags()) 
                if(t.getName().equals(form1.get(fin[i]))) {
                    i--;
                    break;
                }
            
        }
        String jieguo="";
        for(int j=0;j<8;j++)
            jieguo=jieguo+form1.get(fin[j])+",";
        jieguo=jieguo+form1.get(fin[8]);
        for(int j=0;j<2000;j++)
            score[j]=0;
        for(int j=0;j<10;j++)
            fin[j]=0;
        data.add(jieguo);
        
        }
        //将数据写到user_recommand.csv中
        writeCsvFile("src/step1/user_recommand.csv",data);
    }

    /**
     * 读取user_tag文件信息至list集合中
     * 
     * @param path 文件路径
     * @return 用户的集合
     * @throws IOException
     */
    public static List<User> getUserTagsFromCsv(String path) throws IOException {
        // 创建创建用户集合并读取文件数据
        List<User> userList = new ArrayList<>();
        try {
            // 创建CSV读对象   需要设置编码格式为UTF-8
            CsvReader csvReader = new CsvReader(new FileInputStream(new File(path)),Charset.forName("UTF-8"));
            // 读表头
            boolean readHeaders = csvReader.readHeaders();
            while (csvReader.readRecord()) {
                // 读一整行
                // 读这行的第一列
                String id = csvReader.get(0);
                //System.out.println(id);
                String tagName = csvReader.get(1);
                //System.out.println(tagName);
                String weight = csvReader.get(2);
                //System.out.println(weight);
                String[] tagItems = tagName.split(",");
                String[] weightItems = weight.split(",");
                List<Tag> tags = new ArrayList<>();
                User user = new User();
                user.setTagStr(tagName);
                user.setUserId(Integer.valueOf(id));
                for (int j = 0; j < tagItems.length; j++) {
                    Tag tag = new Tag();
                    tag.setName(tagItems[j]);
                    tag.setWeight(Double.valueOf(weightItems[j].replace("[", "").replace("]", "")));
                    tags.add(tag);
                }
                user.setTags(tags);
                userList.add(user);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return userList;
    }

    /**
     * 读取tag_coocurrence.csv
     * @param path 路径
     * @return 读取后生成map集合
     * @throws IOException
     */
    public static List<String> getTagFromCsv(String path) throws IOException {
        List<String> data1 = new ArrayList<>();
        try {
            // 创建CSV读对象   需要设置编码格式为UTF-8
            CsvReader csvReader = new CsvReader(new FileInputStream(new File(path)),Charset.forName("UTF-8"));
            // 读表头
            boolean readHeaders = csvReader.readHeaders();
            while (csvReader.readRecord()) {
                // 读一整行
                // 读这行的第一列
                String tagName = csvReader.get(1);
                data1.add(tagName);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        return data1;
    }

    /**
     * 写结果文件
     * 
     * @param filePath 文件路径
     * @param data 要写入的数据
     * @throws IOException
     */
    public static void writeCsvFile(String filePath, List<String> data) throws IOException {
        // 创建CSV写对象
        CsvWriter csvWriter = new CsvWriter(filePath, ',', Charset.forName("UTF-8"));
        // CsvWriter csvWriter = new CsvWriter(filePath);
        // 写表头
        String[] headers = {"id","recommand_tags"};
        csvWriter.writeRecord(headers);
        //循环写数据
        int id = 1;
        for (String tag : data) {
            String[] content = {id++ +"", tag};
            csvWriter.writeRecord(content);
        }
        csvWriter.close();
    }
}
// 标签
class Tag {
    private String name; // 标签名
    private double weight; // 权重值

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getWeight() {
        return weight;
    }

    public void setWeight(double weight) {
        this.weight = weight;
    }
}

// 用户
class User {
    private int userId;
    private List<Tag> tags;
    private String tagStr;

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public List<Tag> getTags() {
        return tags;
    }

    public void setTags(List<Tag> tags) {
        this.tags = tags;
    }

    public String getTagStr() {
        return tagStr;
    }

    public void setTagStr(String tagStr) {
        this.tagStr = tagStr;
    }
    

    
    
    
}