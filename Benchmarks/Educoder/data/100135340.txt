package case5;

public class abstractTest {
	public static void main(String[] args) {
		/********* begin *********/
		// 分别实例化Student类与Worker类的对象，并调用各自构造方法初始化类属性。
		Student stu = new Student();
		stu.setname("张三");
		stu.setage(20);
		stu.setoccupation("学生");

		Worker wor = new Worker();
		wor.setname("李四");
		wor.setage(30);
		wor.setoccupation("工人");
		// 分别调用各自类中被复写的talk()方法 打印信息。
		stu.talk();
		wor.talk();
		/********* end *********/
		
	}
}

// 声明一个名为Person的抽象类，在Person中声明了三个属性name age occupation和一个抽象方法——talk()。
abstract class Person {
	/********* begin *********/
	protected String name;
	protected int age;
	protected String occupation;
	abstract void talk();

	/********* end *********/
}

// Student类继承自Person类，添加带三个参数的构造方法，复写talk()方法 返回姓名、年龄和职业信息
class Student extends Person {
	/********* begin *********/
	public void setname(String name){
		this.name = name;
	}
	public void setage(int age){
		this.age = age;
	}
	public void setoccupation(String occupation){
		this.occupation = occupation;
	}

	public String getname(){
		return name;
	}
	public int getage(){
		return age;
	}
	public String getoccupation(){
		return occupation;
	}

	public void talk(){
		System.out.println(occupation+"——>姓名："+name+"，年龄："+age+"，职业："+occupation+"！");
	}
	/********* end *********/
}

// Worker类继承自Person类，添加带三个参数的构造方法，复写talk()方法 返回姓名、年龄和职业信息
class Worker extends Person {
	/********* begin *********/
	public void setname(String name){
		this.name = name;
	}
	public void setage(int age){
		this.age = age;
	}
	public void setoccupation(String occupation){
		this.occupation = occupation;
	}

	public String getname(){
		return name;
	}
	public int getage(){
		return age;
	}
	public String getoccupation(){
		return occupation;
	}

	public void talk(){
		System.out.println(occupation+"——>姓名："+name+"，年龄："+age+"，职业："+occupation+"！");
	}
	/********* end *********/

}