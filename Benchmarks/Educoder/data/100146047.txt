package step4;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Task {
    private static Lock lock=new ReentrantLock();
	public volatile int inc = 0;

	public void increase() {
		inc++;
	}

	public static void main(String[] args) {
		final Task test = new Task();
		for (int i = 0; i < 10; i++) {
			
                new Thread() {
				public void run() {
					lock.lock();
					try {
						for (int j = 0; j < 1000; j++)
							test.increase();
					} catch (Exception e) {
						e.printStackTrace();
					}finally {
						lock.unlock();
					}
				};
			}.start();
                   
		}
		while (Thread.activeCount() > 1) // 保证前面的线程都执行完
			Thread.yield();
		System.out.println(test.inc);
	}
}