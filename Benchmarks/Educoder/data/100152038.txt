package step1;
import static java.lang.StrictMath.abs;
import static java.lang.StrictMath.acos;
import static java.lang.StrictMath.sin;
import static java.lang.StrictMath.sqrt;
import java.math.BigDecimal;
public class Task {

	 public double solve(double x1, double y1, double r1,
              double x2, double y2, double r2) {
		  /********* Begin *********/
		          double PI = 3.1415926535;
        double ans=0.0;
        double d = sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
        if (d > r1 + r2)
            return PI * r1 * r1+PI * r2 * r2;
        else if (abs(r1 - r2) >= d) {
            if (r2 >= r1)
                return PI * r2 * r2;
            else
                return PI * r1 * r1;
        } else {
            //正弦定理求扇形圆心角
            double a1 = 2.0 * acos((r1 * r1 + d * d - r2 * r2) / 2.0/ r1 / d);
            double a2 = 2.0* acos((r2 * r2 + d * d - r1 * r1) / 2.0 / r2 / d);
            //两个扇形面积和减去四边形的面积即为相交区域面积
            //四边形面积再转化为两个三角形的面积之和来计算
            ans = PI * r1 * r1+PI * r2 * r2-(r1 * r1 * a1 / 2.0+ r2 * r2 * a2 / 2.0 - r1 * r1 * sin(a1) / 2.0- r2 * r2 * sin(a2) / 2.0);
            
            //return ans;


        }
        BigDecimal bg=new BigDecimal(ans);
        ans=bg.setScale(6,BigDecimal.ROUND_HALF_UP).doubleValue();
        return ans;


        


        }
		  
		  
		  /********* End *********/
	  }

