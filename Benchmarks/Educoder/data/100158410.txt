package step4;

import java.lang.reflect.Field;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;


public class Reflect_stu {
    public static void main(String[] args) throws InvocationTargetException {
        //使用反射调用
        Class<?> clazz = null;
        try {
            clazz = Class.forName("step4.Apple");
            Apple apple = (Apple) clazz.newInstance();
            /********** Begin *********/
            Constructor appleConstructor = clazz.getConstructor();
            Object appleObj = appleConstructor.newInstance();
           
            Method setPriceMethod = clazz.getMethod("setPrice",double.class);
            setPriceMethod.invoke(appleObj,14);

            Method getPriceMethod = clazz.getMethod("getPrice");
            System.out.println( getPriceMethod.invoke(appleObj) );

            Method getTotalMethod = clazz.getMethod("getTotal",double.class,int.class);
            
            System.out.println( getTotalMethod.invoke(appleObj,20,24) );
            //Field field = clazz.getDeclaredField("price");
            //field.setAccessible(true);
            //Object val = field.get(apple);
            /********** End *********/

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}


class Apple {
    private double price;
    private int count;

    public Apple() {
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }

    public double getTotal(double price, int count) {
        return price * count;
    }
}