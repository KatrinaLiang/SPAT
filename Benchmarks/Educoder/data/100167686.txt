import java.util.*;

@SuppressWarnings("unchecked")
public class Java_LLParserAnalysis
{
    public static Map<String, String> kToV = new HashMap<String, String>()
    {
        {
            put("program", "A");
            put("compoundstmt", "B");
            put("stmt", "C");
            put("ifstmt", "D");
            put("whilestmt", "E");
            put("assgstmt", "F");
            put("stmts", "G");
            put("if", "s");
            put("boolexpr", "I");
            put("then", "t");
            put("else", "u");
            put("while", "v");
            put("arithexpr", "M");
            put("boolop", "N");
            put("multexpr", "O");
            put("arithexprprime", "P");
            put("simpleexpr", "Q");
            put("multexprprime", "R");
            put("{", "a");
            put("}", "b");
            put("E", "c");
            put("(", "d");
            put(")", "e");
            put("ID", "f");
            put("=", "g");
            put(";", "h");
            put("<", "i");
            put(">", "j");
            put("<=", "k");
            put(">=", "l");
            put("==", "m");
            put("+", "n");
            put("-", "o");
            put("*", "p");
            put("/", "q");
            put("NUM", "r");
        }
    };


    public static Map<String, String> vToK = new HashMap<String, String>()
    {
        {
            put("A", "program");
            put("B", "compoundstmt");
            put("C", "stmt");
            put("D", "ifstmt");
            put("E", "whilestmt");
            put("F", "assgstmt");
            put("G", "stmts");
            put("s", "if");
            put("I", "boolexpr");
            put("t", "then");
            put("u", "else");
            put("v", "while");
            put("M", "arithexpr");
            put("N", "boolop");
            put("O", "multexpr");
            put("P", "arithexprprime");
            put("Q", "simpleexpr");
            put("R", "multexprprime");
            put("a", "{");
            put("b", "}");
            put("c", "E");
            put("d", "(");
            put("e", ")");
            put("f", "ID");
            put("g", "=");
            put("h", ";");
            put("i", "<");
            put("j", ">");
            put("k", "<=");
            put("l", ">=");
            put("m", "==");
            put("n", "+");
            put("o", "-");
            put("p", "*");
            put("q", "/");
            put("r", "NUM");
        }
    };

    public static String[] Statements = {
            "AB", "CD", "CE", "CF", "CB", "BaGb",
            "Gc", "GCG", "DsdIetCuC", "EvdIeC",
            "FfgMh", "IMNM", "Ni", "Nj", "Nk", "Nl",
            "Nm", "MOP", "PnOP", "PoOP", "Pc", "OQR",
            "RpQR", "RqQR", "Rc", "Qf", "Qr", "QdMe"};

    public static ArrayList<Character>[] follow = new ArrayList[18];
    public static ArrayList<Character>[] first = new ArrayList[18];
    public static int[][] table = new int[18][23];

    private static StringBuffer prog = new StringBuffer();
    private static List<Integer> output = new ArrayList<>();

    /**
     * this method is to read the standard input
     */
    private static void read_prog()
    {

    }


    // add your method here!!

    private static boolean nStop(char c)
    {
        return c >= 'A' && c <= 'R';
    }

    private static boolean Stop(char c)
    {
        return c >= 'a' && c <= 'v';
    }


    private static void initFirst()
    {
        for (int i = 0; i < Statements.length; i++)
        {
            String product = Statements[i];
            if (product.length() == 2 && product.charAt(1) == 'c')
            {
                first[product.charAt(0) - 'A'].add('c');
            }
        }
        boolean loop = true;
        while (loop)
        {
            boolean change = false;
            for (int i = 0; i < Statements.length; i++)
            {
                String s = Statements[i];

                for (int j = 1; j < s.length(); j++)
                {
                    if (Stop(s.charAt(j)))
                    {
                        if (!first[s.charAt(0) - 'A'].contains(s.charAt(j)))
                        {
                            first[s.charAt(0) - 'A'].add(s.charAt(j));
                            change = true;
                        }
                        break;
                    } else if (!first[s.charAt(j) - 'A'].contains('c'))
                    {
                        for (Object cO : first[s.charAt(j) - 'A'].toArray())
                        {
                            Character cc = (Character) cO;
                            if (!first[s.charAt(0) - 'A'].contains(cc))
                            {
                                first[s.charAt(0) - 'A'].add(cc);
                                change = true;
                            }
                        }
                        break;
                    } else if (j == s.length() - 1)
                    {
                        if (!first[s.charAt(0) - 'A'].contains('c'))
                        {
                            first[s.charAt(0) - 'A'].add('c');
                            change = true;
                        }
                    }
                }
            }
            if (!change)
                loop=false;
        }

    }

    private static List<Character> first(String str)
    {
        List<Character> result = new ArrayList<>();

        char[] chars = str.toCharArray();
        for (int i = 0; i < chars.length; i++)
        {
            char c = chars[i];
            if (Stop(c))
            {
                if (!result.contains(c))
                {
                    result.add(c);
                }
                break;
            } else
            {
                boolean key = true;
                for (Object cO : first[c - 'A'].toArray())
                {
                    Character cc = (Character) cO;
                    if (cc != 'c')
                    {
                        if (!result.contains(cc))
                        {
                            result.add(cc);
                        }
                    } else if (i == chars.length - 1)
                    {
                        result.add('c');
                    } else
                    {
                        key = false;
                    }
                }
                if (key)
                {
                    break;
                }
            }
        }

        return result;
    }

    private static void initFollow()
    {
        follow[0].add('$');
        boolean k = true;
        while (k)
        {
            boolean change = false;
            for (int i = 0; i < Statements.length; i++)
            {
                String product = Statements[i];
                Character pre = product.charAt(0);
                String post = product.substring(1);
                char[] postChars = post.toCharArray();

                for (int j = 0; j < postChars.length; j++)
                {
                    char cur = postChars[j];
                    if (nStop(cur))
                    {
                        if (j < postChars.length - 1)
                        {
                            List<Character> chars = first(post.substring(j + 1));
                            for (Character c : chars)
                            {
                                if (c != 'c' && !follow[cur - 'A'].contains(c))
                                {
                                    follow[cur - 'A'].add(c);
                                    change = true;
                                } else if (c == 'c')
                                {
                                    for (Character cc : follow[pre - 'A'])
                                    {
                                        if (!follow[cur - 'A'].contains(cc))
                                        {
                                            follow[cur - 'A'].add(cc);
                                            change = true;
                                        }
                                    }
                                }
                            }
                        } else
                        {
                            for (Character cc : follow[pre - 'A'])
                            {
                                if (!follow[cur - 'A'].contains(cc))
                                {
                                    follow[cur - 'A'].add(cc);
                                    change = true;
                                }
                            }
                        }
                    }
                }
            }
            k = change;
        }

    }

    private static void init()
    {
        for (int i = 0; i < 18; i++)
        {
            ArrayList<Character> vector1 = new ArrayList<>();
            ArrayList<Character> vector2 = new ArrayList<>();
            first[i] = vector1;
            follow[i] = vector2;
            for (int j = 0; j < 23; j++)
            {
                table[i][j] = -1;
            }
        }


        initFirst();
        initFollow();

        for (int i = 0; i < Statements.length; i++)
        {
            char pre = Statements[i].charAt(0);
            String post = Statements[i].substring(1);

            for (char c : first(post))
            {
                if (c != 'c')
                {
                    table[pre - 'A'][c - 'a'] = i;
                } else
                {
                    for (Object cO : follow[pre - 'A'])
                    {
                        Character cc = (Character) cO;
                        if (cc != '$')
                            table[pre - 'A'][cc - 'a'] = i;
                         else
                            table[pre - 'A'][22] = i;
                    }
                }
            }
        }
    }

    private static int now = 0;

    private static void print(int x)
    {
        String product = Statements[output.get(now++)];
        char pre = product.charAt(0);
        for (int i = 0; i < x; i++)
        {
            System.out.print("\t");
        }
        System.out.println(vToK.get(Character.toString(pre)));
        char[] post = product.substring(1).toCharArray();
        for (char c : post)
        {
            if (nStop(c))
            {
                print(x + 1);
            } else
            {
                for (int i = 0; i < x + 1; i++)
                {
                    System.out.print("\t");
                }
                System.out.print(vToK.get(Character.toString(c)));
                if (!(x == 1 && c == post[post.length - 1]))
                {
                    System.out.println();
                }
            }
        }
    }

    /**
     * you should add some code in this method to achieve this lab
     */
    @SuppressWarnings("unchecked")
    private static void analysis()
    {
        Stack<Character> stack = new Stack();
        stack.push('$');
        stack.push('A');

        Scanner in = new Scanner(System.in);
        int lineCount = 0;
        boolean accept = false;
        while (!accept && in.hasNextLine())
        {
            String curLine = in.nextLine();
            String[] curLineStrs = curLine.split(" ");
            lineCount++;
            int i = 0;
            while (i < curLineStrs.length)
            {
                String curStr = curLineStrs[i];
                if (curStr.isEmpty())
                {
                    i++;
                    continue;
                }
                Character cStop = kToV.get(curStr).charAt(0);
                Character cNStop = stack.peek();
                if (cNStop == '$')
                {
                    accept = true;
                    break;
                }
                if (Stop(cNStop))
                {
                    if (cNStop.equals(cStop))
                    {
                        stack.pop();
                        i++;
                    } else
                    {
                        int linenow = lineCount;
                        if (i == 0)
                        {
                            linenow--;
                        }
                        System.out.println("语法错误,第" + linenow + "行,缺少\"" + vToK.get(Character.toString(cNStop)) + "\"");
                        stack.pop();
                    }
                } else
                {
                    if (table[cNStop - 'A'][cStop - 'a'] != -1)
                    {
                        stack.pop();
                        int productId = table[cNStop - 'A'][cStop - 'a'];
                        output.add(productId);
                        String product = Statements[productId];
                        for (int j = product.length() - 1; j > 0; j--)
                        {
                            if (product.charAt(j) != 'c')
                            {
                                stack.push(product.charAt(j));
                            }
                        }
                    } else
                    {
                        for (int j = 0; j < 23; j++)
                        {
                            if (table[cNStop - 'A'][j] != -1)
                            {
                                stack.pop();
                                String product = Statements[table[cNStop - 'A'][j]];
                                output.add(table[cNStop - 'A'][j]);
                                for (int k = product.length() - 1; k > 0; k--)
                                {
                                    if (product.charAt(k) != 'c')
                                    {
                                        stack.push(product.charAt(k));
                                    }

                                }
                                break;
                            }
                        }
                    }
                }


            }
            if (stack.peek() == '$')
                break;
        }
        print(0);
    }

    /**
     * this is the main method
     *
     * @param args
     */
    public static void main(String[] args)
    {
        init();
        analysis();
    }
}
