package step3;

/**
 * Created by zengpeng on 2017/12/25.
 */
public class MyLinkedList {

    private Node first;//头结点，不存数据
    private Node last;//指向链表的最后一个节点
    private int size;

    public MyLinkedList() {
        size = 0;
        first = new Node(0, null);
        last = null;
    }

    /**
     * 添加到链表尾部
     *
     * @param item
     */
    public void add(int item) {
        /********** Begin *********/

Node newnode=new Node(item,null);
        if(first.next==null)
        {
            first.next=newnode;
            last=newnode;
        }
        else
        {
            Node current=first.next;
            while(current.next!=null)
            {
                current=current.next;
            }
            current.next=new Node (item,null);
           // System.out.println(last);
        }
        size++;

        /********** End *********/
    }

    /**
     * 添加数据item到指定位置index
     * index从0开始
     * @param index
     * @param item
     */
    public void add(int index, int item) {
        checkPosIndex(index);

        /********** Begin *********/

Node current;
        Node previous;
		Node newnode=new Node (item,null);
        if(index==0)
        {
            newnode.next=first.next;
            first.next=newnode;
            size++;
        }
        else
        {
            current=first.next;
            previous=null;
            int j=0;
            while(current!=null&&j<index)
            {
                previous=current;
                current=current.next;
                j++;
            }
            if(j==index)
            {
				previous.next=newnode;
                newnode.next=current;
                size++;
            }
        }

        /********** End *********/
    }

    /**
     * 删除指定位置index处的元素并返回, index从0开始
     * @param index
     * @return
     */
    public int remove(int index) {
        checkPosIndex(index);

        /********** Begin *********/

 int oldvalue=0;
        Node current=first.next;
        if(index==0)
        {
            oldvalue=current.item;
            first.next=current.next;
            size--;
        }
        else
        {
            Node previous=null;
            int j=1;
            while(current.next!=null&&j<=index)
            {
                previous=current;
                current=current.next;
                j++;
            }
            previous.next=current.next;
            oldvalue=current.item;
            current=null;
            size--;
        }
		return oldvalue;


        /********** End *********/
    }

    public int size() {
        return size;
    }

    private void checkPosIndex(int index) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
    }

    //结点内部类
    private static class Node {
        int item;
        Node next;

        Node(int item, Node next) {
            this.item = item;
            this.next = next;
        }
    }
}
